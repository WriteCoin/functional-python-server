{"selenium.types": {"AnyKey": {"name": "AnyKey", "type": "<class 'typing._UnionGenericAlias'>", "doc": null, "value": "typing.Union[str, int, float]"}}, "selenium.__init__": {"__version__": {"name": "__version__", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "4.2.0"}}, "selenium.common.exceptions": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "__str__": {"name": "__str__", "args": [], "return_type": "None", "doc": "Return str(self)."}, "WebDriverException.__init__": {"name": "__init__", "args": ["self", "msg", "screen", "stacktrace"], "return_type": "None", "doc": null}, "WebDriverException.__str__": {"name": "__str__", "args": ["self"], "return_type": "<class 'str'>", "doc": null}, "UnexpectedAlertPresentException.__init__": {"name": "__init__", "args": ["self", "msg", "screen", "stacktrace", "alert_text"], "return_type": "None", "doc": null}, "UnexpectedAlertPresentException.__str__": {"name": "__str__", "args": ["self"], "return_type": "<class 'str'>", "doc": null}}, "selenium.common.__init__": {"__all__": {"name": "__all__", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "['WebDriverException', 'InvalidSwitchToTargetException', 'NoSuchFrameException', 'NoSuchWindowException', 'NoSuchElementException', 'NoSuchAttributeException', 'NoSuchShadowRootException', 'StaleElementReferenceException', 'InvalidElementStateException', 'UnexpectedAlertPresentException', 'NoAlertPresentException', 'ElementNotVisibleException', 'ElementNotInteractableException', 'ElementNotSelectableException', 'InvalidCookieDomainException', 'UnableToSetCookieException', 'RemoteDriverServerException', 'TimeoutException', 'MoveTargetOutOfBoundsException', 'UnexpectedTagNameException', 'InvalidSelectorException', 'ImeNotAvailableException', 'ImeActivationFailedException', 'InvalidArgumentException', 'JavascriptException', 'NoSuchCookieException', 'ScreenshotException', 'ElementClickInterceptedException', 'InsecureCertificateException', 'InvalidCoordinatesException', 'InvalidSessionIdException', 'SessionNotCreatedException', 'UnknownMethodException']"}}, "selenium.webdriver.__init__": {"__version__": {"name": "__version__", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "4.2.0"}, "__all__": {"name": "__all__", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "['Firefox', 'FirefoxProfile', 'FirefoxOptions', 'Chrome', 'ChromeOptions', 'Ie', 'IeOptions', 'Edge', 'ChromiumEdge', 'EdgeOptions', 'Opera', 'Safari', 'WebKitGTK', 'WebKitGTKOptions', 'WPEWebKit', 'WPEWebKitOptions', 'Remote', 'DesiredCapabilities', 'ActionChains', 'Proxy', 'Keys']"}}, "selenium.webdriver.chrome.options": {"Options.default_capabilities": {"name": "default_capabilities", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x00000278259DF010>"}, "Options.enable_mobile": {"name": "enable_mobile", "args": ["self", "android_package", "android_activity", "device_serial"], "return_type": "None", "doc": null}}, "selenium.webdriver.chrome.service": {"DEFAULT_EXECUTABLE_PATH": {"name": "DEFAULT_EXECUTABLE_PATH", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "chromedriver"}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "Service.__init__": {"name": "__init__", "args": ["self", "executable_path", "port", "service_args", "log_path", "env"], "return_type": "None", "doc": "\n        Creates a new instance of the Service\n\n        :Args:\n         - executable_path : Path to the ChromeDriver\n         - port : Port the service is running on\n         - service_args : List of args to pass to the chromedriver service\n         - log_path : Path for the chromedriver service to log to"}}, "selenium.webdriver.chrome.webdriver": {"DEFAULT_PORT": {"name": "DEFAULT_PORT", "type": "<class 'int'>", "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4", "value": "0"}, "DEFAULT_SERVICE_LOG_PATH": {"name": "DEFAULT_SERVICE_LOG_PATH", "type": "<class 'NoneType'>", "doc": null, "value": "None"}, "DEFAULT_KEEP_ALIVE": {"name": "DEFAULT_KEEP_ALIVE", "type": "<class 'NoneType'>", "doc": null, "value": "None"}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "WebDriver.__init__": {"name": "__init__", "args": ["self", "executable_path", "port", "options", "service_args", "desired_capabilities", "service_log_path", "chrome_options", "service", "keep_alive"], "return_type": "None", "doc": "\n        Creates a new instance of the chrome driver.\n        Starts the service and then creates new instance of chrome driver.\n\n        :Args:\n         - executable_path - Deprecated: path to the executable. If the default is used it assumes the executable is in the $PATH\n         - port - Deprecated: port you would like the service to run, if left as 0, a free port will be found.\n         - options - this takes an instance of ChromeOptions\n         - service - Service object for handling the browser driver if you need to pass extra details\n         - service_args - Deprecated: List of args to pass to the driver service\n         - desired_capabilities - Deprecated: Dictionary object with non-browser specific\n           capabilities only, such as \"proxy\" or \"loggingPref\".\n         - service_log_path - Deprecated: Where to log information from the driver.\n         - keep_alive - Deprecated: Whether to configure ChromeRemoteConnection to use HTTP keep-alive.\n        "}}, "selenium.webdriver.chrome.__init__": {}, "selenium.webdriver.chromium.options": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "ChromiumOptions.KEY": {"name": "KEY", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "goog:chromeOptions"}, "ChromiumOptions.__init__": {"name": "__init__", "args": ["self"], "return_type": "None", "doc": null}, "ChromiumOptions.binary_location": {"name": "binary_location", "type": "<class 'property'>", "doc": "\n        :Returns: The location of the binary, otherwise an empty string\n        ", "value": "<property object at 0x00000278259DE980>"}, "ChromiumOptions.debugger_address": {"name": "debugger_address", "type": "<class 'property'>", "doc": "\n        :Returns: The address of the remote devtools instance\n        ", "value": "<property object at 0x00000278259DEA70>"}, "ChromiumOptions.extensions": {"name": "extensions", "type": "<class 'property'>", "doc": "\n        :Returns: A list of encoded extensions that will be loaded\n        ", "value": "<property object at 0x00000278259DE840>"}, "ChromiumOptions.add_extension": {"name": "add_extension", "args": ["self", "extension"], "return_type": "None", "doc": "\n        Adds the path to the extension to a list that will be used to extract it\n        to the ChromeDriver\n\n        :Args:\n         - extension: path to the \\*.crx file\n        "}, "ChromiumOptions.add_encoded_extension": {"name": "add_encoded_extension", "args": ["self", "extension"], "return_type": "None", "doc": "\n        Adds Base64 encoded string with extension data to a list that will be used to extract it\n        to the ChromeDriver\n\n        :Args:\n         - extension: Base64 encoded string with extension data\n        "}, "ChromiumOptions.experimental_options": {"name": "experimental_options", "type": "<class 'property'>", "doc": "\n        :Returns: A dictionary of experimental options for chromium\n        ", "value": "<property object at 0x00000278259DEAC0>"}, "ChromiumOptions.add_experimental_option": {"name": "add_experimental_option", "args": ["self", "name", "value"], "return_type": "None", "doc": "\n        Adds an experimental option which is passed to chromium.\n\n        :Args:\n          name: The experimental option name.\n          value: The option value.\n        "}, "ChromiumOptions.headless": {"name": "headless", "type": "<class 'property'>", "doc": "\n        :Returns: True if the headless argument is set, else False\n        ", "value": "<property object at 0x00000278259DED90>"}, "ChromiumOptions.to_capabilities": {"name": "to_capabilities", "args": ["self"], "return_type": "<class 'dict'>", "doc": "\n        Creates a capabilities with all the options that have been set\n        :Returns: A dictionary with everything\n        "}, "ChromiumOptions.default_capabilities": {"name": "default_capabilities", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x00000278259DECF0>"}}, "selenium.webdriver.chromium.remote_connection": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "ChromiumRemoteConnection.__init__": {"name": "__init__", "args": ["self", "remote_server_addr", "vendor_prefix", "browser_name", "keep_alive", "ignore_proxy"], "return_type": "None", "doc": null}}, "selenium.webdriver.chromium.service": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "ChromiumService.__init__": {"name": "__init__", "args": ["self", "executable_path", "port", "service_args", "log_path", "env", "start_error_message"], "return_type": "None", "doc": "\n        Creates a new instance of the Service\n\n        :Args:\n         - executable_path : Path to the WebDriver executable\n         - port : Port the service is running on\n         - service_args : List of args to pass to the WebDriver service\n         - log_path : Path for the WebDriver service to log to"}, "ChromiumService.command_line_args": {"name": "command_line_args", "args": ["self"], "return_type": "typing.List[str]", "doc": null}}, "selenium.webdriver.chromium.webdriver": {"DEFAULT_PORT": {"name": "DEFAULT_PORT", "type": "<class 'int'>", "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4", "value": "0"}, "DEFAULT_SERVICE_LOG_PATH": {"name": "DEFAULT_SERVICE_LOG_PATH", "type": "<class 'NoneType'>", "doc": null, "value": "None"}, "DEFAULT_KEEP_ALIVE": {"name": "DEFAULT_KEEP_ALIVE", "type": "<class 'NoneType'>", "doc": null, "value": "None"}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "ChromiumDriver.__init__": {"name": "__init__", "args": ["self", "browser_name", "vendor_prefix", "port", "options", "service_args", "desired_capabilities", "service_log_path", "service", "keep_alive"], "return_type": "None", "doc": "\n        Creates a new WebDriver instance of the ChromiumDriver.\n        Starts the service and then creates new WebDriver instance of ChromiumDriver.\n\n        :Args:\n         - browser_name - Browser name used when matching capabilities.\n         - vendor_prefix - Company prefix to apply to vendor-specific WebDriver extension commands.\n         - port - Deprecated: port you would like the service to run, if left as 0, a free port will be found.\n         - options - this takes an instance of ChromiumOptions\n         - service_args - Deprecated: List of args to pass to the driver service\n         - desired_capabilities - Deprecated: Dictionary object with non-browser specific\n           capabilities only, such as \"proxy\" or \"loggingPref\".\n         - service_log_path - Deprecated: Where to log information from the driver.\n         - keep_alive - Deprecated: Whether to configure ChromiumRemoteConnection to use HTTP keep-alive.\n        "}, "ChromiumDriver.launch_app": {"name": "launch_app", "args": ["self", "id"], "return_type": "None", "doc": "Launches Chromium app specified by id."}, "ChromiumDriver.get_network_conditions": {"name": "get_network_conditions", "args": ["self"], "return_type": "None", "doc": "\n        Gets Chromium network emulation settings.\n\n        :Returns:\n            A dict. For example:\n            {'latency': 4, 'download_throughput': 2, 'upload_throughput': 2,\n            'offline': False}\n        "}, "ChromiumDriver.set_network_conditions": {"name": "set_network_conditions", "args": ["self"], "return_type": "None", "doc": "\n        Sets Chromium network emulation settings.\n\n        :Args:\n         - network_conditions: A dict with conditions specification.\n\n        :Usage:\n            ::\n\n                driver.set_network_conditions(\n                    offline=False,\n                    latency=5,  # additional latency (ms)\n                    download_throughput=500 * 1024,  # maximal throughput\n                    upload_throughput=500 * 1024)  # maximal throughput\n\n            Note: 'throughput' can be used to set both (for download and upload).\n        "}, "ChromiumDriver.delete_network_conditions": {"name": "delete_network_conditions", "args": ["self"], "return_type": "None", "doc": "\n        Resets Chromium network emulation settings.\n        "}, "ChromiumDriver.set_permissions": {"name": "set_permissions", "args": ["self", "name", "value"], "return_type": "None", "doc": "\n        Sets Applicable Permission.\n\n        :Args:\n         - name: The item to set the permission on.\n         - value: The value to set on the item\n\n        :Usage:\n            ::\n                driver.set_permissions('clipboard-read', 'denied')\n        "}, "ChromiumDriver.execute_cdp_cmd": {"name": "execute_cdp_cmd", "args": ["self", "cmd", "cmd_args"], "return_type": "None", "doc": "\n        Execute Chrome Devtools Protocol command and get returned result\n        The command and command args should follow chrome devtools protocol domains/commands, refer to link\n        https://chromedevtools.github.io/devtools-protocol/\n\n        :Args:\n         - cmd: A str, command name\n         - cmd_args: A dict, command args. empty dict {} if there is no command args\n        :Usage:\n            ::\n                driver.execute_cdp_cmd('Network.getResponseBody', {'requestId': requestId})\n        :Returns:\n            A dict, empty dict {} if there is no result to return.\n            For example to getResponseBody:\n            {'base64Encoded': False, 'body': 'response body string'}\n        "}, "ChromiumDriver.get_sinks": {"name": "get_sinks", "args": ["self"], "return_type": "<class 'list'>", "doc": "\n        :Returns: A list of sinks available for Cast.\n        "}, "ChromiumDriver.get_issue_message": {"name": "get_issue_message", "args": ["self"], "return_type": "None", "doc": "\n        :Returns: An error message when there is any issue in a Cast session.\n        "}, "ChromiumDriver.set_sink_to_use": {"name": "set_sink_to_use", "args": ["self", "sink_name"], "return_type": "<class 'str'>", "doc": "\n        Sets a specific sink, using its name, as a Cast session receiver target.\n\n        :Args:\n         - sink_name: Name of the sink to use as the target.\n        "}, "ChromiumDriver.start_desktop_mirroring": {"name": "start_desktop_mirroring", "args": ["self", "sink_name"], "return_type": "<class 'str'>", "doc": "\n        Starts a desktop mirroring session on a specific receiver target.\n\n        :Args:\n         - sink_name: Name of the sink to use as the target.\n        "}, "ChromiumDriver.start_tab_mirroring": {"name": "start_tab_mirroring", "args": ["self", "sink_name"], "return_type": "<class 'str'>", "doc": "\n        Starts a tab mirroring session on a specific receiver target.\n\n        :Args:\n         - sink_name: Name of the sink to use as the target.\n        "}, "ChromiumDriver.stop_casting": {"name": "stop_casting", "args": ["self", "sink_name"], "return_type": "<class 'str'>", "doc": "\n        Stops the existing Cast session on a specific receiver target.\n\n        :Args:\n         - sink_name: Name of the sink to stop the Cast session.\n        "}, "ChromiumDriver.quit": {"name": "quit", "args": ["self"], "return_type": "None", "doc": "\n        Closes the browser and shuts down the ChromiumDriver executable\n        that is started when starting the ChromiumDriver\n        "}, "ChromiumDriver.create_options": {"name": "create_options", "args": ["self"], "return_type": "<class 'selenium.webdriver.common.options.BaseOptions'>", "doc": null}}, "selenium.webdriver.chromium.__init__": {}, "selenium.webdriver.common.action_chains": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "ActionChains.__init__": {"name": "__init__", "args": ["self", "driver", "duration"], "return_type": "None", "doc": "\n        Creates a new ActionChains.\n\n        :Args:\n         - driver: The WebDriver instance which performs user actions.\n         - duration: override the default 250 msecs of DEFAULT_MOVE_DURATION in PointerInput\n        "}, "ActionChains.perform": {"name": "perform", "args": ["self"], "return_type": "None", "doc": "\n        Performs all stored actions.\n        "}, "ActionChains.reset_actions": {"name": "reset_actions", "args": ["self"], "return_type": "None", "doc": "\n        Clears actions that are already stored locally and on the remote end\n        "}, "ActionChains.click": {"name": "click", "args": ["self", "on_element"], "return_type": "None", "doc": "\n        Clicks an element.\n\n        :Args:\n         - on_element: The element to click.\n           If None, clicks on current mouse position.\n        "}, "ActionChains.click_and_hold": {"name": "click_and_hold", "args": ["self", "on_element"], "return_type": "None", "doc": "\n        Holds down the left mouse button on an element.\n\n        :Args:\n         - on_element: The element to mouse down.\n           If None, clicks on current mouse position.\n        "}, "ActionChains.context_click": {"name": "context_click", "args": ["self", "on_element"], "return_type": "None", "doc": "\n        Performs a context-click (right click) on an element.\n\n        :Args:\n         - on_element: The element to context-click.\n           If None, clicks on current mouse position.\n        "}, "ActionChains.double_click": {"name": "double_click", "args": ["self", "on_element"], "return_type": "None", "doc": "\n        Double-clicks an element.\n\n        :Args:\n         - on_element: The element to double-click.\n           If None, clicks on current mouse position.\n        "}, "ActionChains.drag_and_drop": {"name": "drag_and_drop", "args": ["self", "source", "target"], "return_type": "None", "doc": "\n        Holds down the left mouse button on the source element,\n           then moves to the target element and releases the mouse button.\n\n        :Args:\n         - source: The element to mouse down.\n         - target: The element to mouse up.\n        "}, "ActionChains.drag_and_drop_by_offset": {"name": "drag_and_drop_by_offset", "args": ["self", "source", "xoffset", "yoffset"], "return_type": "None", "doc": "\n        Holds down the left mouse button on the source element,\n           then moves to the target offset and releases the mouse button.\n\n        :Args:\n         - source: The element to mouse down.\n         - xoffset: X offset to move to.\n         - yoffset: Y offset to move to.\n        "}, "ActionChains.key_down": {"name": "key_down", "args": ["self", "value", "element"], "return_type": "None", "doc": "\n        Sends a key press only, without releasing it.\n           Should only be used with modifier keys (Control, Alt and Shift).\n\n        :Args:\n         - value: The modifier key to send. Values are defined in `Keys` class.\n         - element: The element to send keys.\n           If None, sends a key to current focused element.\n\n        Example, pressing ctrl+c::\n\n            ActionChains(driver).key_down(Keys.CONTROL).send_keys('c').key_up(Keys.CONTROL).perform()\n\n        "}, "ActionChains.key_up": {"name": "key_up", "args": ["self", "value", "element"], "return_type": "None", "doc": "\n        Releases a modifier key.\n\n        :Args:\n         - value: The modifier key to send. Values are defined in Keys class.\n         - element: The element to send keys.\n           If None, sends a key to current focused element.\n\n        Example, pressing ctrl+c::\n\n            ActionChains(driver).key_down(Keys.CONTROL).send_keys('c').key_up(Keys.CONTROL).perform()\n\n        "}, "ActionChains.move_by_offset": {"name": "move_by_offset", "args": ["self", "xoffset", "yoffset"], "return_type": "None", "doc": "\n        Moving the mouse to an offset from current mouse position.\n\n        :Args:\n         - xoffset: X offset to move to, as a positive or negative integer.\n         - yoffset: Y offset to move to, as a positive or negative integer.\n        "}, "ActionChains.move_to_element": {"name": "move_to_element", "args": ["self", "to_element"], "return_type": "None", "doc": "\n        Moving the mouse to the middle of an element.\n\n        :Args:\n         - to_element: The WebElement to move to.\n        "}, "ActionChains.move_to_element_with_offset": {"name": "move_to_element_with_offset", "args": ["self", "to_element", "xoffset", "yoffset"], "return_type": "None", "doc": "\n        Move the mouse by an offset of the specified element.\n           Offsets are relative to the top-left corner of the element.\n\n        :Args:\n         - to_element: The WebElement to move to.\n         - xoffset: X offset to move to.\n         - yoffset: Y offset to move to.\n        "}, "ActionChains.move_to_location": {"name": "move_to_location", "args": ["self", "xoffset", "yoffset"], "return_type": "None", "doc": "\n        Move the mouse by an offset relative to the top-left corner of the viewport.\n        The viewport is not scrolled if the coordinates provided are outside the viewport.\n\n        :Args:\n         - xoffset: X offset to move to.\n         - yoffset: Y offset to move to.\n\n        :Raises: If the origin with offset is outside the viewport.\n          - MoveTargetOutOfBoundsException - If the origin with offset is outside the viewport.\n        "}, "ActionChains.pause": {"name": "pause", "args": ["self", "seconds"], "return_type": "None", "doc": " Pause all inputs for the specified duration in seconds "}, "ActionChains.release": {"name": "release", "args": ["self", "on_element"], "return_type": "None", "doc": "\n        Releasing a held mouse button on an element.\n\n        :Args:\n         - on_element: The element to mouse up.\n           If None, releases on current mouse position.\n        "}, "ActionChains.send_keys": {"name": "send_keys", "args": ["self"], "return_type": "None", "doc": "\n        Sends keys to current focused element.\n\n        :Args:\n         - keys_to_send: The keys to send.  Modifier keys constants can be found in the\n           'Keys' class.\n        "}, "ActionChains.send_keys_to_element": {"name": "send_keys_to_element", "args": ["self", "element"], "return_type": "None", "doc": "\n        Sends keys to an element.\n\n        :Args:\n         - element: The element to send keys.\n         - keys_to_send: The keys to send.  Modifier keys constants can be found in the\n           'Keys' class.\n        "}, "ActionChains.scroll_to_element": {"name": "scroll_to_element", "args": ["self", "element"], "return_type": "None", "doc": "\n        If the element is outside the viewport, scrolls the bottom of the element to the bottom of the viewport.\n\n        :Args:\n         - element: Which element to scroll into the viewport.\n        "}, "ActionChains.scroll_by_amount": {"name": "scroll_by_amount", "args": ["self", "delta_x", "delta_y"], "return_type": "None", "doc": "\n        Scrolls by provided amounts with the origin in the top left corner of the viewport.\n\n        :Args:\n         - delta_x: Distance along X axis to scroll using the wheel. A negative value scrolls left.\n         - delta_y: Distance along Y axis to scroll using the wheel. A negative value scrolls up.\n        "}, "ActionChains.scroll_from_origin": {"name": "scroll_from_origin", "args": ["self", "scroll_origin", "delta_x", "delta_y"], "return_type": "None", "doc": "\n        Scrolls by provided amount based on a provided origin.\n        The scroll origin is either the center of an element or the upper left of the viewport plus any offsets.\n        If the origin is an element, and the element is not in the viewport, the bottom of the element will first\n        be scrolled to the bottom of the viewport.\n\n        :Args:\n         - origin: Where scroll originates (viewport or element center) plus provided offsets.\n         - delta_x: Distance along X axis to scroll using the wheel. A negative value scrolls left.\n         - delta_y: Distance along Y axis to scroll using the wheel. A negative value scrolls up.\n\n         :Raises: If the origin with offset is outside the viewport.\n          - MoveTargetOutOfBoundsException - If the origin with offset is outside the viewport.\n        "}, "ActionChains.scroll": {"name": "scroll", "args": ["self", "x", "y", "delta_x", "delta_y", "duration", "origin"], "return_type": "None", "doc": "\n        Sends wheel scroll information to the browser to be processed.\n\n        :Args:\n         - x: starting X coordinate\n         - y: starting Y coordinate\n         - delta_x: the distance the mouse will scroll on the x axis\n         - delta_y: the distance the mouse will scroll on the y axis\n        "}, "ActionChains.__enter__": {"name": "__enter__", "args": ["self"], "return_type": "None", "doc": null}, "ActionChains.__exit__": {"name": "__exit__", "args": ["self", "_type", "_value", "_traceback"], "return_type": "None", "doc": null}}, "selenium.webdriver.common.alert": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "Alert.__init__": {"name": "__init__", "args": ["self", "driver"], "return_type": "None", "doc": "\n        Creates a new Alert.\n\n        :Args:\n         - driver: The WebDriver instance which performs user actions.\n        "}, "Alert.text": {"name": "text", "type": "<class 'property'>", "doc": "\n        Gets the text of the Alert.\n        ", "value": "<property object at 0x0000027825980F90>"}, "Alert.dismiss": {"name": "dismiss", "args": ["self"], "return_type": "None", "doc": "\n        Dismisses the alert available.\n        "}, "Alert.accept": {"name": "accept", "args": ["self"], "return_type": "None", "doc": "\n        Accepts the alert available.\n\n        Usage::\n        Alert(driver).accept() # Confirm a alert dialog.\n        "}, "Alert.send_keys": {"name": "send_keys", "args": ["self", "keysToSend"], "return_type": "None", "doc": "\n        Send Keys to the Alert.\n\n        :Args:\n         - keysToSend: The text to be sent to Alert.\n        "}}, "selenium.webdriver.common.by": {"By.ID": {"name": "ID", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "id"}, "By.XPATH": {"name": "XPATH", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "xpath"}, "By.LINK_TEXT": {"name": "LINK_TEXT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "link text"}, "By.PARTIAL_LINK_TEXT": {"name": "PARTIAL_LINK_TEXT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "partial link text"}, "By.NAME": {"name": "NAME", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "name"}, "By.TAG_NAME": {"name": "TAG_NAME", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "tag name"}, "By.CLASS_NAME": {"name": "CLASS_NAME", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "class name"}, "By.CSS_SELECTOR": {"name": "CSS_SELECTOR", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "css selector"}}, "selenium.webdriver.common.desired_capabilities": {"DesiredCapabilities.FIREFOX": {"name": "FIREFOX", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'browserName': 'firefox', 'acceptInsecureCerts': True, 'moz:debuggerAddress': True}"}, "DesiredCapabilities.INTERNETEXPLORER": {"name": "INTERNETEXPLORER", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'browserName': 'internet explorer', 'platformName': 'windows'}"}, "DesiredCapabilities.EDGE": {"name": "EDGE", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'browserName': 'MicrosoftEdge'}"}, "DesiredCapabilities.CHROME": {"name": "CHROME", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'browserName': 'chrome'}"}, "DesiredCapabilities.OPERA": {"name": "OPERA", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'browserName': 'opera'}"}, "DesiredCapabilities.SAFARI": {"name": "SAFARI", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'browserName': 'safari', 'platformName': 'mac'}"}, "DesiredCapabilities.HTMLUNIT": {"name": "HTMLUNIT", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'browserName': 'htmlunit', 'version': '', 'platform': 'ANY'}"}, "DesiredCapabilities.HTMLUNITWITHJS": {"name": "HTMLUNITWITHJS", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'browserName': 'htmlunit', 'version': 'firefox', 'platform': 'ANY', 'javascriptEnabled': True}"}, "DesiredCapabilities.IPHONE": {"name": "IPHONE", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'browserName': 'iPhone', 'version': '', 'platform': 'mac'}"}, "DesiredCapabilities.IPAD": {"name": "IPAD", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'browserName': 'iPad', 'version': '', 'platform': 'mac'}"}, "DesiredCapabilities.WEBKITGTK": {"name": "WEBKITGTK", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'browserName': 'MiniBrowser', 'version': '', 'platform': 'ANY'}"}, "DesiredCapabilities.WPEWEBKIT": {"name": "WPEWEBKIT", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'browserName': 'MiniBrowser', 'version': '', 'platform': 'ANY'}"}}, "selenium.webdriver.common.keys": {"Keys.NULL": {"name": "NULL", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue000"}, "Keys.CANCEL": {"name": "CANCEL", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue001"}, "Keys.HELP": {"name": "HELP", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue002"}, "Keys.BACKSPACE": {"name": "BACKSPACE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue003"}, "Keys.BACK_SPACE": {"name": "BACK_SPACE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue003"}, "Keys.TAB": {"name": "TAB", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue004"}, "Keys.CLEAR": {"name": "CLEAR", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue005"}, "Keys.RETURN": {"name": "RETURN", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue006"}, "Keys.ENTER": {"name": "ENTER", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue007"}, "Keys.SHIFT": {"name": "SHIFT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue008"}, "Keys.LEFT_SHIFT": {"name": "LEFT_SHIFT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue008"}, "Keys.CONTROL": {"name": "CONTROL", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue009"}, "Keys.LEFT_CONTROL": {"name": "LEFT_CONTROL", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue009"}, "Keys.ALT": {"name": "ALT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue00a"}, "Keys.LEFT_ALT": {"name": "LEFT_ALT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue00a"}, "Keys.PAUSE": {"name": "PAUSE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue00b"}, "Keys.ESCAPE": {"name": "ESCAPE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue00c"}, "Keys.SPACE": {"name": "SPACE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue00d"}, "Keys.PAGE_UP": {"name": "PAGE_UP", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue00e"}, "Keys.PAGE_DOWN": {"name": "PAGE_DOWN", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue00f"}, "Keys.END": {"name": "END", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue010"}, "Keys.HOME": {"name": "HOME", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue011"}, "Keys.LEFT": {"name": "LEFT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue012"}, "Keys.ARROW_LEFT": {"name": "ARROW_LEFT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue012"}, "Keys.UP": {"name": "UP", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue013"}, "Keys.ARROW_UP": {"name": "ARROW_UP", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue013"}, "Keys.RIGHT": {"name": "RIGHT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue014"}, "Keys.ARROW_RIGHT": {"name": "ARROW_RIGHT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue014"}, "Keys.DOWN": {"name": "DOWN", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue015"}, "Keys.ARROW_DOWN": {"name": "ARROW_DOWN", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue015"}, "Keys.INSERT": {"name": "INSERT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue016"}, "Keys.DELETE": {"name": "DELETE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue017"}, "Keys.SEMICOLON": {"name": "SEMICOLON", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue018"}, "Keys.EQUALS": {"name": "EQUALS", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue019"}, "Keys.NUMPAD0": {"name": "NUMPAD0", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue01a"}, "Keys.NUMPAD1": {"name": "NUMPAD1", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue01b"}, "Keys.NUMPAD2": {"name": "NUMPAD2", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue01c"}, "Keys.NUMPAD3": {"name": "NUMPAD3", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue01d"}, "Keys.NUMPAD4": {"name": "NUMPAD4", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue01e"}, "Keys.NUMPAD5": {"name": "NUMPAD5", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue01f"}, "Keys.NUMPAD6": {"name": "NUMPAD6", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue020"}, "Keys.NUMPAD7": {"name": "NUMPAD7", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue021"}, "Keys.NUMPAD8": {"name": "NUMPAD8", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue022"}, "Keys.NUMPAD9": {"name": "NUMPAD9", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue023"}, "Keys.MULTIPLY": {"name": "MULTIPLY", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue024"}, "Keys.ADD": {"name": "ADD", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue025"}, "Keys.SEPARATOR": {"name": "SEPARATOR", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue026"}, "Keys.SUBTRACT": {"name": "SUBTRACT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue027"}, "Keys.DECIMAL": {"name": "DECIMAL", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue028"}, "Keys.DIVIDE": {"name": "DIVIDE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue029"}, "Keys.F1": {"name": "F1", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue031"}, "Keys.F2": {"name": "F2", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue032"}, "Keys.F3": {"name": "F3", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue033"}, "Keys.F4": {"name": "F4", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue034"}, "Keys.F5": {"name": "F5", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue035"}, "Keys.F6": {"name": "F6", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue036"}, "Keys.F7": {"name": "F7", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue037"}, "Keys.F8": {"name": "F8", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue038"}, "Keys.F9": {"name": "F9", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue039"}, "Keys.F10": {"name": "F10", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue03a"}, "Keys.F11": {"name": "F11", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue03b"}, "Keys.F12": {"name": "F12", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue03c"}, "Keys.META": {"name": "META", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue03d"}, "Keys.COMMAND": {"name": "COMMAND", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue03d"}, "Keys.ZENKAKU_HANKAKU": {"name": "ZENKAKU_HANKAKU", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "\ue040"}}, "selenium.webdriver.common.log": {"cdp": {"name": "cdp", "type": "<class 'NoneType'>", "doc": null, "value": "None"}, "import_cdp": {"name": "import_cdp", "args": [], "return_type": "None", "doc": null}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "Log.__init__": {"name": "__init__", "args": ["self", "driver", "bidi_session"], "return_type": "None", "doc": null}}, "selenium.webdriver.common.options": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "BaseOptions.__init__": {"name": "__init__", "args": ["self"], "return_type": "None", "doc": null}, "BaseOptions.capabilities": {"name": "capabilities", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x0000027825983A60>"}, "BaseOptions.set_capability": {"name": "set_capability", "args": ["self", "name", "value"], "return_type": "None", "doc": " Sets a capability "}, "BaseOptions.browser_version": {"name": "browser_version", "type": "<class 'property'>", "doc": "\n        :returns: the version of the browser if set, otherwise None.\n        ", "value": "<property object at 0x000002782599C770>"}, "BaseOptions.platform_name": {"name": "platform_name", "type": "<class 'property'>", "doc": "\n        :returns: The name of the platform\n        ", "value": "<property object at 0x000002782599CBD0>"}, "BaseOptions.page_load_strategy": {"name": "page_load_strategy", "type": "<class 'property'>", "doc": "\n        :returns: page load strategy if set, the default is \"normal\"\n        ", "value": "<property object at 0x000002782599CC70>"}, "BaseOptions.unhandled_prompt_behavior": {"name": "unhandled_prompt_behavior", "type": "<class 'property'>", "doc": "\n        :returns: unhandled prompt behavior if set, the default is \"dismiss and notify\"\n        ", "value": "<property object at 0x000002782599CD10>"}, "BaseOptions.timeouts": {"name": "timeouts", "type": "<class 'property'>", "doc": "\n        :returns: Values for implicit timeout, pageLoad timeout and script timeout if set (in milliseconds)\n        ", "value": "<property object at 0x000002782599CDB0>"}, "BaseOptions.enable_mobile": {"name": "enable_mobile", "args": ["self", "android_package", "android_activity", "device_serial"], "return_type": "None", "doc": "\n            Enables mobile browser use for browsers that support it\n\n            :Args:\n                android_activity: The name of the android package to start\n        "}, "BaseOptions.accept_insecure_certs": {"name": "accept_insecure_certs", "type": "<class 'property'>", "doc": "\n        :returns: whether the session accepts insecure certificates\n        ", "value": "<property object at 0x000002782599CE50>"}, "BaseOptions.strict_file_interactability": {"name": "strict_file_interactability", "type": "<class 'property'>", "doc": "\n        :returns: whether session is strict about file interactability\n        ", "value": "<property object at 0x000002782599CEA0>"}, "BaseOptions.set_window_rect": {"name": "set_window_rect", "type": "<class 'property'>", "doc": "\n        :returns: whether the remote end supports setting window size and position\n        ", "value": "<property object at 0x000002782599CEF0>"}, "BaseOptions.proxy": {"name": "proxy", "type": "<class 'property'>", "doc": "\n        :Returns: Proxy if set, otherwise None.\n        ", "value": "<property object at 0x000002782599CF40>"}, "BaseOptions.to_capabilities": {"name": "to_capabilities", "args": ["self"], "return_type": "None", "doc": "Convert options into capabilities dictionary."}, "BaseOptions.default_capabilities": {"name": "default_capabilities", "type": "<class 'property'>", "doc": "Return minimal capabilities necessary as a dictionary.", "value": "<property object at 0x0000027825983AB0>"}, "ArgOptions.__init__": {"name": "__init__", "args": ["self"], "return_type": "None", "doc": null}, "ArgOptions.arguments": {"name": "arguments", "type": "<class 'property'>", "doc": "\n        :Returns: A list of arguments needed for the browser\n        ", "value": "<property object at 0x000002782599CF90>"}, "ArgOptions.add_argument": {"name": "add_argument", "args": ["self", "argument"], "return_type": "None", "doc": "\n        Adds an argument to the list\n\n        :Args:\n         - Sets the arguments\n        "}, "ArgOptions.ignore_local_proxy_environment_variables": {"name": "ignore_local_proxy_environment_variables", "args": ["self"], "return_type": "None", "doc": "\n            By calling this you will ignore HTTP_PROXY and HTTPS_PROXY from being picked up and used.\n        "}, "ArgOptions.to_capabilities": {"name": "to_capabilities", "args": ["self"], "return_type": "None", "doc": null}, "ArgOptions.default_capabilities": {"name": "default_capabilities", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x000002782599CFE0>"}}, "selenium.webdriver.common.print_page_options": {"Orientation": {"name": "Orientation", "type": "<class 'type'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "<class 'str'>"}, "_MarginOpts": {"name": "_MarginOpts", "type": "<class 'typing._GenericAlias'>", "doc": null, "value": "typing.Dict[str, typing.Any]"}, "_PageOpts": {"name": "_PageOpts", "type": "<class 'typing._GenericAlias'>", "doc": null, "value": "typing.Dict[str, typing.Any]"}, "_PrintOpts": {"name": "_PrintOpts", "type": "<class 'typing._GenericAlias'>", "doc": null, "value": "typing.Dict[str, typing.Any]"}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "PrintOptions.ORIENTATION_VALUES": {"name": "ORIENTATION_VALUES", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "['portrait', 'landscape']"}, "PrintOptions.__init__": {"name": "__init__", "args": ["self"], "return_type": "None", "doc": null}, "PrintOptions.to_dict": {"name": "to_dict", "args": ["self"], "return_type": "typing.Dict[str, typing.Any]", "doc": "\n        :Returns: A hash of print options configured\n        "}, "PrintOptions.orientation": {"name": "orientation", "type": "<class 'property'>", "doc": "\n        :Returns: Orientation that was set for the page\n        ", "value": "<property object at 0x000002782599DDF0>"}, "PrintOptions.scale": {"name": "scale", "type": "<class 'property'>", "doc": "\n        :Returns: Scale that was set for the page\n        ", "value": "<property object at 0x000002782599DEE0>"}, "PrintOptions.background": {"name": "background", "type": "<class 'property'>", "doc": "\n        :Returns: Background value that was set\n        ", "value": "<property object at 0x000002782599DFD0>"}, "PrintOptions.page_width": {"name": "page_width", "type": "<class 'property'>", "doc": "\n        :Returns: Page width that was set\n        ", "value": "<property object at 0x000002782599E070>"}, "PrintOptions.page_height": {"name": "page_height", "type": "<class 'property'>", "doc": "\n        :Returns: Page height that was set\n        ", "value": "<property object at 0x000002782599E110>"}, "PrintOptions.margin_top": {"name": "margin_top", "type": "<class 'property'>", "doc": "\n        :Returns: Top margin of the page\n        ", "value": "<property object at 0x000002782599E1B0>"}, "PrintOptions.margin_left": {"name": "margin_left", "type": "<class 'property'>", "doc": "\n        :Returns: Left margin of the page\n        ", "value": "<property object at 0x000002782599E250>"}, "PrintOptions.margin_bottom": {"name": "margin_bottom", "type": "<class 'property'>", "doc": "\n        :Returns: Bottom margin of the page\n        ", "value": "<property object at 0x000002782599E2F0>"}, "PrintOptions.margin_right": {"name": "margin_right", "type": "<class 'property'>", "doc": "\n        :Returns: Right margin of the page\n        ", "value": "<property object at 0x000002782599E390>"}, "PrintOptions.shrink_to_fit": {"name": "shrink_to_fit", "type": "<class 'property'>", "doc": "\n        :Returns: Value set for shrinkToFit\n        ", "value": "<property object at 0x000002782599E430>"}, "PrintOptions.page_ranges": {"name": "page_ranges", "type": "<class 'property'>", "doc": "\n        :Returns: value set for pageRanges\n        ", "value": "<property object at 0x000002782599E520>"}}, "selenium.webdriver.common.proxy": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "ProxyTypeFactory.make": {"name": "make", "args": ["ff_value", "string"], "return_type": "None", "doc": null}, "ProxyType.DIRECT": {"name": "DIRECT", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'ff_value': 0, 'string': 'DIRECT'}"}, "ProxyType.MANUAL": {"name": "MANUAL", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'ff_value': 1, 'string': 'MANUAL'}"}, "ProxyType.PAC": {"name": "PAC", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'ff_value': 2, 'string': 'PAC'}"}, "ProxyType.RESERVED_1": {"name": "RESERVED_1", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'ff_value': 3, 'string': 'RESERVED1'}"}, "ProxyType.AUTODETECT": {"name": "AUTODETECT", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'ff_value': 4, 'string': 'AUTODETECT'}"}, "ProxyType.SYSTEM": {"name": "SYSTEM", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'ff_value': 5, 'string': 'SYSTEM'}"}, "ProxyType.UNSPECIFIED": {"name": "UNSPECIFIED", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'ff_value': 6, 'string': 'UNSPECIFIED'}"}, "ProxyType.load": {"name": "load", "args": ["cls", "value"], "return_type": "None", "doc": null}, "Proxy.proxyType": {"name": "proxyType", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'ff_value': 6, 'string': 'UNSPECIFIED'}"}, "Proxy.autodetect": {"name": "autodetect", "type": "<class 'bool'>", "doc": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "value": "False"}, "Proxy.ftpProxy": {"name": "ftpProxy", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": ""}, "Proxy.httpProxy": {"name": "httpProxy", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": ""}, "Proxy.noProxy": {"name": "noProxy", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": ""}, "Proxy.proxyAutoconfigUrl": {"name": "proxyAutoconfigUrl", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": ""}, "Proxy.sslProxy": {"name": "sslProxy", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": ""}, "Proxy.socksProxy": {"name": "socksProxy", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": ""}, "Proxy.socksUsername": {"name": "socksUsername", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": ""}, "Proxy.socksPassword": {"name": "socksPassword", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": ""}, "Proxy.socksVersion": {"name": "socksVersion", "type": "<class 'NoneType'>", "doc": null, "value": "None"}, "Proxy.__init__": {"name": "__init__", "args": ["self", "raw"], "return_type": "None", "doc": "\n        Creates a new Proxy.\n\n        :Args:\n         - raw: raw proxy data. If None, default class values are used.\n        "}, "Proxy.proxy_type": {"name": "proxy_type", "type": "<class 'property'>", "doc": "\n        Returns proxy type as `ProxyType`.\n        ", "value": "<property object at 0x000002782599C810>"}, "Proxy.auto_detect": {"name": "auto_detect", "type": "<class 'property'>", "doc": "\n        Returns autodetect setting.\n        ", "value": "<property object at 0x000002782599C860>"}, "Proxy.ftp_proxy": {"name": "ftp_proxy", "type": "<class 'property'>", "doc": "\n        Returns ftp proxy setting.\n        ", "value": "<property object at 0x000002782599C8B0>"}, "Proxy.http_proxy": {"name": "http_proxy", "type": "<class 'property'>", "doc": "\n        Returns http proxy setting.\n        ", "value": "<property object at 0x000002782599C900>"}, "Proxy.no_proxy": {"name": "no_proxy", "type": "<class 'property'>", "doc": "\n        Returns noproxy setting.\n        ", "value": "<property object at 0x000002782599C950>"}, "Proxy.proxy_autoconfig_url": {"name": "proxy_autoconfig_url", "type": "<class 'property'>", "doc": "\n        Returns proxy autoconfig url setting.\n        ", "value": "<property object at 0x000002782599C9A0>"}, "Proxy.ssl_proxy": {"name": "ssl_proxy", "type": "<class 'property'>", "doc": "\n        Returns https proxy setting.\n        ", "value": "<property object at 0x000002782599C9F0>"}, "Proxy.socks_proxy": {"name": "socks_proxy", "type": "<class 'property'>", "doc": "\n        Returns socks proxy setting.\n        ", "value": "<property object at 0x000002782599CA40>"}, "Proxy.socks_username": {"name": "socks_username", "type": "<class 'property'>", "doc": "\n        Returns socks proxy username setting.\n        ", "value": "<property object at 0x000002782599CA90>"}, "Proxy.socks_password": {"name": "socks_password", "type": "<class 'property'>", "doc": "\n        Returns socks proxy password setting.\n        ", "value": "<property object at 0x000002782599CAE0>"}, "Proxy.socks_version": {"name": "socks_version", "type": "<class 'property'>", "doc": "\n        Returns socks proxy version setting.\n        ", "value": "<property object at 0x000002782599CB30>"}, "Proxy._verify_proxy_type_compatibility": {"name": "_verify_proxy_type_compatibility", "args": ["self", "compatibleProxy"], "return_type": "None", "doc": null}, "Proxy.add_to_capabilities": {"name": "add_to_capabilities", "args": ["self", "capabilities"], "return_type": "None", "doc": "\n        Adds proxy information as capability in specified capabilities.\n\n        :Args:\n         - capabilities: The capabilities to which proxy will be added.\n        "}}, "selenium.webdriver.common.service": {"_HAS_NATIVE_DEVNULL": {"name": "_HAS_NATIVE_DEVNULL", "type": "<class 'bool'>", "doc": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", "value": "True"}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "Service.__init__": {"name": "__init__", "args": ["self", "executable", "port", "log_file", "env", "start_error_message"], "return_type": "None", "doc": null}, "Service.service_url": {"name": "service_url", "type": "<class 'property'>", "doc": "\n        Gets the url of the Service\n        ", "value": "<property object at 0x00000278259DCBD0>"}, "Service.command_line_args": {"name": "command_line_args", "args": ["self"], "return_type": "None", "doc": null}, "Service.start": {"name": "start", "args": ["self"], "return_type": "None", "doc": "\n        Starts the Service.\n\n        :Exceptions:\n         - WebDriverException : Raised either when it can't start the service\n           or when it can't connect to the service\n        "}, "Service.assert_process_still_running": {"name": "assert_process_still_running", "args": ["self"], "return_type": "None", "doc": null}, "Service.is_connectable": {"name": "is_connectable", "args": ["self"], "return_type": "None", "doc": null}, "Service.send_remote_shutdown_command": {"name": "send_remote_shutdown_command", "args": ["self"], "return_type": "None", "doc": null}, "Service.stop": {"name": "stop", "args": ["self"], "return_type": "None", "doc": "\n        Stops the service.\n        "}, "Service.__del__": {"name": "__del__", "args": ["self"], "return_type": "None", "doc": null}}, "selenium.webdriver.common.timeouts": {"JSONTimeouts": {"name": "JSONTimeouts", "type": "<class 'typing._GenericAlias'>", "doc": null, "value": "typing.Dict[str, int]"}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "Timeouts.__init__": {"name": "__init__", "args": ["self", "implicit_wait", "page_load", "script"], "return_type": "None", "doc": "\n        Create a new Timeout object.\n\n        :Args:\n         - implicit_wait - Either an int or a float. The number passed in needs to how many\n            seconds the driver will wait.\n         - page_load - Either an int or a float. The number passed in needs to how many\n            seconds the driver will wait.\n         - script - Either an int or a float. The number passed in needs to how many\n            seconds the driver will wait.\n        "}, "Timeouts.implicit_wait": {"name": "implicit_wait", "type": "<class 'property'>", "doc": "\n        Return the value for the implicit wait. This does not return the value on the remote end\n        ", "value": "<property object at 0x000002782599EB60>"}, "Timeouts.page_load": {"name": "page_load", "type": "<class 'property'>", "doc": "\n        Return the value for the page load wait. This does not return the value on the remote end\n        ", "value": "<property object at 0x000002782599EC00>"}, "Timeouts.script": {"name": "script", "type": "<class 'property'>", "doc": "\n        Return the value for the script wait. This does not return the value on the remote end\n        ", "value": "<property object at 0x000002782599ECA0>"}, "Timeouts._convert": {"name": "_convert", "args": ["self", "timeout"], "return_type": "<class 'int'>", "doc": null}, "Timeouts._to_json": {"name": "_to_json", "args": ["self"], "return_type": "typing.Dict[str, int]", "doc": null}}, "selenium.webdriver.common.utils": {"_is_connectable_exceptions": {"name": "_is_connectable_exceptions", "type": "<class 'tuple'>", "doc": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object.", "value": "(<class 'OSError'>, <class 'ConnectionResetError'>)"}, "free_port": {"name": "free_port", "args": [], "return_type": "<class 'int'>", "doc": "\n    Determines a free port using sockets.\n    "}, "find_connectable_ip": {"name": "find_connectable_ip", "args": ["host", "port"], "return_type": "typing.Optional[str]", "doc": "Resolve a hostname to an IP, preferring IPv4 addresses.\n\n    We prefer IPv4 so that we don't change behavior from previous IPv4-only\n    implementations, and because some drivers (e.g., FirefoxDriver) do not\n    support IPv6 connections.\n\n    If the optional port number is provided, only IPs that listen on the given\n    port are considered.\n\n    :Args:\n        - host - A hostname.\n        - port - Optional port number.\n\n    :Returns:\n        A single IP address, as a string. If any IPv4 address is found, one is\n        returned. Otherwise, if any IPv6 address is found, one is returned. If\n        neither, then None is returned.\n\n    "}, "join_host_port": {"name": "join_host_port", "args": ["host", "port"], "return_type": "<class 'str'>", "doc": "Joins a hostname and port together.\n\n    This is a minimal implementation intended to cope with IPv6 literals. For\n    example, _join_host_port('::1', 80) == '[::1]:80'.\n\n    :Args:\n        - host - A hostname.\n        - port - An integer port.\n\n    "}, "is_connectable": {"name": "is_connectable", "args": ["port", "host"], "return_type": "<class 'bool'>", "doc": "\n    Tries to connect to the server at port to see if it is running.\n\n    :Args:\n     - port - The port to connect.\n    "}, "is_url_connectable": {"name": "is_url_connectable", "args": ["port"], "return_type": "<class 'bool'>", "doc": "\n    Tries to connect to the HTTP server at /status path\n    and specified port to see if it responds successfully.\n\n    :Args:\n     - port - The port to connect.\n    "}, "keys_to_typing": {"name": "keys_to_typing", "args": ["value"], "return_type": "typing.List[str]", "doc": "Processes the values that will be typed in the element."}}, "selenium.webdriver.common.virtual_authenticator": {"Protocol": {"name": "Protocol", "type": "<class 'enum.EnumMeta'>", "doc": "\n    Protocol to communicate with the authenticator.\n    ", "value": "<enum 'Protocol'>"}, "Transport": {"name": "Transport", "type": "<class 'enum.EnumMeta'>", "doc": "\n    Transport method to communicate with the authenticator.\n    ", "value": "<enum 'Transport'>"}, "required_chromium_based_browser": {"name": "required_chromium_based_browser", "args": ["func"], "return_type": "None", "doc": "\n    A decorator to ensure that the client used is a chromium based browser.\n    "}, "required_virtual_authenticator": {"name": "required_virtual_authenticator", "args": ["func"], "return_type": "None", "doc": "\n    A decorator to ensure that the function is called with a virtual authenticator.\n    "}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "__str__": {"name": "__str__", "args": [], "return_type": "None", "doc": "Return str(self)."}, "Protocol.CTAP2": {"name": "CTAP2", "type": "<enum 'Protocol'>", "doc": "\n    Protocol to communicate with the authenticator.\n    ", "value": "Protocol.CTAP2"}, "Protocol.U2F": {"name": "U2F", "type": "<enum 'Protocol'>", "doc": "\n    Protocol to communicate with the authenticator.\n    ", "value": "Protocol.U2F"}, "Transport.BLE": {"name": "BLE", "type": "<enum 'Transport'>", "doc": "\n    Transport method to communicate with the authenticator.\n    ", "value": "Transport.BLE"}, "Transport.USB": {"name": "USB", "type": "<enum 'Transport'>", "doc": "\n    Transport method to communicate with the authenticator.\n    ", "value": "Transport.USB"}, "Transport.NFC": {"name": "NFC", "type": "<enum 'Transport'>", "doc": "\n    Transport method to communicate with the authenticator.\n    ", "value": "Transport.NFC"}, "Transport.INTERNAL": {"name": "INTERNAL", "type": "<enum 'Transport'>", "doc": "\n    Transport method to communicate with the authenticator.\n    ", "value": "Transport.INTERNAL"}, "VirtualAuthenticatorOptions.Protocol": {"name": "Protocol", "type": "<class 'enum.EnumMeta'>", "doc": "\n    Protocol to communicate with the authenticator.\n    ", "value": "<enum 'Protocol'>"}, "VirtualAuthenticatorOptions.Transport": {"name": "Transport", "type": "<class 'enum.EnumMeta'>", "doc": "\n    Transport method to communicate with the authenticator.\n    ", "value": "<enum 'Transport'>"}, "VirtualAuthenticatorOptions.__init__": {"name": "__init__", "args": ["self"], "return_type": "None", "doc": "Constructor. Initialize VirtualAuthenticatorOptions object.\n\n          :default:\n            - protocol: Protocol.CTAP2\n            - transport: Transport.USB\n            - hasResidentKey: False\n            - hasUserVerification: False\n            - isUserConsenting: True\n            - isUserVerified: False\n        "}, "VirtualAuthenticatorOptions.protocol": {"name": "protocol", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x00000278259ACDB0>"}, "VirtualAuthenticatorOptions.transport": {"name": "transport", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x00000278259ACE50>"}, "VirtualAuthenticatorOptions.has_resident_key": {"name": "has_resident_key", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x00000278259ACEF0>"}, "VirtualAuthenticatorOptions.has_user_verification": {"name": "has_user_verification", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x00000278259ACF90>"}, "VirtualAuthenticatorOptions.is_user_consenting": {"name": "is_user_consenting", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x00000278259AD030>"}, "VirtualAuthenticatorOptions.is_user_verified": {"name": "is_user_verified", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x00000278259AD0D0>"}, "VirtualAuthenticatorOptions.to_dict": {"name": "to_dict", "args": ["self"], "return_type": "<class 'dict'>", "doc": null}, "Credential.is_resident_credential": {"name": "is_resident_credential", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x00000278259AD120>"}, "Credential.rp_id": {"name": "rp_id", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x00000278259AD170>"}, "Credential.private_key": {"name": "private_key", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x00000278259AD210>"}, "Credential.sign_count": {"name": "sign_count", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x00000278259AD260>"}, "Credential.user_handle": {"name": "user_handle", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x00000278259AD1C0>"}, "Credential.__init__": {"name": "__init__", "args": ["self", "credential_id", "is_resident_credential", "rp_id", "user_handle", "private_key", "sign_count"], "return_type": "None", "doc": "Constructor. A credential stored in a virtual authenticator.\n        https://w3c.github.io/webauthn/#credential-parameters\n\n        :Args:\n            - credential_id (bytes): Unique base64 encoded string.\n            is_resident_credential (bool): Whether the credential is client-side discoverable.\n            rp_id (str): Relying party identifier.\n            user_handle (bytes): userHandle associated to the credential. Must be Base64 encoded string. Can be None.\n            private_key (bytes): Base64 encoded PKCS#8 private key.\n            sign_count (int): intital value for a signature counter.\n        "}, "Credential.id": {"name": "id", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x00000278259ACBD0>"}, "Credential.create_non_resident_credential": {"name": "create_non_resident_credential", "args": ["cls", "id", "rp_id", "private_key", "sign_count"], "return_type": "Credential", "doc": "Creates a non-resident (i.e. stateless) credential.\n\n              :Args:\n                - id (bytes): Unique base64 encoded string.\n                - rp_id (str): Relying party identifier.\n                - private_key (bytes): Base64 encoded PKCS\n                - sign_count (int): intital value for a signature counter.\n\n              :Returns:\n                - Credential: A non-resident credential.\n        "}, "Credential.create_resident_credential": {"name": "create_resident_credential", "args": ["cls", "id", "rp_id", "user_handle", "private_key", "sign_count"], "return_type": "Credential", "doc": "Creates a resident (i.e. stateful) credential.\n\n              :Args:\n                - id (bytes): Unique base64 encoded string.\n                - rp_id (str): Relying party identifier.\n                - user_handle (bytes): userHandle associated to the credential. Must be Base64 encoded string.\n                - private_key (bytes): Base64 encoded PKCS\n                - sign_count (int): intital value for a signature counter.\n\n              :returns:\n                - Credential: A resident credential.\n        "}, "Credential.to_dict": {"name": "to_dict", "args": ["self"], "return_type": "None", "doc": null}, "Credential.from_dict": {"name": "from_dict", "args": ["cls", "data"], "return_type": "None", "doc": null}, "Credential.__str__": {"name": "__str__", "args": ["self"], "return_type": "<class 'str'>", "doc": null}}, "selenium.webdriver.common.window": {"WindowTypes.TAB": {"name": "TAB", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "tab"}, "WindowTypes.WINDOW": {"name": "WINDOW", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "window"}}, "selenium.webdriver.common.__init__": {}, "selenium.webdriver.common.actions.action_builder": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "ActionBuilder.__init__": {"name": "__init__", "args": ["self", "driver", "mouse", "wheel", "keyboard", "duration"], "return_type": "None", "doc": null}, "ActionBuilder.get_device_with": {"name": "get_device_with", "args": ["self", "name"], "return_type": "typing.Union[ForwardRef('WheelInput'), ForwardRef('PointerInput'), ForwardRef('KeyInput')]", "doc": null}, "ActionBuilder.pointer_inputs": {"name": "pointer_inputs", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x0000027825A56890>"}, "ActionBuilder.key_inputs": {"name": "key_inputs", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x0000027825A56930>"}, "ActionBuilder.key_action": {"name": "key_action", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x0000027825A56980>"}, "ActionBuilder.pointer_action": {"name": "pointer_action", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x0000027825A569D0>"}, "ActionBuilder.wheel_action": {"name": "wheel_action", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x0000027825A56A20>"}, "ActionBuilder.add_key_input": {"name": "add_key_input", "args": ["self", "name"], "return_type": "<class 'selenium.webdriver.common.actions.key_input.KeyInput'>", "doc": null}, "ActionBuilder.add_pointer_input": {"name": "add_pointer_input", "args": ["self", "kind", "name"], "return_type": "<class 'selenium.webdriver.common.actions.pointer_input.PointerInput'>", "doc": null}, "ActionBuilder.add_wheel_input": {"name": "add_wheel_input", "args": ["self", "name"], "return_type": "<class 'selenium.webdriver.common.actions.wheel_input.WheelInput'>", "doc": null}, "ActionBuilder.perform": {"name": "perform", "args": ["self"], "return_type": "None", "doc": null}, "ActionBuilder.clear_actions": {"name": "clear_actions", "args": ["self"], "return_type": "None", "doc": "\n            Clears actions that are already stored on the remote end\n        "}, "ActionBuilder._add_input": {"name": "_add_input", "args": ["self", "input"], "return_type": "None", "doc": null}}, "selenium.webdriver.common.actions.input_device": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "InputDevice.__init__": {"name": "__init__", "args": ["self", "name"], "return_type": "None", "doc": null}, "InputDevice.add_action": {"name": "add_action", "args": ["self", "action"], "return_type": "None", "doc": "\n\n        "}, "InputDevice.clear_actions": {"name": "clear_actions", "args": ["self"], "return_type": "None", "doc": null}, "InputDevice.create_pause": {"name": "create_pause", "args": ["self", "duration"], "return_type": "None", "doc": null}}, "selenium.webdriver.common.actions.interaction": {"KEY": {"name": "KEY", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "key"}, "POINTER": {"name": "POINTER", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "pointer"}, "NONE": {"name": "NONE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "none"}, "WHEEL": {"name": "WHEEL", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "wheel"}, "SOURCE_TYPES": {"name": "SOURCE_TYPES", "type": "<class 'set'>", "doc": "set() -> new empty set object\nset(iterable) -> new set object\n\nBuild an unordered collection of unique elements.", "value": "{'pointer', 'none', 'key'}"}, "POINTER_MOUSE": {"name": "POINTER_MOUSE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "mouse"}, "POINTER_TOUCH": {"name": "POINTER_TOUCH", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "touch"}, "POINTER_PEN": {"name": "POINTER_PEN", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "pen"}, "POINTER_KINDS": {"name": "POINTER_KINDS", "type": "<class 'set'>", "doc": "set() -> new empty set object\nset(iterable) -> new set object\n\nBuild an unordered collection of unique elements.", "value": "{'mouse', 'pen', 'touch'}"}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "Interaction.PAUSE": {"name": "PAUSE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "pause"}, "Interaction.__init__": {"name": "__init__", "args": ["self", "source"], "return_type": "None", "doc": null}, "Pause.__init__": {"name": "__init__", "args": ["self", "source", "duration"], "return_type": "None", "doc": null}, "Pause.encode": {"name": "encode", "args": ["self"], "return_type": "None", "doc": null}}, "selenium.webdriver.common.actions.key_actions": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "KeyActions.__init__": {"name": "__init__", "args": ["self", "source"], "return_type": "None", "doc": null}, "KeyActions.key_down": {"name": "key_down", "args": ["self", "letter"], "return_type": "None", "doc": null}, "KeyActions.key_up": {"name": "key_up", "args": ["self", "letter"], "return_type": "None", "doc": null}, "KeyActions.pause": {"name": "pause", "args": ["self", "duration"], "return_type": "None", "doc": null}, "KeyActions.send_keys": {"name": "send_keys", "args": ["self", "text"], "return_type": "None", "doc": null}, "KeyActions._key_action": {"name": "_key_action", "args": ["self", "action", "letter"], "return_type": "None", "doc": null}}, "selenium.webdriver.common.actions.key_input": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "KeyInput.__init__": {"name": "__init__", "args": ["self", "name"], "return_type": "None", "doc": null}, "KeyInput.encode": {"name": "encode", "args": ["self"], "return_type": "<class 'dict'>", "doc": null}, "KeyInput.create_key_down": {"name": "create_key_down", "args": ["self", "key"], "return_type": "None", "doc": null}, "KeyInput.create_key_up": {"name": "create_key_up", "args": ["self", "key"], "return_type": "None", "doc": null}, "KeyInput.create_pause": {"name": "create_pause", "args": ["self", "pause_duration"], "return_type": "None", "doc": null}, "TypingInteraction.__init__": {"name": "__init__", "args": ["self", "source", "type_", "key"], "return_type": "None", "doc": null}, "TypingInteraction.encode": {"name": "encode", "args": ["self"], "return_type": "<class 'dict'>", "doc": null}}, "selenium.webdriver.common.actions.mouse_button": {"MouseButton.LEFT": {"name": "LEFT", "type": "<class 'int'>", "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4", "value": "0"}, "MouseButton.MIDDLE": {"name": "MIDDLE", "type": "<class 'int'>", "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4", "value": "1"}, "MouseButton.RIGHT": {"name": "RIGHT", "type": "<class 'int'>", "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4", "value": "2"}, "MouseButton.BACK": {"name": "BACK", "type": "<class 'int'>", "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4", "value": "3"}, "MouseButton.FORWARD": {"name": "FORWARD", "type": "<class 'int'>", "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4", "value": "4"}}, "selenium.webdriver.common.actions.pointer_actions": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "PointerActions.__init__": {"name": "__init__", "args": ["self", "source", "duration"], "return_type": "None", "doc": "\n        Args:\n        - source: PointerInput instance\n        - duration: override the default 250 msecs of DEFAULT_MOVE_DURATION in source\n        "}, "PointerActions.pointer_down": {"name": "pointer_down", "args": ["self", "button", "width", "height", "pressure", "tangential_pressure", "tilt_x", "tilt_y", "twist", "altitude_angle", "azimuth_angle"], "return_type": "None", "doc": null}, "PointerActions.pointer_up": {"name": "pointer_up", "args": ["self", "button"], "return_type": "None", "doc": null}, "PointerActions.move_to": {"name": "move_to", "args": ["self", "element", "x", "y", "width", "height", "pressure", "tangential_pressure", "tilt_x", "tilt_y", "twist", "altitude_angle", "azimuth_angle"], "return_type": "None", "doc": null}, "PointerActions.move_by": {"name": "move_by", "args": ["self", "x", "y"], "return_type": "None", "doc": null}, "PointerActions.move_to_location": {"name": "move_to_location", "args": ["self", "x", "y"], "return_type": "None", "doc": null}, "PointerActions.click": {"name": "click", "args": ["self", "element"], "return_type": "None", "doc": null}, "PointerActions.context_click": {"name": "context_click", "args": ["self", "element"], "return_type": "None", "doc": null}, "PointerActions.click_and_hold": {"name": "click_and_hold", "args": ["self", "element"], "return_type": "None", "doc": null}, "PointerActions.release": {"name": "release", "args": ["self"], "return_type": "None", "doc": null}, "PointerActions.double_click": {"name": "double_click", "args": ["self", "element"], "return_type": "None", "doc": null}, "PointerActions.pause": {"name": "pause", "args": ["self", "duration"], "return_type": "None", "doc": null}, "PointerActions._button_action": {"name": "_button_action", "args": ["self", "action"], "return_type": "None", "doc": null}}, "selenium.webdriver.common.actions.pointer_input": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "PointerInput.DEFAULT_MOVE_DURATION": {"name": "DEFAULT_MOVE_DURATION", "type": "<class 'int'>", "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4", "value": "250"}, "PointerInput.__init__": {"name": "__init__", "args": ["self", "kind", "name"], "return_type": "None", "doc": null}, "PointerInput.create_pointer_move": {"name": "create_pointer_move", "args": ["self", "duration", "x", "y", "origin"], "return_type": "None", "doc": null}, "PointerInput.create_pointer_down": {"name": "create_pointer_down", "args": ["self"], "return_type": "None", "doc": null}, "PointerInput.create_pointer_up": {"name": "create_pointer_up", "args": ["self", "button"], "return_type": "None", "doc": null}, "PointerInput.create_pointer_cancel": {"name": "create_pointer_cancel", "args": ["self"], "return_type": "None", "doc": null}, "PointerInput.create_pause": {"name": "create_pause", "args": ["self", "pause_duration"], "return_type": "None", "doc": null}, "PointerInput.encode": {"name": "encode", "args": ["self"], "return_type": "None", "doc": null}, "PointerInput._convert_keys": {"name": "_convert_keys", "args": ["self", "actions"], "return_type": "None", "doc": null}}, "selenium.webdriver.common.actions.wheel_actions": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "WheelActions.__init__": {"name": "__init__", "args": ["self", "source"], "return_type": "None", "doc": null}, "WheelActions.pause": {"name": "pause", "args": ["self", "duration"], "return_type": "None", "doc": null}, "WheelActions.scroll": {"name": "scroll", "args": ["self", "x", "y", "delta_x", "delta_y", "duration", "origin"], "return_type": "None", "doc": null}}, "selenium.webdriver.common.actions.wheel_input": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "ScrollOrigin.__init__": {"name": "__init__", "args": ["self", "origin", "x_offset", "y_offset"], "return_type": "None", "doc": null}, "ScrollOrigin.from_element": {"name": "from_element", "args": ["cls", "element", "x_offset", "y_offset"], "return_type": "None", "doc": null}, "ScrollOrigin.from_viewport": {"name": "from_viewport", "args": ["cls", "x_offset", "y_offset"], "return_type": "None", "doc": null}, "ScrollOrigin.origin": {"name": "origin", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x0000027825A54360>"}, "ScrollOrigin.x_offset": {"name": "x_offset", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x0000027825A54310>"}, "ScrollOrigin.y_offset": {"name": "y_offset", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x0000027825A543B0>"}, "WheelInput.__init__": {"name": "__init__", "args": ["self", "name"], "return_type": "None", "doc": null}, "WheelInput.encode": {"name": "encode", "args": ["self"], "return_type": "<class 'dict'>", "doc": null}, "WheelInput.create_scroll": {"name": "create_scroll", "args": ["self", "x", "y", "delta_x", "delta_y", "duration", "origin"], "return_type": "None", "doc": null}, "WheelInput.create_pause": {"name": "create_pause", "args": ["self", "pause_duration"], "return_type": "None", "doc": null}}, "selenium.webdriver.common.actions.__init__": {}, "selenium.webdriver.common.bidi.cdp": {"logger": {"name": "logger", "type": "<class 'logging.Logger'>", "doc": "\n    Instances of the Logger class represent a single logging channel. A\n    \"logging channel\" indicates an area of an application. Exactly how an\n    \"area\" is defined is up to the application developer. Since an\n    application can have any number of areas, logging channels are identified\n    by a unique string. Application areas can be nested (e.g. an area\n    of \"input processing\" might include sub-areas \"read CSV files\", \"read\n    XLS files\" and \"read Gnumeric files\"). To cater for this natural nesting,\n    channel names are organized into a namespace hierarchy where levels are\n    separated by periods, much like the Java or Python package namespace. So\n    in the instance given above, channel names might be \"input\" for the upper\n    level, and \"input.csv\", \"input.xls\" and \"input.gnu\" for the sub-levels.\n    There is no arbitrary limit to the depth of nesting.\n    ", "value": "<Logger trio_cdp (WARNING)>"}, "T": {"name": "T", "type": "<class 'typing.TypeVar'>", "doc": "Type variable.\n\n    Usage::\n\n      T = TypeVar('T')  # Can be anything\n      A = TypeVar('A', str, bytes)  # Must be str or bytes\n\n    Type variables exist primarily for the benefit of static type\n    checkers.  They serve as the parameters for generic types as well\n    as for generic function definitions.  See class Generic for more\n    information on generic types.  Generic functions work as follows:\n\n      def repeat(x: T, n: int) -> List[T]:\n          '''Return a list containing n references to x.'''\n          return [x]*n\n\n      def longest(x: A, y: A) -> A:\n          '''Return the longest of two strings.'''\n          return x if len(x) >= len(y) else y\n\n    The latter example's signature is essentially the overloading\n    of (str, str) -> str and (bytes, bytes) -> bytes.  Also note\n    that if the arguments are instances of some subclass of str,\n    the return type is still plain str.\n\n    At runtime, isinstance(x, T) and issubclass(C, T) will raise TypeError.\n\n    Type variables defined with covariant=True or contravariant=True\n    can be used to declare covariant or contravariant generic types.\n    See PEP 484 for more details. By default generic types are invariant\n    in all type variables.\n\n    Type variables can be introspected. e.g.:\n\n      T.__name__ == 'T'\n      T.__constraints__ == ()\n      T.__covariant__ == False\n      T.__contravariant__ = False\n      A.__constraints__ == (str, bytes)\n\n    Note that only type variables defined in global scope can be pickled.\n    ", "value": "~T"}, "MAX_WS_MESSAGE_SIZE": {"name": "MAX_WS_MESSAGE_SIZE", "type": "<class 'int'>", "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4", "value": "16777216"}, "devtools": {"name": "devtools", "type": "<class 'NoneType'>", "doc": null, "value": "None"}, "version": {"name": "version", "type": "<class 'NoneType'>", "doc": null, "value": "None"}, "_connection_context": {"name": "_connection_context", "type": "<class '_contextvars.ContextVar'>", "doc": null, "value": "<ContextVar name='connection_context' at 0x0000027825A88090>"}, "_session_context": {"name": "_session_context", "type": "<class '_contextvars.ContextVar'>", "doc": null, "value": "<ContextVar name='session_context' at 0x0000027825A89CB0>"}, "import_devtools": {"name": "import_devtools", "args": ["ver"], "return_type": "None", "doc": null}, "get_connection_context": {"name": "get_connection_context", "args": ["fn_name"], "return_type": "None", "doc": "\n    Look up the current connection. If there is no current connection, raise a\n    ``RuntimeError`` with a helpful message.\n    "}, "get_session_context": {"name": "get_session_context", "args": ["fn_name"], "return_type": "None", "doc": "\n    Look up the current session. If there is no current session, raise a\n    ``RuntimeError`` with a helpful message.\n    "}, "connection_context": {"name": "connection_context", "args": [], "return_type": "None", "doc": " This context manager installs ``connection`` as the session context for the current\n    Trio task. "}, "session_context": {"name": "session_context", "args": [], "return_type": "None", "doc": " This context manager installs ``session`` as the session context for the current\n    Trio task. "}, "set_global_connection": {"name": "set_global_connection", "args": ["connection"], "return_type": "None", "doc": "\n    Install ``connection`` in the root context so that it will become the default\n    connection for all tasks. This is generally not recommended, except it may be\n    necessary in certain use cases such as running inside Jupyter notebook.\n    "}, "set_global_session": {"name": "set_global_session", "args": ["session"], "return_type": "None", "doc": "\n    Install ``session`` in the root context so that it will become the default\n    session for all tasks. This is generally not recommended, except it may be\n    necessary in certain use cases such as running inside Jupyter notebook.\n    "}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "__str__": {"name": "__str__", "args": [], "return_type": "None", "doc": "Return str(self)."}, "__repr__": {"name": "__repr__", "args": [], "return_type": "None", "doc": "Return repr(self)."}, "BrowserError.__init__": {"name": "__init__", "args": ["self", "obj"], "return_type": "None", "doc": null}, "BrowserError.__str__": {"name": "__str__", "args": ["self"], "return_type": "None", "doc": null}, "CdpConnectionClosed.__init__": {"name": "__init__", "args": ["self", "reason"], "return_type": "None", "doc": "\n        Constructor.\n        :param reason:\n        :type reason: wsproto.frame_protocol.CloseReason\n        "}, "CdpConnectionClosed.__repr__": {"name": "__repr__", "args": ["self"], "return_type": "None", "doc": " Return representation. "}, "CmEventProxy.value": {"name": "value", "type": "<class 'NoneType'>", "doc": null, "value": "None"}, "CdpBase.__init__": {"name": "__init__", "args": ["self", "ws", "session_id", "target_id"], "return_type": "None", "doc": null}, "CdpBase.listen": {"name": "listen", "args": ["self"], "return_type": "None", "doc": " Return an async iterator that iterates over events matching the\n        indicated types. "}, "CdpBase._handle_data": {"name": "_handle_data", "args": ["self", "data"], "return_type": "None", "doc": "\n        Handle incoming WebSocket data.\n        :param dict data: a JSON dictionary\n        "}, "CdpBase._handle_cmd_response": {"name": "_handle_cmd_response", "args": ["self", "data"], "return_type": "None", "doc": "\n        Handle a response to a command. This will set an event flag that will\n        return control to the task that called the command.\n        :param dict data: response as a JSON dictionary\n        "}, "CdpBase._handle_event": {"name": "_handle_event", "args": ["self", "data"], "return_type": "None", "doc": "\n        Handle an event.\n        :param dict data: event as a JSON dictionary\n        "}, "CdpSession.__init__": {"name": "__init__", "args": ["self", "ws", "session_id", "target_id"], "return_type": "None", "doc": "\n        Constructor.\n        :param trio_websocket.WebSocketConnection ws:\n        :param devtools.target.SessionID session_id:\n        :param devtools.target.TargetID target_id:\n        "}, "CdpConnection.__init__": {"name": "__init__", "args": ["self", "ws"], "return_type": "None", "doc": "\n        Constructor\n        :param trio_websocket.WebSocketConnection ws:\n        "}}, "selenium.webdriver.common.bidi.console": {"Console.ALL": {"name": "ALL", "type": "<enum 'Console'>", "doc": "An enumeration.", "value": "Console.ALL"}, "Console.LOG": {"name": "LOG", "type": "<enum 'Console'>", "doc": "An enumeration.", "value": "Console.LOG"}, "Console.ERROR": {"name": "ERROR", "type": "<enum 'Console'>", "doc": "An enumeration.", "value": "Console.ERROR"}}, "selenium.webdriver.common.bidi.__init__": {}, "selenium.webdriver.common.html5.application_cache": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "ApplicationCache.UNCACHED": {"name": "UNCACHED", "type": "<class 'int'>", "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4", "value": "0"}, "ApplicationCache.IDLE": {"name": "IDLE", "type": "<class 'int'>", "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4", "value": "1"}, "ApplicationCache.CHECKING": {"name": "CHECKING", "type": "<class 'int'>", "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4", "value": "2"}, "ApplicationCache.DOWNLOADING": {"name": "DOWNLOADING", "type": "<class 'int'>", "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4", "value": "3"}, "ApplicationCache.UPDATE_READY": {"name": "UPDATE_READY", "type": "<class 'int'>", "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4", "value": "4"}, "ApplicationCache.OBSOLETE": {"name": "OBSOLETE", "type": "<class 'int'>", "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4", "value": "5"}, "ApplicationCache.__init__": {"name": "__init__", "args": ["self", "driver"], "return_type": "None", "doc": "\n        Creates a new Application Cache.\n\n        :Args:\n         - driver: The WebDriver instance which performs user actions.\n        "}, "ApplicationCache.status": {"name": "status", "type": "<class 'property'>", "doc": "\n        Returns a current status of application cache.\n        ", "value": "<property object at 0x000002782599EFC0>"}}, "selenium.webdriver.common.html5.__init__": {}, "selenium.webdriver.edge.options": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "Options.KEY": {"name": "KEY", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "ms:edgeOptions"}, "Options.__init__": {"name": "__init__", "args": ["self"], "return_type": "None", "doc": null}, "Options.use_webview": {"name": "use_webview", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x00000278259DEDE0>"}, "Options.to_capabilities": {"name": "to_capabilities", "args": ["self"], "return_type": "<class 'dict'>", "doc": "\n        Creates a capabilities with all the options that have been set and\n        :Returns: A dictionary with everything\n        "}, "Options.default_capabilities": {"name": "default_capabilities", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x00000278259DDF80>"}}, "selenium.webdriver.edge.service": {"DEFAULT_EXECUTABLE_PATH": {"name": "DEFAULT_EXECUTABLE_PATH", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "msedgedriver"}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "Service.__init__": {"name": "__init__", "args": ["self", "executable_path", "port", "verbose", "log_path", "service_args", "env"], "return_type": "None", "doc": "\n        Creates a new instance of the EdgeDriver service.\n        EdgeDriver provides an interface for Microsoft WebDriver to use\n        with Microsoft Edge.\n\n        :Args:\n         - executable_path : Path to the Microsoft WebDriver binary.\n         - port : Run the remote service on a specified port. Defaults to 0, which binds to a random open port\n           of the system's choosing.\n         - verbose : Whether to make the webdriver more verbose (passes the --verbose option to the binary).\n           Defaults to False.\n         - log_path : Optional path for the webdriver binary to log to. Defaults to None which disables logging.\n         - service_args : List of args to pass to the WebDriver service.\n        "}}, "selenium.webdriver.edge.webdriver": {"DEFAULT_PORT": {"name": "DEFAULT_PORT", "type": "<class 'int'>", "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4", "value": "0"}, "DEFAULT_SERVICE_LOG_PATH": {"name": "DEFAULT_SERVICE_LOG_PATH", "type": "<class 'NoneType'>", "doc": null, "value": "None"}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "WebDriver.__init__": {"name": "__init__", "args": ["self", "executable_path", "port", "options", "service_args", "capabilities", "service_log_path", "service", "keep_alive", "verbose"], "return_type": "None", "doc": "\n        Creates a new instance of the edge driver.\n        Starts the service and then creates new instance of edge driver.\n\n        :Args:\n         - executable_path - Deprecated: path to the executable. If the default is used it assumes the executable is in the $PATH\n         - port - Deprecated: port you would like the service to run, if left as 0, a free port will be found.\n         - options - this takes an instance of EdgeOptions\n         - service_args - Deprecated: List of args to pass to the driver service\n         - capabilities - Deprecated: Dictionary object with non-browser specific\n           capabilities only, such as \"proxy\" or \"loggingPref\".\n         - service_log_path - Deprecated: Where to log information from the driver.\n         - service - Service object for handling the browser driver if you need to pass extra details\n         - keep_alive - Whether to configure EdgeRemoteConnection to use HTTP keep-alive.\n         - verbose - whether to set verbose logging in the service.\n         "}, "WebDriver.create_options": {"name": "create_options", "args": ["self"], "return_type": "<class 'selenium.webdriver.edge.options.Options'>", "doc": null}}, "selenium.webdriver.edge.__init__": {}, "selenium.webdriver.firefox.extension_connection": {"LOGGER": {"name": "LOGGER", "type": "<class 'logging.Logger'>", "doc": "\n    Instances of the Logger class represent a single logging channel. A\n    \"logging channel\" indicates an area of an application. Exactly how an\n    \"area\" is defined is up to the application developer. Since an\n    application can have any number of areas, logging channels are identified\n    by a unique string. Application areas can be nested (e.g. an area\n    of \"input processing\" might include sub-areas \"read CSV files\", \"read\n    XLS files\" and \"read Gnumeric files\"). To cater for this natural nesting,\n    channel names are organized into a namespace hierarchy where levels are\n    separated by periods, much like the Java or Python package namespace. So\n    in the instance given above, channel names might be \"input\" for the upper\n    level, and \"input.csv\", \"input.xls\" and \"input.gnu\" for the sub-levels.\n    There is no arbitrary limit to the depth of nesting.\n    ", "value": "<Logger selenium.webdriver.firefox.extension_connection (WARNING)>"}, "PORT": {"name": "PORT", "type": "<class 'int'>", "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4", "value": "0"}, "HOST": {"name": "HOST", "type": "<class 'NoneType'>", "doc": null, "value": "None"}, "_URL": {"name": "_URL", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": ""}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "ExtensionConnection.__init__": {"name": "__init__", "args": ["self", "host", "firefox_profile", "firefox_binary", "timeout"], "return_type": "None", "doc": null}, "ExtensionConnection.quit": {"name": "quit", "args": ["self", "sessionId"], "return_type": "None", "doc": null}, "ExtensionConnection.connect": {"name": "connect", "args": ["self"], "return_type": "None", "doc": "Connects to the extension and retrieves the session id."}, "ExtensionConnection.connect_and_quit": {"name": "connect_and_quit", "args": ["self"], "return_type": "None", "doc": "Connects to an running browser and quit immediately."}, "ExtensionConnection.is_connectable": {"name": "is_connectable", "args": ["self"], "return_type": "None", "doc": "Tries to connect to the extension but do not retrieve context."}}, "selenium.webdriver.firefox.firefox_binary": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "FirefoxBinary.NO_FOCUS_LIBRARY_NAME": {"name": "NO_FOCUS_LIBRARY_NAME", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "x_ignore_nofocus.so"}, "FirefoxBinary.__init__": {"name": "__init__", "args": ["self", "firefox_path", "log_file"], "return_type": "None", "doc": "\n        Creates a new instance of Firefox binary.\n\n        :Args:\n         - firefox_path - Path to the Firefox executable. By default, it will be detected from the standard locations.\n         - log_file - A file object to redirect the firefox process output to. It can be sys.stdout.\n                      Please note that with parallel run the output won't be synchronous.\n                      By default, it will be redirected to /dev/null.\n        "}, "FirefoxBinary.add_command_line_options": {"name": "add_command_line_options", "args": ["self"], "return_type": "None", "doc": null}, "FirefoxBinary.launch_browser": {"name": "launch_browser", "args": ["self", "profile", "timeout"], "return_type": "None", "doc": "Launches the browser for the given profile name.\n        It is assumed the profile already exists.\n        "}, "FirefoxBinary.kill": {"name": "kill", "args": ["self"], "return_type": "None", "doc": "Kill the browser.\n\n        This is useful when the browser is stuck.\n        "}, "FirefoxBinary._start_from_profile_path": {"name": "_start_from_profile_path", "args": ["self", "path"], "return_type": "None", "doc": null}, "FirefoxBinary._wait_until_connectable": {"name": "_wait_until_connectable", "args": ["self", "timeout"], "return_type": "None", "doc": "Blocks until the extension is connectable in the firefox."}, "FirefoxBinary._find_exe_in_registry": {"name": "_find_exe_in_registry", "args": ["self"], "return_type": "None", "doc": null}, "FirefoxBinary._get_firefox_start_cmd": {"name": "_get_firefox_start_cmd", "args": ["self"], "return_type": "None", "doc": "Return the command to start firefox."}, "FirefoxBinary._default_windows_location": {"name": "_default_windows_location", "args": ["self"], "return_type": "None", "doc": null}, "FirefoxBinary._modify_link_library_path": {"name": "_modify_link_library_path", "args": ["self"], "return_type": "None", "doc": null}, "FirefoxBinary._extract_and_check": {"name": "_extract_and_check", "args": ["self", "profile", "no_focus_so_name", "x86", "amd64"], "return_type": "None", "doc": null}, "FirefoxBinary.which": {"name": "which", "args": ["self", "fname"], "return_type": "None", "doc": "Returns the fully qualified path by searching Path of the given\n        name"}}, "selenium.webdriver.firefox.firefox_profile": {"WEBDRIVER_EXT": {"name": "WEBDRIVER_EXT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "webdriver.xpi"}, "WEBDRIVER_PREFERENCES": {"name": "WEBDRIVER_PREFERENCES", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "webdriver_prefs.json"}, "EXTENSION_NAME": {"name": "EXTENSION_NAME", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "fxdriver@googlecode.com"}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "FirefoxProfile.ANONYMOUS_PROFILE_NAME": {"name": "ANONYMOUS_PROFILE_NAME", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "WEBDRIVER_ANONYMOUS_PROFILE"}, "FirefoxProfile.DEFAULT_PREFERENCES": {"name": "DEFAULT_PREFERENCES", "type": "<class 'NoneType'>", "doc": null, "value": "None"}, "FirefoxProfile.port": {"name": "port", "type": "<class 'property'>", "doc": "\n        Gets the port that WebDriver is working on\n        ", "value": "<property object at 0x00000278259D57B0>"}, "FirefoxProfile.__init__": {"name": "__init__", "args": ["self", "profile_directory"], "return_type": "None", "doc": "\n        Initialises a new instance of a Firefox Profile\n\n        :args:\n         - profile_directory: Directory of profile that you want to use. If a\n           directory is passed in it will be cloned and the cloned directory\n           will be used by the driver when instantiated.\n           This defaults to None and will create a new\n           directory when object is created.\n        "}, "FirefoxProfile.set_preference": {"name": "set_preference", "args": ["self", "key", "value"], "return_type": "None", "doc": "\n        sets the preference that we want in the profile.\n        "}, "FirefoxProfile.add_extension": {"name": "add_extension", "args": ["self", "extension"], "return_type": "None", "doc": null}, "FirefoxProfile.update_preferences": {"name": "update_preferences", "args": ["self"], "return_type": "None", "doc": null}, "FirefoxProfile.path": {"name": "path", "type": "<class 'property'>", "doc": "\n        Gets the profile directory that is currently being used\n        ", "value": "<property object at 0x00000278259AF6A0>"}, "FirefoxProfile.accept_untrusted_certs": {"name": "accept_untrusted_certs", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x00000278259EB600>"}, "FirefoxProfile.assume_untrusted_cert_issuer": {"name": "assume_untrusted_cert_issuer", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x00000278259EB650>"}, "FirefoxProfile.encoded": {"name": "encoded", "type": "<class 'property'>", "doc": "\n        A zipped, base64 encoded string of profile directory\n        for use with remote WebDriver JSON wire protocol\n        ", "value": "<property object at 0x00000278259D5490>"}, "FirefoxProfile._create_tempfolder": {"name": "_create_tempfolder", "args": ["self"], "return_type": "None", "doc": "\n        Creates a temp folder to store User.js and the extension\n        "}, "FirefoxProfile._write_user_prefs": {"name": "_write_user_prefs", "args": ["self", "user_prefs"], "return_type": "None", "doc": "\n        writes the current user prefs dictionary to disk\n        "}, "FirefoxProfile._read_existing_userjs": {"name": "_read_existing_userjs", "args": ["self", "userjs"], "return_type": "None", "doc": null}, "FirefoxProfile._install_extension": {"name": "_install_extension", "args": ["self", "addon", "unpack"], "return_type": "None", "doc": "\n            Installs addon from a filepath, url\n            or directory of addons in the profile.\n            - path: url, absolute path to .xpi, or directory of addons\n            - unpack: whether to unpack unless specified otherwise in the install.rdf\n        "}, "FirefoxProfile._addon_details": {"name": "_addon_details", "args": ["self", "addon_path"], "return_type": "None", "doc": "\n        Returns a dictionary of details about the addon.\n\n        :param addon_path: path to the add-on directory or XPI\n\n        Returns::\n\n            {'id':      u'rainbow@colors.org', # id of the addon\n             'version': u'1.4',                # version of the addon\n             'name':    u'Rainbow',            # name of the addon\n             'unpack':  False }                # whether to unpack the addon\n        "}}, "selenium.webdriver.firefox.options": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "Log.__init__": {"name": "__init__", "args": ["self"], "return_type": "None", "doc": null}, "Log.to_capabilities": {"name": "to_capabilities", "args": ["self"], "return_type": "<class 'dict'>", "doc": null}, "Options.KEY": {"name": "KEY", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "moz:firefoxOptions"}, "Options.__init__": {"name": "__init__", "args": ["self"], "return_type": "None", "doc": null}, "Options.binary": {"name": "binary", "type": "<class 'property'>", "doc": "Returns the FirefoxBinary instance", "value": "<property object at 0x00000278259EBE20>"}, "Options.binary_location": {"name": "binary_location", "type": "<class 'property'>", "doc": "\n        :Returns: The location of the binary.\n        ", "value": "<property object at 0x00000278259EBE70>"}, "Options.preferences": {"name": "preferences", "type": "<class 'property'>", "doc": ":Returns: A dict of preferences.", "value": "<property object at 0x00000278259EBC90>"}, "Options.set_preference": {"name": "set_preference", "args": ["self", "name", "value"], "return_type": "None", "doc": "Sets a preference."}, "Options.profile": {"name": "profile", "type": "<class 'property'>", "doc": "\n        :Returns: The Firefox profile to use.\n        ", "value": "<property object at 0x00000278259DC040>"}, "Options.headless": {"name": "headless", "type": "<class 'property'>", "doc": "\n        :Returns: True if the headless argument is set, else False\n        ", "value": "<property object at 0x00000278259DC090>"}, "Options.enable_mobile": {"name": "enable_mobile", "args": ["self", "android_package", "android_activity", "device_serial"], "return_type": "None", "doc": null}, "Options.to_capabilities": {"name": "to_capabilities", "args": ["self"], "return_type": "<class 'dict'>", "doc": "Marshals the Firefox options to a `moz:firefoxOptions`\n        object.\n        "}, "Options.default_capabilities": {"name": "default_capabilities", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x00000278259EBEC0>"}}, "selenium.webdriver.firefox.remote_connection": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "FirefoxRemoteConnection.browser_name": {"name": "browser_name", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "firefox"}, "FirefoxRemoteConnection.__init__": {"name": "__init__", "args": ["self", "remote_server_addr", "keep_alive", "ignore_proxy"], "return_type": "None", "doc": null}}, "selenium.webdriver.firefox.service": {"DEFAULT_EXECUTABLE_PATH": {"name": "DEFAULT_EXECUTABLE_PATH", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "geckodriver"}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "Service.__init__": {"name": "__init__", "args": ["self", "executable_path", "port", "service_args", "log_path", "env"], "return_type": "None", "doc": "Creates a new instance of the GeckoDriver remote service proxy.\n\n        GeckoDriver provides a HTTP interface speaking the W3C WebDriver\n        protocol to Marionette.\n\n        :param executable_path: Path to the GeckoDriver binary.\n        :param port: Run the remote service on a specified port.\n            Defaults to 0, which binds to a random open port of the\n            system's choosing.\n        :param service_args: Optional list of arguments to pass to the\n            GeckoDriver binary.\n        :param log_path: Optional path for the GeckoDriver to log to.\n            Defaults to _geckodriver.log_ in the current working directory.\n        :param env: Optional dictionary of output variables to expose\n            in the services' environment.\n\n        "}, "Service.command_line_args": {"name": "command_line_args", "args": ["self"], "return_type": "typing.List[str]", "doc": null}, "Service.send_remote_shutdown_command": {"name": "send_remote_shutdown_command", "args": ["self"], "return_type": "None", "doc": null}}, "selenium.webdriver.firefox.webdriver": {"DEFAULT_LOG_PATH": {"name": "DEFAULT_LOG_PATH", "type": "<class 'NoneType'>", "doc": null, "value": "None"}, "DEFAULT_SERVICE_LOG_PATH": {"name": "DEFAULT_SERVICE_LOG_PATH", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "geckodriver.log"}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "WebDriver.CONTEXT_CHROME": {"name": "CONTEXT_CHROME", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "chrome"}, "WebDriver.CONTEXT_CONTENT": {"name": "CONTEXT_CONTENT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "content"}, "WebDriver.capabilities": {"name": "capabilities", "type": "<class 'property'>", "doc": "\n        returns the drivers current capabilities being used.\n        ", "value": "<property object at 0x00000278259AD800>"}, "WebDriver.firefox_profile": {"name": "firefox_profile", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x000002782577E2F0>"}, "WebDriver.__init__": {"name": "__init__", "args": ["self", "firefox_profile", "firefox_binary", "capabilities", "proxy", "executable_path", "options", "service_log_path", "service_args", "service", "desired_capabilities", "log_path", "keep_alive"], "return_type": "None", "doc": "Starts a new local session of Firefox.\n\n        Based on the combination and specificity of the various keyword\n        arguments, a capabilities dictionary will be constructed that\n        is passed to the remote end.\n\n        The keyword arguments given to this constructor are helpers to\n        more easily allow Firefox WebDriver sessions to be customised\n        with different options.  They are mapped on to a capabilities\n        dictionary that is passed on to the remote end.\n\n        As some of the options, such as `firefox_profile` and\n        `options.profile` are mutually exclusive, precedence is\n        given from how specific the setting is.  `capabilities` is the\n        least specific keyword argument, followed by `options`,\n        followed by `firefox_binary` and `firefox_profile`.\n\n        In practice this means that if `firefox_profile` and\n        `options.profile` are both set, the selected profile\n        instance will always come from the most specific variable.\n        In this case that would be `firefox_profile`.  This will result in\n        `options.profile` to be ignored because it is considered\n        a less specific setting than the top-level `firefox_profile`\n        keyword argument.  Similarly, if you had specified a\n        `capabilities[\"moz:firefoxOptions\"][\"profile\"]` Base64 string,\n        this would rank below `options.profile`.\n\n        :param firefox_profile: Deprecated: Instance of ``FirefoxProfile`` object\n            or a string.  If undefined, a fresh profile will be created\n            in a temporary location on the system.\n        :param firefox_binary: Deprecated: Instance of ``FirefoxBinary`` or full\n            path to the Firefox binary.  If undefined, the system default\n            Firefox installation will  be used.\n        :param capabilities: Deprecated: Dictionary of desired capabilities.\n        :param proxy: Deprecated: The proxy settings to use when communicating with\n            Firefox via the extension connection.\n        :param executable_path: Deprecated: Full path to override which geckodriver\n            binary to use for Firefox 47.0.1 and greater, which\n            defaults to picking up the binary from the system path.\n        :param options: Instance of ``options.Options``.\n        :param service_log_path: Deprecated: Where to log information from the driver.\n        :param service_args: Deprecated: List of args to pass to the driver service\n        :param desired_capabilities: Deprecated: alias of capabilities. In future\n            versions of this library, this will replace 'capabilities'.\n            This will make the signature consistent with RemoteWebDriver.\n        :param keep_alive: Whether to configure remote_connection.RemoteConnection to use\n             HTTP keep-alive.\n        "}, "WebDriver.quit": {"name": "quit", "args": ["self"], "return_type": "None", "doc": "Quits the driver and close every associated window."}, "WebDriver.set_context": {"name": "set_context", "args": ["self", "context"], "return_type": "None", "doc": null}, "WebDriver.context": {"name": "context", "args": [], "return_type": "None", "doc": "Sets the context that Selenium commands are running in using\n        a `with` statement. The state of the context on the server is\n        saved before entering the block, and restored upon exiting it.\n\n        :param context: Context, may be one of the class properties\n            `CONTEXT_CHROME` or `CONTEXT_CONTENT`.\n\n        Usage example::\n\n            with selenium.context(selenium.CONTEXT_CHROME):\n                # chrome scope\n                ... do stuff ...\n        "}, "WebDriver.install_addon": {"name": "install_addon", "args": ["self", "path", "temporary"], "return_type": "<class 'str'>", "doc": "\n        Installs Firefox addon.\n\n        Returns identifier of installed addon. This identifier can later\n        be used to uninstall addon.\n\n        :param path: Absolute path to the addon that will be installed.\n\n        :Usage:\n            ::\n\n                driver.install_addon('/path/to/firebug.xpi')\n        "}, "WebDriver.uninstall_addon": {"name": "uninstall_addon", "args": ["self", "identifier"], "return_type": "None", "doc": "\n        Uninstalls Firefox addon using its identifier.\n\n        :Usage:\n            ::\n\n                driver.uninstall_addon('addon@foo.com')\n        "}, "WebDriver.get_full_page_screenshot_as_file": {"name": "get_full_page_screenshot_as_file", "args": ["self", "filename"], "return_type": "<class 'bool'>", "doc": "\n        Saves a full document screenshot of the current window to a PNG image file. Returns\n           False if there is any IOError, else returns True. Use full paths in\n           your filename.\n\n        :Args:\n         - filename: The full path you wish to save your screenshot to. This\n           should end with a `.png` extension.\n\n        :Usage:\n            ::\n\n                driver.get_full_page_screenshot_as_file('/Screenshots/foo.png')\n        "}, "WebDriver.save_full_page_screenshot": {"name": "save_full_page_screenshot", "args": ["self", "filename"], "return_type": "<class 'bool'>", "doc": "\n        Saves a full document screenshot of the current window to a PNG image file. Returns\n           False if there is any IOError, else returns True. Use full paths in\n           your filename.\n\n        :Args:\n         - filename: The full path you wish to save your screenshot to. This\n           should end with a `.png` extension.\n\n        :Usage:\n            ::\n\n                driver.save_full_page_screenshot('/Screenshots/foo.png')\n        "}, "WebDriver.get_full_page_screenshot_as_png": {"name": "get_full_page_screenshot_as_png", "args": ["self"], "return_type": "<class 'str'>", "doc": "\n        Gets the full document screenshot of the current window as a binary data.\n\n        :Usage:\n            ::\n\n                driver.get_full_page_screenshot_as_png()\n        "}, "WebDriver.get_full_page_screenshot_as_base64": {"name": "get_full_page_screenshot_as_base64", "args": ["self"], "return_type": "<class 'str'>", "doc": "\n        Gets the full document screenshot of the current window as a base64 encoded string\n           which is useful in embedded images in HTML.\n\n        :Usage:\n            ::\n\n                driver.get_full_page_screenshot_as_base64()\n        "}}, "selenium.webdriver.firefox.__init__": {}, "selenium.webdriver.ie.options": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "ElementScrollBehavior.TOP": {"name": "TOP", "type": "<enum 'ElementScrollBehavior'>", "doc": "An enumeration.", "value": "ElementScrollBehavior.TOP"}, "ElementScrollBehavior.BOTTOM": {"name": "BOTTOM", "type": "<enum 'ElementScrollBehavior'>", "doc": "An enumeration.", "value": "ElementScrollBehavior.BOTTOM"}, "Options.KEY": {"name": "KEY", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "se:ieOptions"}, "Options.SWITCHES": {"name": "SWITCHES", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "ie.browserCommandLineSwitches"}, "Options.BROWSER_ATTACH_TIMEOUT": {"name": "BROWSER_ATTACH_TIMEOUT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "browserAttachTimeout"}, "Options.ELEMENT_SCROLL_BEHAVIOR": {"name": "ELEMENT_SCROLL_BEHAVIOR", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "elementScrollBehavior"}, "Options.ENSURE_CLEAN_SESSION": {"name": "ENSURE_CLEAN_SESSION", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "ie.ensureCleanSession"}, "Options.FILE_UPLOAD_DIALOG_TIMEOUT": {"name": "FILE_UPLOAD_DIALOG_TIMEOUT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "ie.fileUploadDialogTimeout"}, "Options.FORCE_CREATE_PROCESS_API": {"name": "FORCE_CREATE_PROCESS_API", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "ie.forceCreateProcessApi"}, "Options.FORCE_SHELL_WINDOWS_API": {"name": "FORCE_SHELL_WINDOWS_API", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "ie.forceShellWindowsApi"}, "Options.FULL_PAGE_SCREENSHOT": {"name": "FULL_PAGE_SCREENSHOT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "ie.enableFullPageScreenshot"}, "Options.IGNORE_PROTECTED_MODE_SETTINGS": {"name": "IGNORE_PROTECTED_MODE_SETTINGS", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "ignoreProtectedModeSettings"}, "Options.IGNORE_ZOOM_LEVEL": {"name": "IGNORE_ZOOM_LEVEL", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "ignoreZoomSetting"}, "Options.INITIAL_BROWSER_URL": {"name": "INITIAL_BROWSER_URL", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "initialBrowserUrl"}, "Options.NATIVE_EVENTS": {"name": "NATIVE_EVENTS", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "nativeEvents"}, "Options.PERSISTENT_HOVER": {"name": "PERSISTENT_HOVER", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "enablePersistentHover"}, "Options.REQUIRE_WINDOW_FOCUS": {"name": "REQUIRE_WINDOW_FOCUS", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "requireWindowFocus"}, "Options.USE_PER_PROCESS_PROXY": {"name": "USE_PER_PROCESS_PROXY", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "ie.usePerProcessProxy"}, "Options.USE_LEGACY_FILE_UPLOAD_DIALOG_HANDLING": {"name": "USE_LEGACY_FILE_UPLOAD_DIALOG_HANDLING", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "ie.useLegacyFileUploadDialogHandling"}, "Options.ATTACH_TO_EDGE_CHROME": {"name": "ATTACH_TO_EDGE_CHROME", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "ie.edgechromium"}, "Options.EDGE_EXECUTABLE_PATH": {"name": "EDGE_EXECUTABLE_PATH", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "ie.edgepath"}, "Options.__init__": {"name": "__init__", "args": ["self"], "return_type": "None", "doc": null}, "Options.options": {"name": "options", "type": "<class 'property'>", "doc": ":Returns: A dictionary of browser options ", "value": "<property object at 0x0000027825A25990>"}, "Options.browser_attach_timeout": {"name": "browser_attach_timeout", "type": "<class 'property'>", "doc": "\n        :Returns: The options Browser Attach Timeout in milliseconds\n        ", "value": "<property object at 0x0000027825A25B20>"}, "Options.element_scroll_behavior": {"name": "element_scroll_behavior", "type": "<class 'property'>", "doc": ":Returns: The options Element Scroll Behavior value ", "value": "<property object at 0x0000027825A25B70>"}, "Options.ensure_clean_session": {"name": "ensure_clean_session", "type": "<class 'property'>", "doc": ":Returns: The options Ensure Clean Session value ", "value": "<property object at 0x0000027825A25BC0>"}, "Options.file_upload_dialog_timeout": {"name": "file_upload_dialog_timeout", "type": "<class 'property'>", "doc": ":Returns: The options File Upload Dialog Timeout in milliseconds ", "value": "<property object at 0x0000027825A25C10>"}, "Options.force_create_process_api": {"name": "force_create_process_api", "type": "<class 'property'>", "doc": ":Returns: The options Force Create Process Api value ", "value": "<property object at 0x0000027825A25C60>"}, "Options.force_shell_windows_api": {"name": "force_shell_windows_api", "type": "<class 'property'>", "doc": ":Returns: The options Force Shell Windows Api value ", "value": "<property object at 0x0000027825A25CB0>"}, "Options.full_page_screenshot": {"name": "full_page_screenshot", "type": "<class 'property'>", "doc": ":Returns: The options Full Page Screenshot value ", "value": "<property object at 0x0000027825A25D00>"}, "Options.ignore_protected_mode_settings": {"name": "ignore_protected_mode_settings", "type": "<class 'property'>", "doc": ":Returns: The options Ignore Protected Mode Settings value ", "value": "<property object at 0x0000027825A25D50>"}, "Options.ignore_zoom_level": {"name": "ignore_zoom_level", "type": "<class 'property'>", "doc": ":Returns: The options Ignore Zoom Level value ", "value": "<property object at 0x0000027825A25DA0>"}, "Options.initial_browser_url": {"name": "initial_browser_url", "type": "<class 'property'>", "doc": ":Returns: The options Initial Browser Url value ", "value": "<property object at 0x0000027825A25DF0>"}, "Options.native_events": {"name": "native_events", "type": "<class 'property'>", "doc": ":Returns: The options Native Events value ", "value": "<property object at 0x0000027825A25E40>"}, "Options.persistent_hover": {"name": "persistent_hover", "type": "<class 'property'>", "doc": ":Returns: The options Persistent Hover value ", "value": "<property object at 0x0000027825A25E90>"}, "Options.require_window_focus": {"name": "require_window_focus", "type": "<class 'property'>", "doc": ":Returns: The options Require Window Focus value ", "value": "<property object at 0x0000027825A25EE0>"}, "Options.use_per_process_proxy": {"name": "use_per_process_proxy", "type": "<class 'property'>", "doc": ":Returns: The options User Per Process Proxy value ", "value": "<property object at 0x0000027825A25F30>"}, "Options.use_legacy_file_upload_dialog_handling": {"name": "use_legacy_file_upload_dialog_handling", "type": "<class 'property'>", "doc": ":Returns: The options Use Legacy File Upload Dialog Handling value ", "value": "<property object at 0x0000027825A25F80>"}, "Options.attach_to_edge_chrome": {"name": "attach_to_edge_chrome", "type": "<class 'property'>", "doc": ":Returns: The options Attach to Edge Chrome value ", "value": "<property object at 0x0000027825A25FD0>"}, "Options.edge_executable_path": {"name": "edge_executable_path", "type": "<class 'property'>", "doc": ":Returns: The options Edge Executable Path value ", "value": "<property object at 0x0000027825A26020>"}, "Options.additional_options": {"name": "additional_options", "type": "<class 'property'>", "doc": ":Returns: The additional options ", "value": "<property object at 0x0000027825A259E0>"}, "Options.add_additional_option": {"name": "add_additional_option", "args": ["self", "name", "value"], "return_type": "None", "doc": "\n        Adds an additional option not yet added as a safe option for IE\n\n        :Args:\n         - name: name of the option to add\n         - value: value of the option to add\n\n        "}, "Options.to_capabilities": {"name": "to_capabilities", "args": ["self"], "return_type": "<class 'dict'>", "doc": "Marshals the IE options to the correct object."}, "Options.default_capabilities": {"name": "default_capabilities", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x0000027825A25AD0>"}}, "selenium.webdriver.ie.service": {"DEFAULT_EXECUTABLE_PATH": {"name": "DEFAULT_EXECUTABLE_PATH", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "IEDriverServer.exe"}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "Service.__init__": {"name": "__init__", "args": ["self", "executable_path", "port", "host", "log_level", "log_file"], "return_type": "None", "doc": "\n        Creates a new instance of the Service\n\n        :Args:\n         - executable_path : Path to the IEDriver\n         - port : Port the service is running on\n         - host : IP address the service port is bound\n         - log_level : Level of logging of service, may be \"FATAL\", \"ERROR\", \"WARN\", \"INFO\", \"DEBUG\", \"TRACE\".\n           Default is \"FATAL\".\n         - log_file : Target of logging of service, may be \"stdout\", \"stderr\" or file path.\n           Default is \"stdout\"."}, "Service.command_line_args": {"name": "command_line_args", "args": ["self"], "return_type": "typing.List[str]", "doc": null}}, "selenium.webdriver.ie.webdriver": {"DEFAULT_TIMEOUT": {"name": "DEFAULT_TIMEOUT", "type": "<class 'int'>", "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4", "value": "30"}, "DEFAULT_PORT": {"name": "DEFAULT_PORT", "type": "<class 'int'>", "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4", "value": "0"}, "DEFAULT_HOST": {"name": "DEFAULT_HOST", "type": "<class 'NoneType'>", "doc": null, "value": "None"}, "DEFAULT_LOG_LEVEL": {"name": "DEFAULT_LOG_LEVEL", "type": "<class 'NoneType'>", "doc": null, "value": "None"}, "DEFAULT_SERVICE_LOG_PATH": {"name": "DEFAULT_SERVICE_LOG_PATH", "type": "<class 'NoneType'>", "doc": null, "value": "None"}, "DEFAULT_KEEP_ALIVE": {"name": "DEFAULT_KEEP_ALIVE", "type": "<class 'NoneType'>", "doc": null, "value": "None"}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "WebDriver.__init__": {"name": "__init__", "args": ["self", "executable_path", "capabilities", "port", "timeout", "host", "log_level", "service_log_path", "options", "service", "desired_capabilities", "keep_alive"], "return_type": "None", "doc": "\n        Creates a new instance of the Ie driver.\n\n        Starts the service and then creates new instance of Ie driver.\n\n        :Args:\n         - executable_path - Deprecated: path to the executable. If the default is used it assumes the executable is in the $PATH\n         - capabilities - Deprecated: capabilities Dictionary object\n         - port - Deprecated: port you would like the service to run, if left as 0, a free port will be found.\n         - timeout - Deprecated: no longer used, kept for backward compatibility\n         - host - Deprecated: IP address for the service\n         - log_level - Deprecated: log level you would like the service to run.\n         - service_log_path - Deprecated: target of logging of service, may be \"stdout\", \"stderr\" or file path.\n         - options - IE Options instance, providing additional IE options\n         - desired_capabilities - Deprecated: alias of capabilities; this will make the signature consistent with RemoteWebDriver.\n         - keep_alive - Deprecated: Whether to configure RemoteConnection to use HTTP keep-alive.\n        "}, "WebDriver.quit": {"name": "quit", "args": ["self"], "return_type": "None", "doc": null}, "WebDriver.create_options": {"name": "create_options", "args": ["self"], "return_type": "<class 'selenium.webdriver.ie.options.Options'>", "doc": null}}, "selenium.webdriver.ie.__init__": {}, "selenium.webdriver.opera.options": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "Options.KEY": {"name": "KEY", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "operaOptions"}, "Options.capabilities": {"name": "capabilities", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x0000027825983A60>"}, "Options.__init__": {"name": "__init__", "args": ["self"], "return_type": "None", "doc": null}, "Options.android_package_name": {"name": "android_package_name", "type": "<class 'property'>", "doc": "\n        :Returns: The name of the Opera package\n        ", "value": "<property object at 0x0000027825A27290>"}, "Options.android_device_socket": {"name": "android_device_socket", "type": "<class 'property'>", "doc": "\n        :Returns: The name of the devtools socket\n        ", "value": "<property object at 0x0000027825A272E0>"}, "Options.android_command_line_file": {"name": "android_command_line_file", "type": "<class 'property'>", "doc": "\n        :Returns: The path of the command line file\n        ", "value": "<property object at 0x0000027825A27330>"}, "Options.to_capabilities": {"name": "to_capabilities", "args": ["self"], "return_type": "None", "doc": "\n        Creates a capabilities with all the options that have been set and\n        returns a dictionary with everything\n        "}, "Options.default_capabilities": {"name": "default_capabilities", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x0000027825A271A0>"}, "AndroidOptions.__init__": {"name": "__init__", "args": ["self"], "return_type": "None", "doc": null}}, "selenium.webdriver.opera.webdriver": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "OperaDriver.__init__": {"name": "__init__", "args": ["self", "executable_path", "port", "options", "service_args", "desired_capabilities", "service_log_path", "opera_options", "keep_alive"], "return_type": "None", "doc": "\n        Creates a new instance of the operadriver.\n\n        Starts the service and then creates new instance of operadriver.\n\n        :Args:\n         - executable_path - path to the executable. If the default is used\n                             it assumes the executable is in the $PATH\n         - port - port you would like the service to run, if left as 0,\n                  a free port will be found.\n         - options: this takes an instance of OperaOptions\n         - service_args - List of args to pass to the driver service\n         - desired_capabilities: Dictionary object with non-browser specific\n         - service_log_path - Where to log information from the driver.\n           capabilities only, such as \"proxy\" or \"loggingPref\".\n        "}, "OperaDriver.create_options": {"name": "create_options", "args": ["self"], "return_type": "None", "doc": null}, "WebDriver.__init__": {"name": "__init__", "args": ["self", "desired_capabilities", "executable_path", "port", "service_log_path", "service_args", "options"], "return_type": "None", "doc": null}}, "selenium.webdriver.opera.__init__": {}, "selenium.webdriver.remote.bidi_connection": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "BidiConnection.__init__": {"name": "__init__", "args": ["self", "session", "cdp", "devtools_import"], "return_type": "None", "doc": null}}, "selenium.webdriver.remote.command": {"Command.NEW_SESSION": {"name": "NEW_SESSION", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "newSession"}, "Command.DELETE_SESSION": {"name": "DELETE_SESSION", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "deleteSession"}, "Command.NEW_WINDOW": {"name": "NEW_WINDOW", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "newWindow"}, "Command.CLOSE": {"name": "CLOSE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "close"}, "Command.QUIT": {"name": "QUIT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "quit"}, "Command.GET": {"name": "GET", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "get"}, "Command.GO_BACK": {"name": "GO_BACK", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "goBack"}, "Command.GO_FORWARD": {"name": "GO_FORWARD", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "goForward"}, "Command.REFRESH": {"name": "REFRESH", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "refresh"}, "Command.ADD_COOKIE": {"name": "ADD_COOKIE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "addCookie"}, "Command.GET_COOKIE": {"name": "GET_COOKIE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getCookie"}, "Command.GET_ALL_COOKIES": {"name": "GET_ALL_COOKIES", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getCookies"}, "Command.DELETE_COOKIE": {"name": "DELETE_COOKIE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "deleteCookie"}, "Command.DELETE_ALL_COOKIES": {"name": "DELETE_ALL_COOKIES", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "deleteAllCookies"}, "Command.FIND_ELEMENT": {"name": "FIND_ELEMENT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "findElement"}, "Command.FIND_ELEMENTS": {"name": "FIND_ELEMENTS", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "findElements"}, "Command.FIND_CHILD_ELEMENT": {"name": "FIND_CHILD_ELEMENT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "findChildElement"}, "Command.FIND_CHILD_ELEMENTS": {"name": "FIND_CHILD_ELEMENTS", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "findChildElements"}, "Command.CLEAR_ELEMENT": {"name": "CLEAR_ELEMENT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "clearElement"}, "Command.CLICK_ELEMENT": {"name": "CLICK_ELEMENT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "clickElement"}, "Command.SEND_KEYS_TO_ELEMENT": {"name": "SEND_KEYS_TO_ELEMENT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "sendKeysToElement"}, "Command.UPLOAD_FILE": {"name": "UPLOAD_FILE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "uploadFile"}, "Command.W3C_GET_CURRENT_WINDOW_HANDLE": {"name": "W3C_GET_CURRENT_WINDOW_HANDLE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "w3cGetCurrentWindowHandle"}, "Command.W3C_GET_WINDOW_HANDLES": {"name": "W3C_GET_WINDOW_HANDLES", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "w3cGetWindowHandles"}, "Command.SET_WINDOW_RECT": {"name": "SET_WINDOW_RECT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "setWindowRect"}, "Command.GET_WINDOW_RECT": {"name": "GET_WINDOW_RECT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getWindowRect"}, "Command.SWITCH_TO_WINDOW": {"name": "SWITCH_TO_WINDOW", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "switchToWindow"}, "Command.SWITCH_TO_FRAME": {"name": "SWITCH_TO_FRAME", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "switchToFrame"}, "Command.SWITCH_TO_PARENT_FRAME": {"name": "SWITCH_TO_PARENT_FRAME", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "switchToParentFrame"}, "Command.W3C_GET_ACTIVE_ELEMENT": {"name": "W3C_GET_ACTIVE_ELEMENT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "w3cGetActiveElement"}, "Command.GET_CURRENT_URL": {"name": "GET_CURRENT_URL", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getCurrentUrl"}, "Command.GET_PAGE_SOURCE": {"name": "GET_PAGE_SOURCE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getPageSource"}, "Command.GET_TITLE": {"name": "GET_TITLE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getTitle"}, "Command.W3C_EXECUTE_SCRIPT": {"name": "W3C_EXECUTE_SCRIPT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "w3cExecuteScript"}, "Command.W3C_EXECUTE_SCRIPT_ASYNC": {"name": "W3C_EXECUTE_SCRIPT_ASYNC", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "w3cExecuteScriptAsync"}, "Command.GET_ELEMENT_TEXT": {"name": "GET_ELEMENT_TEXT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getElementText"}, "Command.GET_ELEMENT_TAG_NAME": {"name": "GET_ELEMENT_TAG_NAME", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getElementTagName"}, "Command.IS_ELEMENT_SELECTED": {"name": "IS_ELEMENT_SELECTED", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "isElementSelected"}, "Command.IS_ELEMENT_ENABLED": {"name": "IS_ELEMENT_ENABLED", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "isElementEnabled"}, "Command.GET_ELEMENT_RECT": {"name": "GET_ELEMENT_RECT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getElementRect"}, "Command.GET_ELEMENT_ATTRIBUTE": {"name": "GET_ELEMENT_ATTRIBUTE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getElementAttribute"}, "Command.GET_ELEMENT_PROPERTY": {"name": "GET_ELEMENT_PROPERTY", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getElementProperty"}, "Command.GET_ELEMENT_VALUE_OF_CSS_PROPERTY": {"name": "GET_ELEMENT_VALUE_OF_CSS_PROPERTY", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getElementValueOfCssProperty"}, "Command.GET_ELEMENT_ARIA_ROLE": {"name": "GET_ELEMENT_ARIA_ROLE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getElementAriaRole"}, "Command.GET_ELEMENT_ARIA_LABEL": {"name": "GET_ELEMENT_ARIA_LABEL", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getElementAriaLabel"}, "Command.SCREENSHOT": {"name": "SCREENSHOT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "screenshot"}, "Command.ELEMENT_SCREENSHOT": {"name": "ELEMENT_SCREENSHOT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "elementScreenshot"}, "Command.EXECUTE_ASYNC_SCRIPT": {"name": "EXECUTE_ASYNC_SCRIPT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "executeAsyncScript"}, "Command.SET_TIMEOUTS": {"name": "SET_TIMEOUTS", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "setTimeouts"}, "Command.GET_TIMEOUTS": {"name": "GET_TIMEOUTS", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getTimeouts"}, "Command.W3C_MAXIMIZE_WINDOW": {"name": "W3C_MAXIMIZE_WINDOW", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "w3cMaximizeWindow"}, "Command.GET_LOG": {"name": "GET_LOG", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getLog"}, "Command.GET_AVAILABLE_LOG_TYPES": {"name": "GET_AVAILABLE_LOG_TYPES", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getAvailableLogTypes"}, "Command.FULLSCREEN_WINDOW": {"name": "FULLSCREEN_WINDOW", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "fullscreenWindow"}, "Command.MINIMIZE_WINDOW": {"name": "MINIMIZE_WINDOW", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "minimizeWindow"}, "Command.PRINT_PAGE": {"name": "PRINT_PAGE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "printPage"}, "Command.W3C_DISMISS_ALERT": {"name": "W3C_DISMISS_ALERT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "w3cDismissAlert"}, "Command.W3C_ACCEPT_ALERT": {"name": "W3C_ACCEPT_ALERT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "w3cAcceptAlert"}, "Command.W3C_SET_ALERT_VALUE": {"name": "W3C_SET_ALERT_VALUE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "w3cSetAlertValue"}, "Command.W3C_GET_ALERT_TEXT": {"name": "W3C_GET_ALERT_TEXT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "w3cGetAlertText"}, "Command.W3C_ACTIONS": {"name": "W3C_ACTIONS", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "actions"}, "Command.W3C_CLEAR_ACTIONS": {"name": "W3C_CLEAR_ACTIONS", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "clearActionState"}, "Command.SET_SCREEN_ORIENTATION": {"name": "SET_SCREEN_ORIENTATION", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "setScreenOrientation"}, "Command.GET_SCREEN_ORIENTATION": {"name": "GET_SCREEN_ORIENTATION", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getScreenOrientation"}, "Command.GET_NETWORK_CONNECTION": {"name": "GET_NETWORK_CONNECTION", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getNetworkConnection"}, "Command.SET_NETWORK_CONNECTION": {"name": "SET_NETWORK_CONNECTION", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "setNetworkConnection"}, "Command.CURRENT_CONTEXT_HANDLE": {"name": "CURRENT_CONTEXT_HANDLE", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getCurrentContextHandle"}, "Command.CONTEXT_HANDLES": {"name": "CONTEXT_HANDLES", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getContextHandles"}, "Command.SWITCH_TO_CONTEXT": {"name": "SWITCH_TO_CONTEXT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "switchToContext"}, "Command.GET_SHADOW_ROOT": {"name": "GET_SHADOW_ROOT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getShadowRoot"}, "Command.FIND_ELEMENT_FROM_SHADOW_ROOT": {"name": "FIND_ELEMENT_FROM_SHADOW_ROOT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "findElementFromShadowRoot"}, "Command.FIND_ELEMENTS_FROM_SHADOW_ROOT": {"name": "FIND_ELEMENTS_FROM_SHADOW_ROOT", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "findElementsFromShadowRoot"}, "Command.ADD_VIRTUAL_AUTHENTICATOR": {"name": "ADD_VIRTUAL_AUTHENTICATOR", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "addVirtualAuthenticator"}, "Command.REMOVE_VIRTUAL_AUTHENTICATOR": {"name": "REMOVE_VIRTUAL_AUTHENTICATOR", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "removeVirtualAuthenticator"}, "Command.ADD_CREDENTIAL": {"name": "ADD_CREDENTIAL", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "addCredential"}, "Command.GET_CREDENTIALS": {"name": "GET_CREDENTIALS", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getCredentials"}, "Command.REMOVE_CREDENTIAL": {"name": "REMOVE_CREDENTIAL", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "removeCredential"}, "Command.REMOVE_ALL_CREDENTIALS": {"name": "REMOVE_ALL_CREDENTIALS", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "removeAllCredentials"}, "Command.SET_USER_VERIFIED": {"name": "SET_USER_VERIFIED", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "setUserVerified"}}, "selenium.webdriver.remote.errorhandler": {"_KT": {"name": "_KT", "type": "<class 'typing.TypeVar'>", "doc": "Type variable.\n\n    Usage::\n\n      T = TypeVar('T')  # Can be anything\n      A = TypeVar('A', str, bytes)  # Must be str or bytes\n\n    Type variables exist primarily for the benefit of static type\n    checkers.  They serve as the parameters for generic types as well\n    as for generic function definitions.  See class Generic for more\n    information on generic types.  Generic functions work as follows:\n\n      def repeat(x: T, n: int) -> List[T]:\n          '''Return a list containing n references to x.'''\n          return [x]*n\n\n      def longest(x: A, y: A) -> A:\n          '''Return the longest of two strings.'''\n          return x if len(x) >= len(y) else y\n\n    The latter example's signature is essentially the overloading\n    of (str, str) -> str and (bytes, bytes) -> bytes.  Also note\n    that if the arguments are instances of some subclass of str,\n    the return type is still plain str.\n\n    At runtime, isinstance(x, T) and issubclass(C, T) will raise TypeError.\n\n    Type variables defined with covariant=True or contravariant=True\n    can be used to declare covariant or contravariant generic types.\n    See PEP 484 for more details. By default generic types are invariant\n    in all type variables.\n\n    Type variables can be introspected. e.g.:\n\n      T.__name__ == 'T'\n      T.__constraints__ == ()\n      T.__covariant__ == False\n      T.__contravariant__ = False\n      A.__constraints__ == (str, bytes)\n\n    Note that only type variables defined in global scope can be pickled.\n    ", "value": "~_KT"}, "_VT": {"name": "_VT", "type": "<class 'typing.TypeVar'>", "doc": "Type variable.\n\n    Usage::\n\n      T = TypeVar('T')  # Can be anything\n      A = TypeVar('A', str, bytes)  # Must be str or bytes\n\n    Type variables exist primarily for the benefit of static type\n    checkers.  They serve as the parameters for generic types as well\n    as for generic function definitions.  See class Generic for more\n    information on generic types.  Generic functions work as follows:\n\n      def repeat(x: T, n: int) -> List[T]:\n          '''Return a list containing n references to x.'''\n          return [x]*n\n\n      def longest(x: A, y: A) -> A:\n          '''Return the longest of two strings.'''\n          return x if len(x) >= len(y) else y\n\n    The latter example's signature is essentially the overloading\n    of (str, str) -> str and (bytes, bytes) -> bytes.  Also note\n    that if the arguments are instances of some subclass of str,\n    the return type is still plain str.\n\n    At runtime, isinstance(x, T) and issubclass(C, T) will raise TypeError.\n\n    Type variables defined with covariant=True or contravariant=True\n    can be used to declare covariant or contravariant generic types.\n    See PEP 484 for more details. By default generic types are invariant\n    in all type variables.\n\n    Type variables can be introspected. e.g.:\n\n      T.__name__ == 'T'\n      T.__constraints__ == ()\n      T.__covariant__ == False\n      T.__contravariant__ = False\n      A.__constraints__ == (str, bytes)\n\n    Note that only type variables defined in global scope can be pickled.\n    ", "value": "~_VT"}, "ErrorCode.SUCCESS": {"name": "SUCCESS", "type": "<class 'int'>", "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4", "value": "0"}, "ErrorCode.NO_SUCH_ELEMENT": {"name": "NO_SUCH_ELEMENT", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[7, 'no such element']"}, "ErrorCode.NO_SUCH_FRAME": {"name": "NO_SUCH_FRAME", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[8, 'no such frame']"}, "ErrorCode.NO_SUCH_SHADOW_ROOT": {"name": "NO_SUCH_SHADOW_ROOT", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "['no such shadow root']"}, "ErrorCode.UNKNOWN_COMMAND": {"name": "UNKNOWN_COMMAND", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[9, 'unknown command']"}, "ErrorCode.STALE_ELEMENT_REFERENCE": {"name": "STALE_ELEMENT_REFERENCE", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[10, 'stale element reference']"}, "ErrorCode.ELEMENT_NOT_VISIBLE": {"name": "ELEMENT_NOT_VISIBLE", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[11, 'element not visible']"}, "ErrorCode.INVALID_ELEMENT_STATE": {"name": "INVALID_ELEMENT_STATE", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[12, 'invalid element state']"}, "ErrorCode.UNKNOWN_ERROR": {"name": "UNKNOWN_ERROR", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[13, 'unknown error']"}, "ErrorCode.ELEMENT_IS_NOT_SELECTABLE": {"name": "ELEMENT_IS_NOT_SELECTABLE", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[15, 'element not selectable']"}, "ErrorCode.JAVASCRIPT_ERROR": {"name": "JAVASCRIPT_ERROR", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[17, 'javascript error']"}, "ErrorCode.XPATH_LOOKUP_ERROR": {"name": "XPATH_LOOKUP_ERROR", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[19, 'invalid selector']"}, "ErrorCode.TIMEOUT": {"name": "TIMEOUT", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[21, 'timeout']"}, "ErrorCode.NO_SUCH_WINDOW": {"name": "NO_SUCH_WINDOW", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[23, 'no such window']"}, "ErrorCode.INVALID_COOKIE_DOMAIN": {"name": "INVALID_COOKIE_DOMAIN", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[24, 'invalid cookie domain']"}, "ErrorCode.UNABLE_TO_SET_COOKIE": {"name": "UNABLE_TO_SET_COOKIE", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[25, 'unable to set cookie']"}, "ErrorCode.UNEXPECTED_ALERT_OPEN": {"name": "UNEXPECTED_ALERT_OPEN", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[26, 'unexpected alert open']"}, "ErrorCode.NO_ALERT_OPEN": {"name": "NO_ALERT_OPEN", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[27, 'no such alert']"}, "ErrorCode.SCRIPT_TIMEOUT": {"name": "SCRIPT_TIMEOUT", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[28, 'script timeout']"}, "ErrorCode.INVALID_ELEMENT_COORDINATES": {"name": "INVALID_ELEMENT_COORDINATES", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[29, 'invalid element coordinates']"}, "ErrorCode.IME_NOT_AVAILABLE": {"name": "IME_NOT_AVAILABLE", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[30, 'ime not available']"}, "ErrorCode.IME_ENGINE_ACTIVATION_FAILED": {"name": "IME_ENGINE_ACTIVATION_FAILED", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[31, 'ime engine activation failed']"}, "ErrorCode.INVALID_SELECTOR": {"name": "INVALID_SELECTOR", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[32, 'invalid selector']"}, "ErrorCode.SESSION_NOT_CREATED": {"name": "SESSION_NOT_CREATED", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[33, 'session not created']"}, "ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS": {"name": "MOVE_TARGET_OUT_OF_BOUNDS", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[34, 'move target out of bounds']"}, "ErrorCode.INVALID_XPATH_SELECTOR": {"name": "INVALID_XPATH_SELECTOR", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[51, 'invalid selector']"}, "ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER": {"name": "INVALID_XPATH_SELECTOR_RETURN_TYPER", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[52, 'invalid selector']"}, "ErrorCode.ELEMENT_NOT_INTERACTABLE": {"name": "ELEMENT_NOT_INTERACTABLE", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[60, 'element not interactable']"}, "ErrorCode.INSECURE_CERTIFICATE": {"name": "INSECURE_CERTIFICATE", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "['insecure certificate']"}, "ErrorCode.INVALID_ARGUMENT": {"name": "INVALID_ARGUMENT", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[61, 'invalid argument']"}, "ErrorCode.INVALID_COORDINATES": {"name": "INVALID_COORDINATES", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "['invalid coordinates']"}, "ErrorCode.INVALID_SESSION_ID": {"name": "INVALID_SESSION_ID", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "['invalid session id']"}, "ErrorCode.NO_SUCH_COOKIE": {"name": "NO_SUCH_COOKIE", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[62, 'no such cookie']"}, "ErrorCode.UNABLE_TO_CAPTURE_SCREEN": {"name": "UNABLE_TO_CAPTURE_SCREEN", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[63, 'unable to capture screen']"}, "ErrorCode.ELEMENT_CLICK_INTERCEPTED": {"name": "ELEMENT_CLICK_INTERCEPTED", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[64, 'element click intercepted']"}, "ErrorCode.UNKNOWN_METHOD": {"name": "UNKNOWN_METHOD", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "['unknown method exception']"}, "ErrorCode.METHOD_NOT_ALLOWED": {"name": "METHOD_NOT_ALLOWED", "type": "<class 'list'>", "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.", "value": "[405, 'unsupported operation']"}, "ErrorHandler.check_response": {"name": "check_response", "args": ["self", "response"], "return_type": "None", "doc": "\n        Checks that a JSON response from the WebDriver does not have an error.\n\n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n\n        :Raises: If the response contains an error message.\n        "}, "ErrorHandler._value_or_default": {"name": "_value_or_default", "args": ["self", "obj", "key", "default"], "return_type": "~_VT", "doc": null}}, "selenium.webdriver.remote.file_detector": {"FileDetector.is_local_file": {"name": "is_local_file", "args": ["self"], "return_type": "typing.Optional[str]", "doc": null}, "UselessFileDetector.is_local_file": {"name": "is_local_file", "args": ["self"], "return_type": "typing.Optional[str]", "doc": null}, "LocalFileDetector.is_local_file": {"name": "is_local_file", "args": ["self"], "return_type": "typing.Optional[str]", "doc": null}}, "selenium.webdriver.remote.mobile": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "Mobile.ALL_NETWORK": {"name": "ALL_NETWORK", "type": "<class 'selenium.webdriver.remote.mobile.Mobile.ConnectionType'>", "doc": null, "value": "<selenium.webdriver.remote.mobile.Mobile.ConnectionType object at 0x0000027825820130>"}, "Mobile.WIFI_NETWORK": {"name": "WIFI_NETWORK", "type": "<class 'selenium.webdriver.remote.mobile.Mobile.ConnectionType'>", "doc": null, "value": "<selenium.webdriver.remote.mobile.Mobile.ConnectionType object at 0x0000027825820190>"}, "Mobile.DATA_NETWORK": {"name": "DATA_NETWORK", "type": "<class 'selenium.webdriver.remote.mobile.Mobile.ConnectionType'>", "doc": null, "value": "<selenium.webdriver.remote.mobile.Mobile.ConnectionType object at 0x00000278258201F0>"}, "Mobile.AIRPLANE_MODE": {"name": "AIRPLANE_MODE", "type": "<class 'selenium.webdriver.remote.mobile.Mobile.ConnectionType'>", "doc": null, "value": "<selenium.webdriver.remote.mobile.Mobile.ConnectionType object at 0x0000027825820250>"}, "Mobile.__init__": {"name": "__init__", "args": ["self", "driver"], "return_type": "None", "doc": null}, "Mobile.network_connection": {"name": "network_connection", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x0000027825828130>"}, "Mobile.set_network_connection": {"name": "set_network_connection", "args": ["self", "network"], "return_type": "None", "doc": "\n        Set the network connection for the remote device.\n\n        Example of setting airplane mode::\n\n            driver.mobile.set_network_connection(driver.mobile.AIRPLANE_MODE)\n        "}, "Mobile.context": {"name": "context", "type": "<class 'property'>", "doc": "\n        returns the current context (Native or WebView).\n        ", "value": "<property object at 0x00000278258282C0>"}, "Mobile.contexts": {"name": "contexts", "type": "<class 'property'>", "doc": "\n        returns a list of available contexts\n        ", "value": "<property object at 0x00000278258281D0>"}}, "selenium.webdriver.remote.remote_connection": {"LOGGER": {"name": "LOGGER", "type": "<class 'logging.Logger'>", "doc": "\n    Instances of the Logger class represent a single logging channel. A\n    \"logging channel\" indicates an area of an application. Exactly how an\n    \"area\" is defined is up to the application developer. Since an\n    application can have any number of areas, logging channels are identified\n    by a unique string. Application areas can be nested (e.g. an area\n    of \"input processing\" might include sub-areas \"read CSV files\", \"read\n    XLS files\" and \"read Gnumeric files\"). To cater for this natural nesting,\n    channel names are organized into a namespace hierarchy where levels are\n    separated by periods, much like the Java or Python package namespace. So\n    in the instance given above, channel names might be \"input\" for the upper\n    level, and \"input.csv\", \"input.xls\" and \"input.gnu\" for the sub-levels.\n    There is no arbitrary limit to the depth of nesting.\n    ", "value": "<Logger selenium.webdriver.remote.remote_connection (WARNING)>"}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "RemoteConnection.browser_name": {"name": "browser_name", "type": "<class 'NoneType'>", "doc": null, "value": "None"}, "RemoteConnection._timeout": {"name": "_timeout", "type": "<class 'object'>", "doc": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.\n", "value": "<object object at 0x0000027822CE4AF0>"}, "RemoteConnection._ca_certs": {"name": "_ca_certs", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "C:\\Users\\WriteCoin\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\certifi\\cacert.pem"}, "RemoteConnection.get_timeout": {"name": "get_timeout", "args": ["cls"], "return_type": "None", "doc": "\n        :Returns:\n            Timeout value in seconds for all http requests made to the Remote Connection\n        "}, "RemoteConnection.set_timeout": {"name": "set_timeout", "args": ["cls", "timeout"], "return_type": "None", "doc": "\n        Override the default timeout\n\n        :Args:\n            - timeout - timeout value for http requests in seconds\n        "}, "RemoteConnection.reset_timeout": {"name": "reset_timeout", "args": ["cls"], "return_type": "None", "doc": "\n        Reset the http request timeout to socket._GLOBAL_DEFAULT_TIMEOUT\n        "}, "RemoteConnection.get_certificate_bundle_path": {"name": "get_certificate_bundle_path", "args": ["cls"], "return_type": "None", "doc": "\n        :Returns:\n            Paths of the .pem encoded certificate to verify connection to command executor\n        "}, "RemoteConnection.set_certificate_bundle_path": {"name": "set_certificate_bundle_path", "args": ["cls", "path"], "return_type": "None", "doc": "\n        Set the path to the certificate bundle to verify connection to command executor.\n        Can also be set to None to disable certificate validation.\n\n        :Args:\n            - path - path of a .pem encoded certificate chain.\n        "}, "RemoteConnection.get_remote_connection_headers": {"name": "get_remote_connection_headers", "args": ["cls", "parsed_url", "keep_alive"], "return_type": "None", "doc": "\n        Get headers for remote request.\n\n        :Args:\n         - parsed_url - The parsed url\n         - keep_alive (Boolean) - Is this a keep-alive connection (default: False)\n        "}, "RemoteConnection._get_proxy_url": {"name": "_get_proxy_url", "args": ["self"], "return_type": "None", "doc": null}, "RemoteConnection._identify_http_proxy_auth": {"name": "_identify_http_proxy_auth", "args": ["self"], "return_type": "None", "doc": null}, "RemoteConnection._seperate_http_proxy_auth": {"name": "_seperate_http_proxy_auth", "args": ["self"], "return_type": "None", "doc": null}, "RemoteConnection._get_connection_manager": {"name": "_get_connection_manager", "args": ["self"], "return_type": "None", "doc": null}, "RemoteConnection.__init__": {"name": "__init__", "args": ["self", "remote_server_addr", "keep_alive", "resolve_ip", "ignore_proxy"], "return_type": "None", "doc": null}, "RemoteConnection.execute": {"name": "execute", "args": ["self", "command", "params"], "return_type": "None", "doc": "\n        Send a command to the remote server.\n\n        Any path substitutions required for the URL mapped to the command should be\n        included in the command parameters.\n\n        :Args:\n         - command - A string specifying the command to execute.\n         - params - A dictionary of named parameters to send with the command as\n           its JSON payload.\n        "}, "RemoteConnection._request": {"name": "_request", "args": ["self", "method", "url", "body"], "return_type": "None", "doc": "\n        Send an HTTP request to the remote server.\n\n        :Args:\n         - method - A string for the HTTP method to send the request with.\n         - url - A string for the URL to send the request to.\n         - body - A string for request body. Ignored unless method is POST or PUT.\n\n        :Returns:\n          A dictionary with the server's parsed JSON response.\n        "}, "RemoteConnection.close": {"name": "close", "args": ["self"], "return_type": "None", "doc": "\n        Clean up resources when finished with the remote_connection\n        "}}, "selenium.webdriver.remote.script_key": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "__eq__": {"name": "__eq__", "args": ["value"], "return_type": "None", "doc": "Return self==value."}, "ScriptKey.__init__": {"name": "__init__", "args": ["self", "id"], "return_type": "None", "doc": null}, "ScriptKey.id": {"name": "id", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x000002782595BDD0>"}, "ScriptKey.__eq__": {"name": "__eq__", "args": ["self", "other"], "return_type": "None", "doc": null}}, "selenium.webdriver.remote.shadowroot": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "__eq__": {"name": "__eq__", "args": ["value"], "return_type": "None", "doc": "Return self==value."}, "__hash__": {"name": "__hash__", "args": [], "return_type": "None", "doc": "Return hash(self)."}, "__ne__": {"name": "__ne__", "args": ["value"], "return_type": "None", "doc": "Return self!=value."}, "__repr__": {"name": "__repr__", "args": [], "return_type": "None", "doc": "Return repr(self)."}, "ShadowRoot.__init__": {"name": "__init__", "args": ["self", "session", "id_"], "return_type": "None", "doc": null}, "ShadowRoot.__eq__": {"name": "__eq__", "args": ["self", "other_shadowroot"], "return_type": "None", "doc": null}, "ShadowRoot.__hash__": {"name": "__hash__", "args": ["self"], "return_type": "None", "doc": null}, "ShadowRoot.__ne__": {"name": "__ne__", "args": ["self", "other_shadowroot"], "return_type": "None", "doc": null}, "ShadowRoot.__repr__": {"name": "__repr__", "args": ["self"], "return_type": "None", "doc": null}, "ShadowRoot.find_element": {"name": "find_element", "args": ["self", "by", "value"], "return_type": "None", "doc": null}, "ShadowRoot.find_elements": {"name": "find_elements", "args": ["self", "by", "value"], "return_type": "None", "doc": null}, "ShadowRoot._execute": {"name": "_execute", "args": ["self", "command", "params"], "return_type": "None", "doc": "Executes a command against the underlying HTML element.\n\n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n\n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        "}}, "selenium.webdriver.remote.switch_to": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "SwitchTo.alert": {"name": "alert", "type": "<class 'property'>", "doc": "\n        Switches focus to an alert on the page.\n\n        :Usage:\n            ::\n\n                alert = driver.switch_to.alert\n        ", "value": "<property object at 0x0000027825980C20>"}, "SwitchTo.__init__": {"name": "__init__", "args": ["self", "driver"], "return_type": "None", "doc": null}, "SwitchTo.active_element": {"name": "active_element", "type": "<class 'property'>", "doc": "\n        Returns the element with focus, or BODY if nothing has focus.\n\n        :Usage:\n            ::\n\n                element = driver.switch_to.active_element\n        ", "value": "<property object at 0x0000027825980BD0>"}, "SwitchTo.default_content": {"name": "default_content", "args": ["self"], "return_type": "None", "doc": "\n        Switch focus to the default frame.\n\n        :Usage:\n            ::\n\n                driver.switch_to.default_content()\n        "}, "SwitchTo.frame": {"name": "frame", "args": ["self", "frame_reference"], "return_type": "None", "doc": "\n        Switches focus to the specified frame, by index, name, or webelement.\n\n        :Args:\n         - frame_reference: The name of the window to switch to, an integer representing the index,\n                            or a webelement that is an (i)frame to switch to.\n\n        :Usage:\n            ::\n\n                driver.switch_to.frame('frame_name')\n                driver.switch_to.frame(1)\n                driver.switch_to.frame(driver.find_elements(By.TAG_NAME, \"iframe\")[0])\n        "}, "SwitchTo.new_window": {"name": "new_window", "args": ["self", "type_hint"], "return_type": "None", "doc": "Switches to a new top-level browsing context.\n\n        The type hint can be one of \"tab\" or \"window\". If not specified the\n        browser will automatically select it.\n\n        :Usage:\n            ::\n\n                driver.switch_to.new_window('tab')\n        "}, "SwitchTo.parent_frame": {"name": "parent_frame", "args": ["self"], "return_type": "None", "doc": "\n        Switches focus to the parent context. If the current context is the top\n        level browsing context, the context remains unchanged.\n\n        :Usage:\n            ::\n\n                driver.switch_to.parent_frame()\n        "}, "SwitchTo.window": {"name": "window", "args": ["self", "window_name"], "return_type": "None", "doc": "\n        Switches focus to the specified window.\n\n        :Args:\n         - window_name: The name or window handle of the window to switch to.\n\n        :Usage:\n            ::\n\n                driver.switch_to.window('main')\n        "}, "SwitchTo._w3c_window": {"name": "_w3c_window", "args": ["self", "window_name"], "return_type": "None", "doc": null}}, "selenium.webdriver.remote.utils": {"dump_json": {"name": "dump_json", "args": ["json_struct"], "return_type": "<class 'str'>", "doc": null}, "load_json": {"name": "load_json", "args": ["s"], "return_type": "typing.Any", "doc": null}}, "selenium.webdriver.remote.webdriver": {"_W3C_CAPABILITY_NAMES": {"name": "_W3C_CAPABILITY_NAMES", "type": "<class 'frozenset'>", "doc": "frozenset() -> empty frozenset object\nfrozenset(iterable) -> frozenset object\n\nBuild an immutable unordered collection of unique elements.", "value": "frozenset({'browserVersion', 'platformName', 'setWindowRect', 'webSocketUrl', 'pageLoadStrategy', 'unhandledPromptBehavior', 'proxy', 'timeouts', 'acceptInsecureCerts', 'browserName', 'strictFileInteractability'})"}, "_OSS_W3C_CONVERSION": {"name": "_OSS_W3C_CONVERSION", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'acceptSslCerts': 'acceptInsecureCerts', 'version': 'browserVersion', 'platform': 'platformName'}"}, "cdp": {"name": "cdp", "type": "<class 'NoneType'>", "doc": null, "value": "None"}, "import_cdp": {"name": "import_cdp", "args": [], "return_type": "None", "doc": null}, "_make_w3c_caps": {"name": "_make_w3c_caps", "args": ["caps"], "return_type": "None", "doc": "Makes a W3C alwaysMatch capabilities object.\n\n    Filters out capability names that are not in the W3C spec. Spec-compliant\n    drivers will reject requests containing unknown capability names.\n\n    Moves the Firefox profile, if present, from the old location to the new Firefox\n    options object.\n\n    :Args:\n     - caps - A dictionary of capabilities requested by the caller.\n    "}, "get_remote_connection": {"name": "get_remote_connection", "args": ["capabilities", "command_executor", "keep_alive", "ignore_local_proxy"], "return_type": "None", "doc": null}, "create_matches": {"name": "create_matches", "args": ["options"], "return_type": "typing.Dict", "doc": null}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "__repr__": {"name": "__repr__", "args": [], "return_type": "None", "doc": "Return repr(self)."}, "WebDriver._web_element_cls": {"name": "_web_element_cls", "type": "<class 'abc.ABCMeta'>", "doc": "Represents a DOM element.\n\n    Generally, all interesting operations that interact with a document will be\n    performed through this interface.\n\n    All method calls will do a freshness check to ensure that the element\n    reference is still valid.  This essentially determines whether or not the\n    element is still attached to the DOM.  If this test fails, then an\n    ``StaleElementReferenceException`` is thrown, and all future calls to this\n    instance will fail.", "value": "<class 'selenium.webdriver.remote.webelement.WebElement'>"}, "WebDriver._shadowroot_cls": {"name": "_shadowroot_cls", "type": "<class 'type'>", "doc": null, "value": "<class 'selenium.webdriver.remote.shadowroot.ShadowRoot'>"}, "WebDriver.capabilities": {"name": "capabilities", "type": "<class 'property'>", "doc": "\n        returns the drivers current capabilities being used.\n        ", "value": "<property object at 0x00000278259AD800>"}, "WebDriver.timeouts": {"name": "timeouts", "type": "<class 'property'>", "doc": "\n        Get all the timeouts that have been set on the current session\n\n        :Usage:\n            ::\n                driver.timeouts\n        :rtype: Timeout\n        ", "value": "<property object at 0x00000278259AD850>"}, "WebDriver.__init__": {"name": "__init__", "args": ["self", "command_executor", "desired_capabilities", "browser_profile", "proxy", "keep_alive", "file_detector", "options"], "return_type": "None", "doc": "\n        Create a new driver that will issue commands using the wire protocol.\n\n        :Args:\n         - command_executor - Either a string representing URL of the remote server or a custom\n             remote_connection.RemoteConnection object. Defaults to 'http://127.0.0.1:4444/wd/hub'.\n         - desired_capabilities - A dictionary of capabilities to request when\n             starting the browser session. Required parameter.\n         - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.\n             Only used if Firefox is requested. Optional.\n         - proxy - A selenium.webdriver.common.proxy.Proxy object. The browser session will\n             be started with given proxy settings, if possible. Optional.\n         - keep_alive - Whether to configure remote_connection.RemoteConnection to use\n             HTTP keep-alive. Defaults to True.\n         - file_detector - Pass custom file detector object during instantiation. If None,\n             then default LocalFileDetector() will be used.\n         - options - instance of a driver options.Options class\n        "}, "WebDriver.__repr__": {"name": "__repr__", "args": ["self"], "return_type": "None", "doc": null}, "WebDriver.__enter__": {"name": "__enter__", "args": ["self"], "return_type": "None", "doc": null}, "WebDriver.__exit__": {"name": "__exit__", "args": ["self"], "return_type": "None", "doc": null}, "WebDriver.file_detector_context": {"name": "file_detector_context", "args": [], "return_type": "None", "doc": "\n        Overrides the current file detector (if necessary) in limited context.\n        Ensures the original file detector is set afterwards.\n\n        Example:\n\n        with webdriver.file_detector_context(UselessFileDetector):\n            someinput.send_keys('/etc/hosts')\n\n        :Args:\n         - file_detector_class - Class of the desired file detector. If the class is different\n             from the current file_detector, then the class is instantiated with args and kwargs\n             and used as a file detector during the duration of the context manager.\n         - args - Optional arguments that get passed to the file detector class during\n             instantiation.\n         - kwargs - Keyword arguments, passed the same way as args.\n        "}, "WebDriver.mobile": {"name": "mobile", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x00000278259AD300>"}, "WebDriver.name": {"name": "name", "type": "<class 'property'>", "doc": "Returns the name of the underlying browser for this instance.\n\n        :Usage:\n            ::\n\n                name = driver.name\n        ", "value": "<property object at 0x00000278259AD350>"}, "WebDriver.start_client": {"name": "start_client", "args": ["self"], "return_type": "None", "doc": "\n        Called before starting a new session. This method may be overridden\n        to define custom startup behavior.\n        "}, "WebDriver.stop_client": {"name": "stop_client", "args": ["self"], "return_type": "None", "doc": "\n        Called after executing a quit command. This method may be overridden\n        to define custom shutdown behavior.\n        "}, "WebDriver.start_session": {"name": "start_session", "args": ["self", "capabilities", "browser_profile"], "return_type": "None", "doc": "\n        Creates a new session with the desired capabilities.\n\n        :Args:\n         - capabilities - a capabilities dict to start the session with.\n         - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n        "}, "WebDriver._wrap_value": {"name": "_wrap_value", "args": ["self", "value"], "return_type": "None", "doc": null}, "WebDriver.create_web_element": {"name": "create_web_element", "args": ["self", "element_id"], "return_type": "<class 'selenium.webdriver.remote.webelement.WebElement'>", "doc": "Creates a web element with the specified `element_id`."}, "WebDriver._unwrap_value": {"name": "_unwrap_value", "args": ["self", "value"], "return_type": "None", "doc": null}, "WebDriver.execute": {"name": "execute", "args": ["self", "driver_command", "params"], "return_type": "<class 'dict'>", "doc": "\n        Sends a command to be executed by a command.CommandExecutor.\n\n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n\n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        "}, "WebDriver.get": {"name": "get", "args": ["self", "url"], "return_type": "None", "doc": "\n        Loads a web page in the current browser session.\n        "}, "WebDriver.title": {"name": "title", "type": "<class 'property'>", "doc": "Returns the title of the current page.\n\n        :Usage:\n            ::\n\n                title = driver.title\n        ", "value": "<property object at 0x00000278259AD3F0>"}, "WebDriver.find_element_by_id": {"name": "find_element_by_id", "args": ["self", "id_"], "return_type": "<class 'selenium.webdriver.remote.webelement.WebElement'>", "doc": "Finds an element by id.\n\n        :Args:\n         - id\\_ - The id of the element to be found.\n\n        :Returns:\n         - WebElement - the element if it was found\n\n        :Raises:\n         - NoSuchElementException - if the element wasn't found\n\n        :Usage:\n            ::\n\n                element = driver.find_element_by_id('foo')\n        "}, "WebDriver.find_elements_by_id": {"name": "find_elements_by_id", "args": ["self", "id_"], "return_type": "typing.List[selenium.webdriver.remote.webelement.WebElement]", "doc": "\n        Finds multiple elements by id.\n\n        :Args:\n         - id\\_ - The id of the elements to be found.\n\n        :Returns:\n         - list of WebElement - a list with elements if any was found.  An\n           empty list if not\n\n        :Usage:\n            ::\n\n                elements = driver.find_elements_by_id('foo')\n        "}, "WebDriver.find_element_by_xpath": {"name": "find_element_by_xpath", "args": ["self", "xpath"], "return_type": "<class 'selenium.webdriver.remote.webelement.WebElement'>", "doc": "\n        Finds an element by xpath.\n\n        :Args:\n         - xpath - The xpath locator of the element to find.\n\n        :Returns:\n         - WebElement - the element if it was found\n\n        :Raises:\n         - NoSuchElementException - if the element wasn't found\n\n        :Usage:\n            ::\n\n                element = driver.find_element_by_xpath('//div/td[1]')\n        "}, "WebDriver.find_elements_by_xpath": {"name": "find_elements_by_xpath", "args": ["self", "xpath"], "return_type": "typing.List[selenium.webdriver.remote.webelement.WebElement]", "doc": "\n        Finds multiple elements by xpath.\n\n        :Args:\n         - xpath - The xpath locator of the elements to be found.\n\n        :Returns:\n         - list of WebElement - a list with elements if any was found.  An\n           empty list if not\n\n        :Usage:\n            ::\n\n                elements = driver.find_elements_by_xpath(\"//div[contains(@class, 'foo')]\")\n        "}, "WebDriver.find_element_by_link_text": {"name": "find_element_by_link_text", "args": ["self", "link_text"], "return_type": "<class 'selenium.webdriver.remote.webelement.WebElement'>", "doc": "\n        Finds an element by link text.\n\n        :Args:\n         - link_text: The text of the element to be found.\n\n        :Returns:\n         - WebElement - the element if it was found\n\n        :Raises:\n         - NoSuchElementException - if the element wasn't found\n\n        :Usage:\n            ::\n\n                element = driver.find_element_by_link_text('Sign In')\n        "}, "WebDriver.find_elements_by_link_text": {"name": "find_elements_by_link_text", "args": ["self", "text"], "return_type": "typing.List[selenium.webdriver.remote.webelement.WebElement]", "doc": "\n        Finds elements by link text.\n\n        :Args:\n         - link_text: The text of the elements to be found.\n\n        :Returns:\n         - list of webelement - a list with elements if any was found.  an\n           empty list if not\n\n        :Usage:\n            ::\n\n                elements = driver.find_elements_by_link_text('Sign In')\n        "}, "WebDriver.find_element_by_partial_link_text": {"name": "find_element_by_partial_link_text", "args": ["self", "link_text"], "return_type": "<class 'selenium.webdriver.remote.webelement.WebElement'>", "doc": "\n        Finds an element by a partial match of its link text.\n\n        :Args:\n         - link_text: The text of the element to partially match on.\n\n        :Returns:\n         - WebElement - the element if it was found\n\n        :Raises:\n         - NoSuchElementException - if the element wasn't found\n\n        :Usage:\n            ::\n\n                element = driver.find_element_by_partial_link_text('Sign')\n        "}, "WebDriver.find_elements_by_partial_link_text": {"name": "find_elements_by_partial_link_text", "args": ["self", "link_text"], "return_type": "typing.List[selenium.webdriver.remote.webelement.WebElement]", "doc": "\n        Finds elements by a partial match of their link text.\n\n        :Args:\n         - link_text: The text of the element to partial match on.\n\n        :Returns:\n         - list of webelement - a list with elements if any was found.  an\n           empty list if not\n\n        :Usage:\n            ::\n\n                elements = driver.find_elements_by_partial_link_text('Sign')\n        "}, "WebDriver.find_element_by_name": {"name": "find_element_by_name", "args": ["self", "name"], "return_type": "<class 'selenium.webdriver.remote.webelement.WebElement'>", "doc": "\n        Finds an element by name.\n\n        :Args:\n         - name: The name of the element to find.\n\n        :Returns:\n         - WebElement - the element if it was found\n\n        :Raises:\n         - NoSuchElementException - if the element wasn't found\n\n        :Usage:\n            ::\n\n                element = driver.find_element_by_name('foo')\n        "}, "WebDriver.find_elements_by_name": {"name": "find_elements_by_name", "args": ["self", "name"], "return_type": "typing.List[selenium.webdriver.remote.webelement.WebElement]", "doc": "\n        Finds elements by name.\n\n        :Args:\n         - name: The name of the elements to find.\n\n        :Returns:\n         - list of webelement - a list with elements if any was found.  an\n           empty list if not\n\n        :Usage:\n            ::\n\n                elements = driver.find_elements_by_name('foo')\n        "}, "WebDriver.find_element_by_tag_name": {"name": "find_element_by_tag_name", "args": ["self", "name"], "return_type": "<class 'selenium.webdriver.remote.webelement.WebElement'>", "doc": "\n        Finds an element by tag name.\n\n        :Args:\n         - name - name of html tag (eg: h1, a, span)\n\n        :Returns:\n         - WebElement - the element if it was found\n\n        :Raises:\n         - NoSuchElementException - if the element wasn't found\n\n        :Usage:\n            ::\n\n                element = driver.find_element_by_tag_name('h1')\n        "}, "WebDriver.find_elements_by_tag_name": {"name": "find_elements_by_tag_name", "args": ["self", "name"], "return_type": "typing.List[selenium.webdriver.remote.webelement.WebElement]", "doc": "\n        Finds elements by tag name.\n\n        :Args:\n         - name - name of html tag (eg: h1, a, span)\n\n        :Returns:\n         - list of WebElement - a list with elements if any was found.  An\n           empty list if not\n\n        :Usage:\n            ::\n\n                elements = driver.find_elements_by_tag_name('h1')\n        "}, "WebDriver.find_element_by_class_name": {"name": "find_element_by_class_name", "args": ["self", "name"], "return_type": "<class 'selenium.webdriver.remote.webelement.WebElement'>", "doc": "\n        Finds an element by class name.\n\n        :Args:\n         - name: The class name of the element to find.\n\n        :Returns:\n         - WebElement - the element if it was found\n\n        :Raises:\n         - NoSuchElementException - if the element wasn't found\n\n        :Usage:\n            ::\n\n                element = driver.find_element_by_class_name('foo')\n        "}, "WebDriver.find_elements_by_class_name": {"name": "find_elements_by_class_name", "args": ["self", "name"], "return_type": "typing.List[selenium.webdriver.remote.webelement.WebElement]", "doc": "\n        Finds elements by class name.\n\n        :Args:\n         - name: The class name of the elements to find.\n\n        :Returns:\n         - list of WebElement - a list with elements if any was found.  An\n           empty list if not\n\n        :Usage:\n            ::\n\n                elements = driver.find_elements_by_class_name('foo')\n        "}, "WebDriver.find_element_by_css_selector": {"name": "find_element_by_css_selector", "args": ["self", "css_selector"], "return_type": "<class 'selenium.webdriver.remote.webelement.WebElement'>", "doc": "\n        Finds an element by css selector.\n\n        :Args:\n         - css_selector - CSS selector string, ex: 'a.nav#home'\n\n        :Returns:\n         - WebElement - the element if it was found\n\n        :Raises:\n         - NoSuchElementException - if the element wasn't found\n\n        :Usage:\n            ::\n\n                element = driver.find_element_by_css_selector('#foo')\n        "}, "WebDriver.find_elements_by_css_selector": {"name": "find_elements_by_css_selector", "args": ["self", "css_selector"], "return_type": "typing.List[selenium.webdriver.remote.webelement.WebElement]", "doc": "\n        Finds elements by css selector.\n\n        :Args:\n         - css_selector - CSS selector string, ex: 'a.nav#home'\n\n        :Returns:\n         - list of WebElement - a list with elements if any was found.  An\n           empty list if not\n\n        :Usage:\n            ::\n\n                elements = driver.find_elements_by_css_selector('.foo')\n        "}, "WebDriver.pin_script": {"name": "pin_script", "args": ["self", "script", "script_key"], "return_type": "<class 'selenium.webdriver.remote.script_key.ScriptKey'>", "doc": "\n\n        "}, "WebDriver.unpin": {"name": "unpin", "args": ["self", "script_key"], "return_type": "None", "doc": "\n\n        "}, "WebDriver.get_pinned_scripts": {"name": "get_pinned_scripts", "args": ["self"], "return_type": "typing.List[str]", "doc": "\n\n        "}, "WebDriver.execute_script": {"name": "execute_script", "args": ["self", "script"], "return_type": "None", "doc": "\n        Synchronously Executes JavaScript in the current window/frame.\n\n        :Args:\n         - script: The JavaScript to execute.\n         - \\*args: Any applicable arguments for your JavaScript.\n\n        :Usage:\n            ::\n\n                driver.execute_script('return document.title;')\n        "}, "WebDriver.execute_async_script": {"name": "execute_async_script", "args": ["self", "script"], "return_type": "None", "doc": "\n        Asynchronously Executes JavaScript in the current window/frame.\n\n        :Args:\n         - script: The JavaScript to execute.\n         - \\*args: Any applicable arguments for your JavaScript.\n\n        :Usage:\n            ::\n\n                script = \"var callback = arguments[arguments.length - 1]; \" \\\n                         \"window.setTimeout(function(){ callback('timeout') }, 3000);\"\n                driver.execute_async_script(script)\n        "}, "WebDriver.current_url": {"name": "current_url", "type": "<class 'property'>", "doc": "\n        Gets the URL of the current page.\n\n        :Usage:\n            ::\n\n                driver.current_url\n        ", "value": "<property object at 0x00000278259AD530>"}, "WebDriver.page_source": {"name": "page_source", "type": "<class 'property'>", "doc": "\n        Gets the source of the current page.\n\n        :Usage:\n            ::\n\n                driver.page_source\n        ", "value": "<property object at 0x00000278259AD580>"}, "WebDriver.close": {"name": "close", "args": ["self"], "return_type": "None", "doc": "\n        Closes the current window.\n\n        :Usage:\n            ::\n\n                driver.close()\n        "}, "WebDriver.quit": {"name": "quit", "args": ["self"], "return_type": "None", "doc": "\n        Quits the driver and closes every associated window.\n\n        :Usage:\n            ::\n\n                driver.quit()\n        "}, "WebDriver.current_window_handle": {"name": "current_window_handle", "type": "<class 'property'>", "doc": "\n        Returns the handle of the current window.\n\n        :Usage:\n            ::\n\n                driver.current_window_handle\n        ", "value": "<property object at 0x00000278259AD5D0>"}, "WebDriver.window_handles": {"name": "window_handles", "type": "<class 'property'>", "doc": "\n        Returns the handles of all windows within the current session.\n\n        :Usage:\n            ::\n\n                driver.window_handles\n        ", "value": "<property object at 0x00000278259AD620>"}, "WebDriver.maximize_window": {"name": "maximize_window", "args": ["self"], "return_type": "None", "doc": "\n        Maximizes the current window that webdriver is using\n        "}, "WebDriver.fullscreen_window": {"name": "fullscreen_window", "args": ["self"], "return_type": "None", "doc": "\n        Invokes the window manager-specific 'full screen' operation\n        "}, "WebDriver.minimize_window": {"name": "minimize_window", "args": ["self"], "return_type": "None", "doc": "\n        Invokes the window manager-specific 'minimize' operation\n        "}, "WebDriver.print_page": {"name": "print_page", "args": ["self", "print_options"], "return_type": "<class 'str'>", "doc": "\n        Takes PDF of the current page.\n        The driver makes a best effort to return a PDF based on the provided parameters.\n        "}, "WebDriver.switch_to": {"name": "switch_to", "type": "<class 'property'>", "doc": "\n        :Returns:\n            - SwitchTo: an object containing all options to switch focus into\n\n        :Usage:\n            ::\n\n                element = driver.switch_to.active_element\n                alert = driver.switch_to.alert\n                driver.switch_to.default_content()\n                driver.switch_to.frame('frame_name')\n                driver.switch_to.frame(1)\n                driver.switch_to.frame(driver.find_elements_by_tag_name(\"iframe\")[0])\n                driver.switch_to.parent_frame()\n                driver.switch_to.window('main')\n        ", "value": "<property object at 0x00000278259AD6C0>"}, "WebDriver.back": {"name": "back", "args": ["self"], "return_type": "None", "doc": "\n        Goes one step backward in the browser history.\n\n        :Usage:\n            ::\n\n                driver.back()\n        "}, "WebDriver.forward": {"name": "forward", "args": ["self"], "return_type": "None", "doc": "\n        Goes one step forward in the browser history.\n\n        :Usage:\n            ::\n\n                driver.forward()\n        "}, "WebDriver.refresh": {"name": "refresh", "args": ["self"], "return_type": "None", "doc": "\n        Refreshes the current page.\n\n        :Usage:\n            ::\n\n                driver.refresh()\n        "}, "WebDriver.get_cookies": {"name": "get_cookies", "args": ["self"], "return_type": "typing.List[dict]", "doc": "\n        Returns a set of dictionaries, corresponding to cookies visible in the current session.\n\n        :Usage:\n            ::\n\n                driver.get_cookies()\n        "}, "WebDriver.get_cookie": {"name": "get_cookie", "args": ["self", "name"], "return_type": "<class 'dict'>", "doc": "\n        Get a single cookie by name. Returns the cookie if found, None if not.\n\n        :Usage:\n            ::\n\n                driver.get_cookie('my_cookie')\n        "}, "WebDriver.delete_cookie": {"name": "delete_cookie", "args": ["self", "name"], "return_type": "None", "doc": "\n        Deletes a single cookie with the given name.\n\n        :Usage:\n            ::\n\n                driver.delete_cookie('my_cookie')\n        "}, "WebDriver.delete_all_cookies": {"name": "delete_all_cookies", "args": ["self"], "return_type": "None", "doc": "\n        Delete all cookies in the scope of the session.\n\n        :Usage:\n            ::\n\n                driver.delete_all_cookies()\n        "}, "WebDriver.add_cookie": {"name": "add_cookie", "args": ["self", "cookie_dict"], "return_type": "None", "doc": "\n        Adds a cookie to your current session.\n\n        :Args:\n         - cookie_dict: A dictionary object, with required keys - \"name\" and \"value\";\n            optional keys - \"path\", \"domain\", \"secure\", \"httpOnly\", \"expiry\", \"sameSite\"\n\n        Usage:\n            driver.add_cookie({'name' : 'foo', 'value' : 'bar'})\n            driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})\n            driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})\n            driver.add_cookie({'name': 'foo', 'value': 'bar', 'sameSite': 'Strict'})\n\n        "}, "WebDriver.implicitly_wait": {"name": "implicitly_wait", "args": ["self", "time_to_wait"], "return_type": "None", "doc": "\n        Sets a sticky timeout to implicitly wait for an element to be found,\n           or a command to complete. This method only needs to be called one\n           time per session. To set the timeout for calls to\n           execute_async_script, see set_script_timeout.\n\n        :Args:\n         - time_to_wait: Amount of time to wait (in seconds)\n\n        :Usage:\n            ::\n\n                driver.implicitly_wait(30)\n        "}, "WebDriver.set_script_timeout": {"name": "set_script_timeout", "args": ["self", "time_to_wait"], "return_type": "None", "doc": "\n        Set the amount of time that the script should wait during an\n           execute_async_script call before throwing an error.\n\n        :Args:\n         - time_to_wait: The amount of time to wait (in seconds)\n\n        :Usage:\n            ::\n\n                driver.set_script_timeout(30)\n        "}, "WebDriver.set_page_load_timeout": {"name": "set_page_load_timeout", "args": ["self", "time_to_wait"], "return_type": "None", "doc": "\n        Set the amount of time to wait for a page load to complete\n           before throwing an error.\n\n        :Args:\n         - time_to_wait: The amount of time to wait\n\n        :Usage:\n            ::\n\n                driver.set_page_load_timeout(30)\n        "}, "WebDriver.find_element": {"name": "find_element", "args": ["self", "by", "value"], "return_type": "<class 'selenium.webdriver.remote.webelement.WebElement'>", "doc": "\n        Find an element given a By strategy and locator.\n\n        :Usage:\n            ::\n\n                element = driver.find_element(By.ID, 'foo')\n\n        :rtype: WebElement\n        "}, "WebDriver.find_elements": {"name": "find_elements", "args": ["self", "by", "value"], "return_type": "typing.List[selenium.webdriver.remote.webelement.WebElement]", "doc": "\n        Find elements given a By strategy and locator.\n\n        :Usage:\n            ::\n\n                elements = driver.find_elements(By.CLASS_NAME, 'foo')\n\n        :rtype: list of WebElement\n        "}, "WebDriver.desired_capabilities": {"name": "desired_capabilities", "type": "<class 'property'>", "doc": "\n        returns the drivers current desired capabilities being used\n        ", "value": "<property object at 0x00000278259AD7B0>"}, "WebDriver.get_screenshot_as_file": {"name": "get_screenshot_as_file", "args": ["self", "filename"], "return_type": "<class 'bool'>", "doc": "\n        Saves a screenshot of the current window to a PNG image file. Returns\n           False if there is any IOError, else returns True. Use full paths in\n           your filename.\n\n        :Args:\n         - filename: The full path you wish to save your screenshot to. This\n           should end with a `.png` extension.\n\n        :Usage:\n            ::\n\n                driver.get_screenshot_as_file('/Screenshots/foo.png')\n        "}, "WebDriver.save_screenshot": {"name": "save_screenshot", "args": ["self", "filename"], "return_type": "<class 'bool'>", "doc": "\n        Saves a screenshot of the current window to a PNG image file. Returns\n           False if there is any IOError, else returns True. Use full paths in\n           your filename.\n\n        :Args:\n         - filename: The full path you wish to save your screenshot to. This\n           should end with a `.png` extension.\n\n        :Usage:\n            ::\n\n                driver.save_screenshot('/Screenshots/foo.png')\n        "}, "WebDriver.get_screenshot_as_png": {"name": "get_screenshot_as_png", "args": ["self"], "return_type": "<class 'bytes'>", "doc": "\n        Gets the screenshot of the current window as a binary data.\n\n        :Usage:\n            ::\n\n                driver.get_screenshot_as_png()\n        "}, "WebDriver.get_screenshot_as_base64": {"name": "get_screenshot_as_base64", "args": ["self"], "return_type": "<class 'str'>", "doc": "\n        Gets the screenshot of the current window as a base64 encoded string\n           which is useful in embedded images in HTML.\n\n        :Usage:\n            ::\n\n                driver.get_screenshot_as_base64()\n        "}, "WebDriver.set_window_size": {"name": "set_window_size", "args": ["self", "width", "height", "windowHandle"], "return_type": "<class 'dict'>", "doc": "\n        Sets the width and height of the current window. (window.resizeTo)\n\n        :Args:\n         - width: the width in pixels to set the window to\n         - height: the height in pixels to set the window to\n\n        :Usage:\n            ::\n\n                driver.set_window_size(800,600)\n        "}, "WebDriver.get_window_size": {"name": "get_window_size", "args": ["self", "windowHandle"], "return_type": "<class 'dict'>", "doc": "\n        Gets the width and height of the current window.\n\n        :Usage:\n            ::\n\n                driver.get_window_size()\n        "}, "WebDriver.set_window_position": {"name": "set_window_position", "args": ["self", "x", "y", "windowHandle"], "return_type": "<class 'dict'>", "doc": "\n        Sets the x,y position of the current window. (window.moveTo)\n\n        :Args:\n         - x: the x-coordinate in pixels to set the window position\n         - y: the y-coordinate in pixels to set the window position\n\n        :Usage:\n            ::\n\n                driver.set_window_position(0,0)\n        "}, "WebDriver.get_window_position": {"name": "get_window_position", "args": ["self", "windowHandle"], "return_type": "<class 'dict'>", "doc": "\n        Gets the x,y position of the current window.\n\n        :Usage:\n            ::\n\n                driver.get_window_position()\n        "}, "WebDriver.get_window_rect": {"name": "get_window_rect", "args": ["self"], "return_type": "<class 'dict'>", "doc": "\n        Gets the x, y coordinates of the window as well as height and width of\n        the current window.\n\n        :Usage:\n            ::\n\n                driver.get_window_rect()\n        "}, "WebDriver.set_window_rect": {"name": "set_window_rect", "args": ["self", "x", "y", "width", "height"], "return_type": "<class 'dict'>", "doc": "\n        Sets the x, y coordinates of the window as well as height and width of\n        the current window. This method is only supported for W3C compatible\n        browsers; other browsers should use `set_window_position` and\n        `set_window_size`.\n\n        :Usage:\n            ::\n\n                driver.set_window_rect(x=10, y=10)\n                driver.set_window_rect(width=100, height=200)\n                driver.set_window_rect(x=10, y=10, width=100, height=200)\n        "}, "WebDriver.file_detector": {"name": "file_detector", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x00000278259AD940>"}, "WebDriver.orientation": {"name": "orientation", "type": "<class 'property'>", "doc": "\n        Gets the current orientation of the device\n\n        :Usage:\n            ::\n\n                orientation = driver.orientation\n        ", "value": "<property object at 0x00000278259AD990>"}, "WebDriver.application_cache": {"name": "application_cache", "type": "<class 'property'>", "doc": " Returns a ApplicationCache Object to interact with the browser app cache", "value": "<property object at 0x00000278259AD8A0>"}, "WebDriver.log_types": {"name": "log_types", "type": "<class 'property'>", "doc": "\n        Gets a list of the available log types. This only works with w3c compliant browsers.\n\n        :Usage:\n            ::\n\n                driver.log_types\n        ", "value": "<property object at 0x00000278259AD8F0>"}, "WebDriver.get_log": {"name": "get_log", "args": ["self", "log_type"], "return_type": "None", "doc": "\n        Gets the log for a given log type\n\n        :Args:\n         - log_type: type of log that which will be returned\n\n        :Usage:\n            ::\n\n                driver.get_log('browser')\n                driver.get_log('driver')\n                driver.get_log('client')\n                driver.get_log('server')\n        "}, "WebDriver._get_cdp_details": {"name": "_get_cdp_details", "args": ["self"], "return_type": "None", "doc": null}, "WebDriver.add_virtual_authenticator": {"name": "add_virtual_authenticator", "args": ["self", "options"], "return_type": "None", "doc": "\n        Adds a virtual authenticator with the given options.\n        "}, "WebDriver.virtual_authenticator_id": {"name": "virtual_authenticator_id", "type": "<class 'property'>", "doc": "\n        Returns the id of the virtual authenticator.\n        ", "value": "<property object at 0x00000278259AD9E0>"}, "WebDriver.remove_virtual_authenticator": {"name": "remove_virtual_authenticator", "args": ["self"], "return_type": "None", "doc": "\n        Removes a previously added virtual authenticator. The authenticator is no\n        longer valid after removal, so no methods may be called.\n        "}, "WebDriver.add_credential": {"name": "add_credential", "args": ["self"], "return_type": "None", "doc": "\n        Injects a credential into the authenticator.\n        "}, "WebDriver.get_credentials": {"name": "get_credentials", "args": ["self"], "return_type": "typing.List[selenium.webdriver.common.virtual_authenticator.Credential]", "doc": "\n        Returns the list of credentials owned by the authenticator.\n        "}, "WebDriver.remove_credential": {"name": "remove_credential", "args": ["self"], "return_type": "None", "doc": "\n        Removes a credential from the authenticator.\n        "}, "WebDriver.remove_all_credentials": {"name": "remove_all_credentials", "args": ["self"], "return_type": "None", "doc": "\n        Removes all credentials from the authenticator.\n        "}, "WebDriver.set_user_verified": {"name": "set_user_verified", "args": ["self"], "return_type": "None", "doc": "\n        Sets whether the authenticator will simulate success or fail on user verification.\n        verified: True if the authenticator will pass user verification, False otherwise.\n        "}}, "selenium.webdriver.remote.webelement": {"getAttribute_js": {"name": "getAttribute_js", "type": "<class 'NoneType'>", "doc": null, "value": "None"}, "isDisplayed_js": {"name": "isDisplayed_js", "type": "<class 'NoneType'>", "doc": null, "value": "None"}, "_load_js": {"name": "_load_js", "args": [], "return_type": "None", "doc": null}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "__repr__": {"name": "__repr__", "args": [], "return_type": "None", "doc": "Return repr(self)."}, "__eq__": {"name": "__eq__", "args": ["value"], "return_type": "None", "doc": "Return self==value."}, "__ne__": {"name": "__ne__", "args": ["value"], "return_type": "None", "doc": "Return self!=value."}, "__hash__": {"name": "__hash__", "args": [], "return_type": "None", "doc": "Return hash(self)."}, "WebElement.size": {"name": "size", "type": "<class 'property'>", "doc": "The size of the element.", "value": "<property object at 0x0000027825982C00>"}, "WebElement.__init__": {"name": "__init__", "args": ["self", "parent", "id_"], "return_type": "None", "doc": null}, "WebElement.__repr__": {"name": "__repr__", "args": ["self"], "return_type": "None", "doc": null}, "WebElement.tag_name": {"name": "tag_name", "type": "<class 'property'>", "doc": "This element's ``tagName`` property.", "value": "<property object at 0x0000027825982AC0>"}, "WebElement.text": {"name": "text", "type": "<class 'property'>", "doc": "The text of the element.", "value": "<property object at 0x0000027825982B10>"}, "WebElement.click": {"name": "click", "args": ["self"], "return_type": "None", "doc": "Clicks the element."}, "WebElement.submit": {"name": "submit", "args": ["self"], "return_type": "None", "doc": "Submits a form."}, "WebElement.clear": {"name": "clear", "args": ["self"], "return_type": "None", "doc": "Clears the text if it's a text entry element."}, "WebElement.get_property": {"name": "get_property", "args": ["self", "name"], "return_type": "Union[str, bool, WebElement, dict]", "doc": "\n        Gets the given property of the element.\n\n        :Args:\n            - name - Name of the property to retrieve.\n\n        :Usage:\n            ::\n\n                text_length = target_element.get_property(\"text_length\")\n        "}, "WebElement.get_dom_attribute": {"name": "get_dom_attribute", "args": ["self", "name"], "return_type": "str", "doc": "\n        Gets the given attribute of the element. Unlike :func:`~selenium.webdriver.remote.BaseWebElement.get_attribute`,\n        this method only returns attributes declared in the element's HTML markup.\n\n        :Args:\n            - name - Name of the attribute to retrieve.\n\n        :Usage:\n            ::\n\n                text_length = target_element.get_dom_attribute(\"class\")\n        "}, "WebElement.get_attribute": {"name": "get_attribute", "args": ["self", "name"], "return_type": "str", "doc": "Gets the given attribute or property of the element.\n\n        This method will first try to return the value of a property with the\n        given name. If a property with that name doesn't exist, it returns the\n        value of the attribute with the same name. If there's no attribute with\n        that name, ``None`` is returned.\n\n        Values which are considered truthy, that is equals \"true\" or \"false\",\n        are returned as booleans.  All other non-``None`` values are returned\n        as strings.  For attributes or properties which do not exist, ``None``\n        is returned.\n\n        To obtain the exact value of the attribute or property,\n        use :func:`~selenium.webdriver.remote.BaseWebElement.get_dom_attribute` or\n        :func:`~selenium.webdriver.remote.BaseWebElement.get_property` methods respectively.\n\n        :Args:\n            - name - Name of the attribute/property to retrieve.\n\n        Example::\n\n            # Check if the \"active\" CSS class is applied to an element.\n            is_active = \"active\" in target_element.get_attribute(\"class\")\n\n        "}, "WebElement.is_selected": {"name": "is_selected", "args": ["self"], "return_type": "bool", "doc": "Returns whether the element is selected.\n\n        Can be used to check if a checkbox or radio button is selected.\n        "}, "WebElement.is_enabled": {"name": "is_enabled", "args": ["self"], "return_type": "bool", "doc": "Returns whether the element is enabled."}, "WebElement.find_element_by_id": {"name": "find_element_by_id", "args": ["self", "id_"], "return_type": "None", "doc": "Finds element within this element's children by ID.\n\n        :Args:\n         - id\\_ - ID of child element to locate.\n\n        :Returns:\n         - WebElement - the element if it was found\n\n        :Raises:\n         - NoSuchElementException - if the element wasn't found\n\n        :Usage:\n            ::\n\n                foo_element = element.find_element_by_id('foo')\n        "}, "WebElement.find_elements_by_id": {"name": "find_elements_by_id", "args": ["self", "id_"], "return_type": "None", "doc": "Finds a list of elements within this element's children by ID.\n        Will return a list of webelements if found, or an empty list if not.\n\n        :Args:\n         - id\\_ - Id of child element to find.\n\n        :Returns:\n         - list of WebElement - a list with elements if any was found.  An\n           empty list if not\n\n        :Usage:\n            ::\n\n                elements = element.find_elements_by_id('foo')\n        "}, "WebElement.find_element_by_name": {"name": "find_element_by_name", "args": ["self", "name"], "return_type": "None", "doc": "Finds element within this element's children by name.\n\n        :Args:\n         - name - name property of the element to find.\n\n        :Returns:\n         - WebElement - the element if it was found\n\n        :Raises:\n         - NoSuchElementException - if the element wasn't found\n\n        :Usage:\n            ::\n\n                element = element.find_element_by_name('foo')\n        "}, "WebElement.find_elements_by_name": {"name": "find_elements_by_name", "args": ["self", "name"], "return_type": "None", "doc": "Finds a list of elements within this element's children by name.\n\n        :Args:\n         - name - name property to search for.\n\n        :Returns:\n         - list of webelement - a list with elements if any was found.  an\n           empty list if not\n\n        :Usage:\n            ::\n\n                elements = element.find_elements_by_name('foo')\n        "}, "WebElement.find_element_by_link_text": {"name": "find_element_by_link_text", "args": ["self", "link_text"], "return_type": "None", "doc": "Finds element within this element's children by visible link text.\n\n        :Args:\n         - link_text - Link text string to search for.\n\n        :Returns:\n         - WebElement - the element if it was found\n\n        :Raises:\n         - NoSuchElementException - if the element wasn't found\n\n        :Usage:\n            ::\n\n                element = element.find_element_by_link_text('Sign In')\n        "}, "WebElement.find_elements_by_link_text": {"name": "find_elements_by_link_text", "args": ["self", "link_text"], "return_type": "None", "doc": "Finds a list of elements within this element's children by visible link text.\n\n        :Args:\n         - link_text - Link text string to search for.\n\n        :Returns:\n         - list of webelement - a list with elements if any was found.  an\n           empty list if not\n\n        :Usage:\n            ::\n\n                elements = element.find_elements_by_link_text('Sign In')\n        "}, "WebElement.find_element_by_partial_link_text": {"name": "find_element_by_partial_link_text", "args": ["self", "link_text"], "return_type": "None", "doc": "Finds element within this element's children by partially visible link text.\n\n        :Args:\n         - link_text: The text of the element to partially match on.\n\n        :Returns:\n         - WebElement - the element if it was found\n\n        :Raises:\n         - NoSuchElementException - if the element wasn't found\n\n        :Usage:\n            ::\n\n                element = element.find_element_by_partial_link_text('Sign')\n        "}, "WebElement.find_elements_by_partial_link_text": {"name": "find_elements_by_partial_link_text", "args": ["self", "link_text"], "return_type": "None", "doc": "Finds a list of elements within this element's children by link text.\n\n        :Args:\n         - link_text: The text of the element to partial match on.\n\n        :Returns:\n         - list of webelement - a list with elements if any was found.  an\n           empty list if not\n\n        :Usage:\n            ::\n\n                elements = element.find_elements_by_partial_link_text('Sign')\n        "}, "WebElement.find_element_by_tag_name": {"name": "find_element_by_tag_name", "args": ["self", "name"], "return_type": "None", "doc": "Finds element within this element's children by tag name.\n\n        :Args:\n         - name - name of html tag (eg: h1, a, span)\n\n        :Returns:\n         - WebElement - the element if it was found\n\n        :Raises:\n         - NoSuchElementException - if the element wasn't found\n\n        :Usage:\n            ::\n\n                element = element.find_element_by_tag_name('h1')\n        "}, "WebElement.find_elements_by_tag_name": {"name": "find_elements_by_tag_name", "args": ["self", "name"], "return_type": "None", "doc": "Finds a list of elements within this element's children by tag name.\n\n        :Args:\n         - name - name of html tag (eg: h1, a, span)\n\n        :Returns:\n         - list of WebElement - a list with elements if any was found.  An\n           empty list if not\n\n        :Usage:\n            ::\n\n                elements = element.find_elements_by_tag_name('h1')\n        "}, "WebElement.find_element_by_xpath": {"name": "find_element_by_xpath", "args": ["self", "xpath"], "return_type": "None", "doc": "Finds element by xpath.\n\n        :Args:\n         - xpath - xpath of element to locate.  \"//input[@class='myelement']\"\n\n        Note: The base path will be relative to this element's location.\n\n        This will select the first link under this element.\n\n        ::\n\n            myelement.find_element_by_xpath(\".//a\")\n\n        However, this will select the first link on the page.\n\n        ::\n\n            myelement.find_element_by_xpath(\"//a\")\n\n        :Returns:\n         - WebElement - the element if it was found\n\n        :Raises:\n         - NoSuchElementException - if the element wasn't found\n\n        :Usage:\n            ::\n\n                element = element.find_element_by_xpath('//div/td[1]')\n        "}, "WebElement.find_elements_by_xpath": {"name": "find_elements_by_xpath", "args": ["self", "xpath"], "return_type": "None", "doc": "Finds elements within the element by xpath.\n\n        :Args:\n         - xpath - xpath locator string.\n\n        Note: The base path will be relative to this element's location.\n\n        This will select all links under this element.\n\n        ::\n\n            myelement.find_elements_by_xpath(\".//a\")\n\n        However, this will select all links in the page itself.\n\n        ::\n\n            myelement.find_elements_by_xpath(\"//a\")\n\n        :Returns:\n         - list of WebElement - a list with elements if any was found.  An\n           empty list if not\n\n        :Usage:\n            ::\n\n                elements = element.find_elements_by_xpath(\"//div[contains(@class, 'foo')]\")\n\n        "}, "WebElement.find_element_by_class_name": {"name": "find_element_by_class_name", "args": ["self", "name"], "return_type": "None", "doc": "Finds element within this element's children by class name.\n\n        :Args:\n         - name: The class name of the element to find.\n\n        :Returns:\n         - WebElement - the element if it was found\n\n        :Raises:\n         - NoSuchElementException - if the element wasn't found\n\n        :Usage:\n            ::\n\n                element = element.find_element_by_class_name('foo')\n        "}, "WebElement.find_elements_by_class_name": {"name": "find_elements_by_class_name", "args": ["self", "name"], "return_type": "None", "doc": "Finds a list of elements within this element's children by class name.\n\n        :Args:\n         - name: The class name of the elements to find.\n\n        :Returns:\n         - list of WebElement - a list with elements if any was found.  An\n           empty list if not\n\n        :Usage:\n            ::\n\n                elements = element.find_elements_by_class_name('foo')\n        "}, "WebElement.find_element_by_css_selector": {"name": "find_element_by_css_selector", "args": ["self", "css_selector"], "return_type": "None", "doc": "Finds element within this element's children by CSS selector.\n\n        :Args:\n         - css_selector - CSS selector string, ex: 'a.nav#home'\n\n        :Returns:\n         - WebElement - the element if it was found\n\n        :Raises:\n         - NoSuchElementException - if the element wasn't found\n\n        :Usage:\n            ::\n\n                element = element.find_element_by_css_selector('#foo')\n        "}, "WebElement.find_elements_by_css_selector": {"name": "find_elements_by_css_selector", "args": ["self", "css_selector"], "return_type": "None", "doc": "Finds a list of elements within this element's children by CSS selector.\n\n        :Args:\n         - css_selector - CSS selector string, ex: 'a.nav#home'\n\n        :Returns:\n         - list of WebElement - a list with elements if any was found.  An\n           empty list if not\n\n        :Usage:\n            ::\n\n                elements = element.find_elements_by_css_selector('.foo')\n        "}, "WebElement.send_keys": {"name": "send_keys", "args": ["self"], "return_type": "None", "doc": "Simulates typing into the element.\n\n        :Args:\n            - value - A string for typing, or setting form fields.  For setting\n              file inputs, this could be a local file path.\n\n        Use this to send simple key events or to fill out form fields::\n\n            form_textfield = driver.find_element(By.NAME, 'username')\n            form_textfield.send_keys(\"admin\")\n\n        This can also be used to set file inputs.\n\n        ::\n\n            file_input = driver.find_element(By.NAME, 'profilePic')\n            file_input.send_keys(\"path/to/profilepic.gif\")\n            # Generally it's better to wrap the file path in one of the methods\n            # in os.path to return the actual path to support cross OS testing.\n            # file_input.send_keys(os.path.abspath(\"path/to/profilepic.gif\"))\n\n        "}, "WebElement.shadow_root": {"name": "shadow_root", "type": "<class 'property'>", "doc": "\n            Returns a shadow root of the element if there is one or an error. Only works from\n            Chromium 96 onwards. Previous versions of Chromium based browsers will throw an\n            assertion exception.\n\n            :Returns:\n              - ShadowRoot object or\n              - NoSuchShadowRoot - if no shadow root was attached to element\n        ", "value": "<property object at 0x0000027825982B60>"}, "WebElement.is_displayed": {"name": "is_displayed", "args": ["self"], "return_type": "bool", "doc": "Whether the element is visible to a user."}, "WebElement.location_once_scrolled_into_view": {"name": "location_once_scrolled_into_view", "type": "<class 'property'>", "doc": "THIS PROPERTY MAY CHANGE WITHOUT WARNING. Use this to discover\n        where on the screen an element is so that we can click it. This method\n        should cause the element to be scrolled into view.\n\n        Returns the top lefthand corner location on the screen, or ``None`` if\n        the element is not visible.\n\n        ", "value": "<property object at 0x0000027825982BB0>"}, "WebElement.value_of_css_property": {"name": "value_of_css_property", "args": ["self", "property_name"], "return_type": "str", "doc": "The value of a CSS property."}, "WebElement.location": {"name": "location", "type": "<class 'property'>", "doc": "The location of the element in the renderable canvas.", "value": "<property object at 0x0000027825982C50>"}, "WebElement.rect": {"name": "rect", "type": "<class 'property'>", "doc": "A dictionary with the size and location of the element.", "value": "<property object at 0x0000027825982CA0>"}, "WebElement.aria_role": {"name": "aria_role", "type": "<class 'property'>", "doc": " Returns the ARIA role of the current web element", "value": "<property object at 0x0000027825982CF0>"}, "WebElement.accessible_name": {"name": "accessible_name", "type": "<class 'property'>", "doc": "Returns the ARIA Level of the current webelement", "value": "<property object at 0x0000027825982D40>"}, "WebElement.screenshot_as_base64": {"name": "screenshot_as_base64", "type": "<class 'property'>", "doc": "\n        Gets the screenshot of the current element as a base64 encoded string.\n\n        :Usage:\n            ::\n\n                img_b64 = element.screenshot_as_base64\n        ", "value": "<property object at 0x0000027825982D90>"}, "WebElement.screenshot_as_png": {"name": "screenshot_as_png", "type": "<class 'property'>", "doc": "\n        Gets the screenshot of the current element as a binary data.\n\n        :Usage:\n            ::\n\n                element_png = element.screenshot_as_png\n        ", "value": "<property object at 0x0000027825982DE0>"}, "WebElement.screenshot": {"name": "screenshot", "args": ["self", "filename"], "return_type": "bool", "doc": "\n        Saves a screenshot of the current element to a PNG image file. Returns\n           False if there is any IOError, else returns True. Use full paths in\n           your filename.\n\n        :Args:\n         - filename: The full path you wish to save your screenshot to. This\n           should end with a `.png` extension.\n\n        :Usage:\n            ::\n\n                element.screenshot('/Screenshots/foo.png')\n        "}, "WebElement.parent": {"name": "parent", "type": "<class 'property'>", "doc": "Internal reference to the WebDriver instance this element was found from.", "value": "<property object at 0x0000027825982E30>"}, "WebElement.id": {"name": "id", "type": "<class 'property'>", "doc": "Internal ID used by selenium.\n\n        This is mainly for internal use. Simple use cases such as checking if 2\n        webelements refer to the same element, can be done using ``==``::\n\n            if element1 == element2:\n                print(\"These 2 are equal\")\n\n        ", "value": "<property object at 0x0000027825982E80>"}, "WebElement.__eq__": {"name": "__eq__", "args": ["self", "element"], "return_type": "None", "doc": null}, "WebElement.__ne__": {"name": "__ne__", "args": ["self", "element"], "return_type": "None", "doc": null}, "WebElement._execute": {"name": "_execute", "args": ["self", "command", "params"], "return_type": "None", "doc": "Executes a command against the underlying HTML element.\n\n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n\n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        "}, "WebElement.find_element": {"name": "find_element", "args": ["self", "by", "value"], "return_type": "None", "doc": "\n        Find an element given a By strategy and locator.\n\n        :Usage:\n            ::\n\n                element = element.find_element(By.ID, 'foo')\n\n        :rtype: WebElement\n        "}, "WebElement.find_elements": {"name": "find_elements", "args": ["self", "by", "value"], "return_type": "None", "doc": "\n        Find elements given a By strategy and locator.\n\n        :Usage:\n            ::\n\n                element = element.find_elements(By.CLASS_NAME, 'foo')\n\n        :rtype: list of WebElement\n        "}, "WebElement.__hash__": {"name": "__hash__", "args": ["self"], "return_type": "None", "doc": null}, "WebElement._upload": {"name": "_upload", "args": ["self", "filename"], "return_type": "None", "doc": null}}, "selenium.webdriver.remote.__init__": {}, "selenium.webdriver.safari.options": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "Log.__init__": {"name": "__init__", "args": ["self"], "return_type": "None", "doc": null}, "Log.to_capabilities": {"name": "to_capabilities", "args": ["self"], "return_type": "<class 'dict'>", "doc": null}, "Options.KEY": {"name": "KEY", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "safari.options"}, "Options.AUTOMATIC_INSPECTION": {"name": "AUTOMATIC_INSPECTION", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "safari:automaticInspection"}, "Options.AUTOMATIC_PROFILING": {"name": "AUTOMATIC_PROFILING", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "safari:automaticProfiling"}, "Options.SAFARI_TECH_PREVIEW": {"name": "SAFARI_TECH_PREVIEW", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "Safari Technology Preview"}, "Options.__init__": {"name": "__init__", "args": ["self"], "return_type": "None", "doc": null}, "Options.binary_location": {"name": "binary_location", "type": "<class 'property'>", "doc": "\n        :Returns: The location of the browser binary otherwise an empty string\n        ", "value": "<property object at 0x0000027825A401D0>"}, "Options.to_capabilities": {"name": "to_capabilities", "args": ["self"], "return_type": "<class 'dict'>", "doc": "Marshals the  options to an desired capabilities object.\n        "}, "Options.default_capabilities": {"name": "default_capabilities", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x0000027825A400E0>"}, "Options.automatic_inspection": {"name": "automatic_inspection", "type": "<class 'property'>", "doc": ":Returns: The option Automatic Inspection value ", "value": "<property object at 0x0000027825A40270>"}, "Options.automatic_profiling": {"name": "automatic_profiling", "type": "<class 'property'>", "doc": ":Returns: The options Automatic Profiling value ", "value": "<property object at 0x0000027825A402C0>"}, "Options.use_technology_preview": {"name": "use_technology_preview", "type": "<class 'property'>", "doc": ":Returns: whether BROWSER_NAME is equal to Safari Technology Preview", "value": "<property object at 0x0000027825A40310>"}}, "selenium.webdriver.safari.permissions": {"Permission.GET_USER_MEDIA": {"name": "GET_USER_MEDIA", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "getUserMedia"}}, "selenium.webdriver.safari.remote_connection": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "SafariRemoteConnection.browser_name": {"name": "browser_name", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "safari"}, "SafariRemoteConnection.__init__": {"name": "__init__", "args": ["self", "remote_server_addr", "keep_alive", "ignore_proxy"], "return_type": "None", "doc": null}}, "selenium.webdriver.safari.service": {"DEFAULT_EXECUTABLE_PATH": {"name": "DEFAULT_EXECUTABLE_PATH", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "/usr/bin/safaridriver"}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "Service.__init__": {"name": "__init__", "args": ["self", "executable_path", "port", "quiet", "service_args"], "return_type": "None", "doc": "\n        Creates a new instance of the Service\n\n        :Args:\n         - executable_path : Path to the SafariDriver\n         - port : Port the service is running on\n         - quiet : Suppress driver stdout and stderr\n         - service_args : List of args to pass to the safaridriver service "}, "Service.command_line_args": {"name": "command_line_args", "args": ["self"], "return_type": "None", "doc": null}, "Service.service_url": {"name": "service_url", "type": "<class 'property'>", "doc": "\n        Gets the url of the SafariDriver Service\n        ", "value": "<property object at 0x0000027825A40630>"}}, "selenium.webdriver.safari.webdriver": {"DEFAULT_SAFARI_CAPS": {"name": "DEFAULT_SAFARI_CAPS", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'browserName': 'safari', 'platformName': 'mac'}"}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "WebDriver.__init__": {"name": "__init__", "args": ["self", "port", "executable_path", "reuse_service", "desired_capabilities", "quiet", "keep_alive", "service_args", "options", "service"], "return_type": "None", "doc": "\n\n        Creates a new Safari driver instance and launches or finds a running safaridriver service.\n\n        :Args:\n         - port - The port on which the safaridriver service should listen for new connections. If zero, a free port will be found.\n         - executable_path - Path to a custom safaridriver executable to be used. If absent, /usr/bin/safaridriver is used.\n         - reuse_service - If True, do not spawn a safaridriver instance; instead, connect to an already-running service that was launched externally.\n         - desired_capabilities: Dictionary object with desired capabilities (Can be used to provide various Safari switches).\n         - quiet - If True, the driver's stdout and stderr is suppressed.\n         - keep_alive - Whether to configure SafariRemoteConnection to use\n             HTTP keep-alive. Defaults to True.\n         - service_args : List of args to pass to the safaridriver service\n         - service - Service object for handling the browser driver if you need to pass extra details\n        "}, "WebDriver.quit": {"name": "quit", "args": ["self"], "return_type": "None", "doc": "\n        Closes the browser and shuts down the SafariDriver executable\n        that is started when starting the SafariDriver\n        "}, "WebDriver.set_permission": {"name": "set_permission", "args": ["self", "permission", "value"], "return_type": "None", "doc": null}, "WebDriver.get_permission": {"name": "get_permission", "args": ["self", "permission"], "return_type": "None", "doc": null}, "WebDriver.debug": {"name": "debug", "args": ["self"], "return_type": "None", "doc": null}}, "selenium.webdriver.safari.__init__": {}, "selenium.webdriver.support.abstract_event_listener": {"AbstractEventListener.before_navigate_to": {"name": "before_navigate_to", "args": ["self", "url", "driver"], "return_type": "None", "doc": null}, "AbstractEventListener.after_navigate_to": {"name": "after_navigate_to", "args": ["self", "url", "driver"], "return_type": "None", "doc": null}, "AbstractEventListener.before_navigate_back": {"name": "before_navigate_back", "args": ["self", "driver"], "return_type": "None", "doc": null}, "AbstractEventListener.after_navigate_back": {"name": "after_navigate_back", "args": ["self", "driver"], "return_type": "None", "doc": null}, "AbstractEventListener.before_navigate_forward": {"name": "before_navigate_forward", "args": ["self", "driver"], "return_type": "None", "doc": null}, "AbstractEventListener.after_navigate_forward": {"name": "after_navigate_forward", "args": ["self", "driver"], "return_type": "None", "doc": null}, "AbstractEventListener.before_find": {"name": "before_find", "args": ["self", "by", "value", "driver"], "return_type": "None", "doc": null}, "AbstractEventListener.after_find": {"name": "after_find", "args": ["self", "by", "value", "driver"], "return_type": "None", "doc": null}, "AbstractEventListener.before_click": {"name": "before_click", "args": ["self", "element", "driver"], "return_type": "None", "doc": null}, "AbstractEventListener.after_click": {"name": "after_click", "args": ["self", "element", "driver"], "return_type": "None", "doc": null}, "AbstractEventListener.before_change_value_of": {"name": "before_change_value_of", "args": ["self", "element", "driver"], "return_type": "None", "doc": null}, "AbstractEventListener.after_change_value_of": {"name": "after_change_value_of", "args": ["self", "element", "driver"], "return_type": "None", "doc": null}, "AbstractEventListener.before_execute_script": {"name": "before_execute_script", "args": ["self", "script", "driver"], "return_type": "None", "doc": null}, "AbstractEventListener.after_execute_script": {"name": "after_execute_script", "args": ["self", "script", "driver"], "return_type": "None", "doc": null}, "AbstractEventListener.before_close": {"name": "before_close", "args": ["self", "driver"], "return_type": "None", "doc": null}, "AbstractEventListener.after_close": {"name": "after_close", "args": ["self", "driver"], "return_type": "None", "doc": null}, "AbstractEventListener.before_quit": {"name": "before_quit", "args": ["self", "driver"], "return_type": "None", "doc": null}, "AbstractEventListener.after_quit": {"name": "after_quit", "args": ["self", "driver"], "return_type": "None", "doc": null}, "AbstractEventListener.on_exception": {"name": "on_exception", "args": ["self", "exception", "driver"], "return_type": "None", "doc": null}}, "selenium.webdriver.support.color": {"RGB_PATTERN": {"name": "RGB_PATTERN", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "^\\s*rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)\\s*$"}, "RGB_PCT_PATTERN": {"name": "RGB_PCT_PATTERN", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "^\\s*rgb\\(\\s*(\\d{1,3}|\\d{1,2}\\.\\d+)%\\s*,\\s*(\\d{1,3}|\\d{1,2}\\.\\d+)%\\s*,\\s*(\\d{1,3}|\\d{1,2}\\.\\d+)%\\s*\\)\\s*$"}, "RGBA_PATTERN": {"name": "RGBA_PATTERN", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "^\\s*rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(0|1|0\\.\\d+)\\s*\\)\\s*$"}, "RGBA_PCT_PATTERN": {"name": "RGBA_PCT_PATTERN", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "^\\s*rgba\\(\\s*(\\d{1,3}|\\d{1,2}\\.\\d+)%\\s*,\\s*(\\d{1,3}|\\d{1,2}\\.\\d+)%\\s*,\\s*(\\d{1,3}|\\d{1,2}\\.\\d+)%\\s*,\\s*(0|1|0\\.\\d+)\\s*\\)\\s*$"}, "HEX_PATTERN": {"name": "HEX_PATTERN", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "#([A-Fa-f0-9]{2})([A-Fa-f0-9]{2})([A-Fa-f0-9]{2})"}, "HEX3_PATTERN": {"name": "HEX3_PATTERN", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "#([A-Fa-f0-9])([A-Fa-f0-9])([A-Fa-f0-9])"}, "HSL_PATTERN": {"name": "HSL_PATTERN", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "^\\s*hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*\\)\\s*$"}, "HSLA_PATTERN": {"name": "HSLA_PATTERN", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "^\\s*hsla\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*,\\s*(0|1|0\\.\\d+)\\s*\\)\\s*$"}, "Colors": {"name": "Colors", "type": "<class 'dict'>", "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)", "value": "{'TRANSPARENT': Color(red=0, green=0, blue=0, alpha=0), 'ALICEBLUE': Color(red=240, green=248, blue=255, alpha=1), 'ANTIQUEWHITE': Color(red=250, green=235, blue=215, alpha=1), 'AQUA': Color(red=0, green=255, blue=255, alpha=1), 'AQUAMARINE': Color(red=127, green=255, blue=212, alpha=1), 'AZURE': Color(red=240, green=255, blue=255, alpha=1), 'BEIGE': Color(red=245, green=245, blue=220, alpha=1), 'BISQUE': Color(red=255, green=228, blue=196, alpha=1), 'BLACK': Color(red=0, green=0, blue=0, alpha=1), 'BLANCHEDALMOND': Color(red=255, green=235, blue=205, alpha=1), 'BLUE': Color(red=0, green=0, blue=255, alpha=1), 'BLUEVIOLET': Color(red=138, green=43, blue=226, alpha=1), 'BROWN': Color(red=165, green=42, blue=42, alpha=1), 'BURLYWOOD': Color(red=222, green=184, blue=135, alpha=1), 'CADETBLUE': Color(red=95, green=158, blue=160, alpha=1), 'CHARTREUSE': Color(red=127, green=255, blue=0, alpha=1), 'CHOCOLATE': Color(red=210, green=105, blue=30, alpha=1), 'CORAL': Color(red=255, green=127, blue=80, alpha=1), 'CORNFLOWERBLUE': Color(red=100, green=149, blue=237, alpha=1), 'CORNSILK': Color(red=255, green=248, blue=220, alpha=1), 'CRIMSON': Color(red=220, green=20, blue=60, alpha=1), 'CYAN': Color(red=0, green=255, blue=255, alpha=1), 'DARKBLUE': Color(red=0, green=0, blue=139, alpha=1), 'DARKCYAN': Color(red=0, green=139, blue=139, alpha=1), 'DARKGOLDENROD': Color(red=184, green=134, blue=11, alpha=1), 'DARKGRAY': Color(red=169, green=169, blue=169, alpha=1), 'DARKGREEN': Color(red=0, green=100, blue=0, alpha=1), 'DARKGREY': Color(red=169, green=169, blue=169, alpha=1), 'DARKKHAKI': Color(red=189, green=183, blue=107, alpha=1), 'DARKMAGENTA': Color(red=139, green=0, blue=139, alpha=1), 'DARKOLIVEGREEN': Color(red=85, green=107, blue=47, alpha=1), 'DARKORANGE': Color(red=255, green=140, blue=0, alpha=1), 'DARKORCHID': Color(red=153, green=50, blue=204, alpha=1), 'DARKRED': Color(red=139, green=0, blue=0, alpha=1), 'DARKSALMON': Color(red=233, green=150, blue=122, alpha=1), 'DARKSEAGREEN': Color(red=143, green=188, blue=143, alpha=1), 'DARKSLATEBLUE': Color(red=72, green=61, blue=139, alpha=1), 'DARKSLATEGRAY': Color(red=47, green=79, blue=79, alpha=1), 'DARKSLATEGREY': Color(red=47, green=79, blue=79, alpha=1), 'DARKTURQUOISE': Color(red=0, green=206, blue=209, alpha=1), 'DARKVIOLET': Color(red=148, green=0, blue=211, alpha=1), 'DEEPPINK': Color(red=255, green=20, blue=147, alpha=1), 'DEEPSKYBLUE': Color(red=0, green=191, blue=255, alpha=1), 'DIMGRAY': Color(red=105, green=105, blue=105, alpha=1), 'DIMGREY': Color(red=105, green=105, blue=105, alpha=1), 'DODGERBLUE': Color(red=30, green=144, blue=255, alpha=1), 'FIREBRICK': Color(red=178, green=34, blue=34, alpha=1), 'FLORALWHITE': Color(red=255, green=250, blue=240, alpha=1), 'FORESTGREEN': Color(red=34, green=139, blue=34, alpha=1), 'FUCHSIA': Color(red=255, green=0, blue=255, alpha=1), 'GAINSBORO': Color(red=220, green=220, blue=220, alpha=1), 'GHOSTWHITE': Color(red=248, green=248, blue=255, alpha=1), 'GOLD': Color(red=255, green=215, blue=0, alpha=1), 'GOLDENROD': Color(red=218, green=165, blue=32, alpha=1), 'GRAY': Color(red=128, green=128, blue=128, alpha=1), 'GREY': Color(red=128, green=128, blue=128, alpha=1), 'GREEN': Color(red=0, green=128, blue=0, alpha=1), 'GREENYELLOW': Color(red=173, green=255, blue=47, alpha=1), 'HONEYDEW': Color(red=240, green=255, blue=240, alpha=1), 'HOTPINK': Color(red=255, green=105, blue=180, alpha=1), 'INDIANRED': Color(red=205, green=92, blue=92, alpha=1), 'INDIGO': Color(red=75, green=0, blue=130, alpha=1), 'IVORY': Color(red=255, green=255, blue=240, alpha=1), 'KHAKI': Color(red=240, green=230, blue=140, alpha=1), 'LAVENDER': Color(red=230, green=230, blue=250, alpha=1), 'LAVENDERBLUSH': Color(red=255, green=240, blue=245, alpha=1), 'LAWNGREEN': Color(red=124, green=252, blue=0, alpha=1), 'LEMONCHIFFON': Color(red=255, green=250, blue=205, alpha=1), 'LIGHTBLUE': Color(red=173, green=216, blue=230, alpha=1), 'LIGHTCORAL': Color(red=240, green=128, blue=128, alpha=1), 'LIGHTCYAN': Color(red=224, green=255, blue=255, alpha=1), 'LIGHTGOLDENRODYELLOW': Color(red=250, green=250, blue=210, alpha=1), 'LIGHTGRAY': Color(red=211, green=211, blue=211, alpha=1), 'LIGHTGREEN': Color(red=144, green=238, blue=144, alpha=1), 'LIGHTGREY': Color(red=211, green=211, blue=211, alpha=1), 'LIGHTPINK': Color(red=255, green=182, blue=193, alpha=1), 'LIGHTSALMON': Color(red=255, green=160, blue=122, alpha=1), 'LIGHTSEAGREEN': Color(red=32, green=178, blue=170, alpha=1), 'LIGHTSKYBLUE': Color(red=135, green=206, blue=250, alpha=1), 'LIGHTSLATEGRAY': Color(red=119, green=136, blue=153, alpha=1), 'LIGHTSLATEGREY': Color(red=119, green=136, blue=153, alpha=1), 'LIGHTSTEELBLUE': Color(red=176, green=196, blue=222, alpha=1), 'LIGHTYELLOW': Color(red=255, green=255, blue=224, alpha=1), 'LIME': Color(red=0, green=255, blue=0, alpha=1), 'LIMEGREEN': Color(red=50, green=205, blue=50, alpha=1), 'LINEN': Color(red=250, green=240, blue=230, alpha=1), 'MAGENTA': Color(red=255, green=0, blue=255, alpha=1), 'MAROON': Color(red=128, green=0, blue=0, alpha=1), 'MEDIUMAQUAMARINE': Color(red=102, green=205, blue=170, alpha=1), 'MEDIUMBLUE': Color(red=0, green=0, blue=205, alpha=1), 'MEDIUMORCHID': Color(red=186, green=85, blue=211, alpha=1), 'MEDIUMPURPLE': Color(red=147, green=112, blue=219, alpha=1), 'MEDIUMSEAGREEN': Color(red=60, green=179, blue=113, alpha=1), 'MEDIUMSLATEBLUE': Color(red=123, green=104, blue=238, alpha=1), 'MEDIUMSPRINGGREEN': Color(red=0, green=250, blue=154, alpha=1), 'MEDIUMTURQUOISE': Color(red=72, green=209, blue=204, alpha=1), 'MEDIUMVIOLETRED': Color(red=199, green=21, blue=133, alpha=1), 'MIDNIGHTBLUE': Color(red=25, green=25, blue=112, alpha=1), 'MINTCREAM': Color(red=245, green=255, blue=250, alpha=1), 'MISTYROSE': Color(red=255, green=228, blue=225, alpha=1), 'MOCCASIN': Color(red=255, green=228, blue=181, alpha=1), 'NAVAJOWHITE': Color(red=255, green=222, blue=173, alpha=1), 'NAVY': Color(red=0, green=0, blue=128, alpha=1), 'OLDLACE': Color(red=253, green=245, blue=230, alpha=1), 'OLIVE': Color(red=128, green=128, blue=0, alpha=1), 'OLIVEDRAB': Color(red=107, green=142, blue=35, alpha=1), 'ORANGE': Color(red=255, green=165, blue=0, alpha=1), 'ORANGERED': Color(red=255, green=69, blue=0, alpha=1), 'ORCHID': Color(red=218, green=112, blue=214, alpha=1), 'PALEGOLDENROD': Color(red=238, green=232, blue=170, alpha=1), 'PALEGREEN': Color(red=152, green=251, blue=152, alpha=1), 'PALETURQUOISE': Color(red=175, green=238, blue=238, alpha=1), 'PALEVIOLETRED': Color(red=219, green=112, blue=147, alpha=1), 'PAPAYAWHIP': Color(red=255, green=239, blue=213, alpha=1), 'PEACHPUFF': Color(red=255, green=218, blue=185, alpha=1), 'PERU': Color(red=205, green=133, blue=63, alpha=1), 'PINK': Color(red=255, green=192, blue=203, alpha=1), 'PLUM': Color(red=221, green=160, blue=221, alpha=1), 'POWDERBLUE': Color(red=176, green=224, blue=230, alpha=1), 'PURPLE': Color(red=128, green=0, blue=128, alpha=1), 'REBECCAPURPLE': Color(red=128, green=51, blue=153, alpha=1), 'RED': Color(red=255, green=0, blue=0, alpha=1), 'ROSYBROWN': Color(red=188, green=143, blue=143, alpha=1), 'ROYALBLUE': Color(red=65, green=105, blue=225, alpha=1), 'SADDLEBROWN': Color(red=139, green=69, blue=19, alpha=1), 'SALMON': Color(red=250, green=128, blue=114, alpha=1), 'SANDYBROWN': Color(red=244, green=164, blue=96, alpha=1), 'SEAGREEN': Color(red=46, green=139, blue=87, alpha=1), 'SEASHELL': Color(red=255, green=245, blue=238, alpha=1), 'SIENNA': Color(red=160, green=82, blue=45, alpha=1), 'SILVER': Color(red=192, green=192, blue=192, alpha=1), 'SKYBLUE': Color(red=135, green=206, blue=235, alpha=1), 'SLATEBLUE': Color(red=106, green=90, blue=205, alpha=1), 'SLATEGRAY': Color(red=112, green=128, blue=144, alpha=1), 'SLATEGREY': Color(red=112, green=128, blue=144, alpha=1), 'SNOW': Color(red=255, green=250, blue=250, alpha=1), 'SPRINGGREEN': Color(red=0, green=255, blue=127, alpha=1), 'STEELBLUE': Color(red=70, green=130, blue=180, alpha=1), 'TAN': Color(red=210, green=180, blue=140, alpha=1), 'TEAL': Color(red=0, green=128, blue=128, alpha=1), 'THISTLE': Color(red=216, green=191, blue=216, alpha=1), 'TOMATO': Color(red=255, green=99, blue=71, alpha=1), 'TURQUOISE': Color(red=64, green=224, blue=208, alpha=1), 'VIOLET': Color(red=238, green=130, blue=238, alpha=1), 'WHEAT': Color(red=245, green=222, blue=179, alpha=1), 'WHITE': Color(red=255, green=255, blue=255, alpha=1), 'WHITESMOKE': Color(red=245, green=245, blue=245, alpha=1), 'YELLOW': Color(red=255, green=255, blue=0, alpha=1), 'YELLOWGREEN': Color(red=154, green=205, blue=50, alpha=1)}"}, "ParseableFloat": {"name": "ParseableFloat", "type": "<class 'typing._SpecialForm'>", "doc": "Special type indicating an unconstrained type.\n\n    - Any is compatible with every type.\n    - Any assumed to have all methods.\n    - All values assumed to be instances of Any.\n\n    Note that all the above statements are true from the point of view of\n    static type checkers. At runtime, Any should not be used with instance\n    or class checks.\n    ", "value": "typing.Any"}, "ParseableInt": {"name": "ParseableInt", "type": "<class 'typing._SpecialForm'>", "doc": "Special type indicating an unconstrained type.\n\n    - Any is compatible with every type.\n    - Any assumed to have all methods.\n    - All values assumed to be instances of Any.\n\n    Note that all the above statements are true from the point of view of\n    static type checkers. At runtime, Any should not be used with instance\n    or class checks.\n    ", "value": "typing.Any"}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "__eq__": {"name": "__eq__", "args": ["value"], "return_type": "None", "doc": "Return self==value."}, "__ne__": {"name": "__ne__", "args": ["value"], "return_type": "None", "doc": "Return self!=value."}, "__hash__": {"name": "__hash__", "args": [], "return_type": "None", "doc": "Return hash(self)."}, "__repr__": {"name": "__repr__", "args": [], "return_type": "None", "doc": "Return repr(self)."}, "__str__": {"name": "__str__", "args": [], "return_type": "None", "doc": "Return str(self)."}, "Color.rgb": {"name": "rgb", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x0000027826876430>"}, "Color.rgba": {"name": "rgba", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x0000027826877740>"}, "Color.from_string": {"name": "from_string", "args": ["cls", "str_"], "return_type": "Color", "doc": null}, "Color._from_hsl": {"name": "_from_hsl", "args": ["cls", "h", "s", "light", "a"], "return_type": "Color", "doc": null}, "Color.__init__": {"name": "__init__", "args": ["self", "red", "green", "blue", "alpha"], "return_type": "None", "doc": null}, "Color.hex": {"name": "hex", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x0000027826876E80>"}, "Color.__eq__": {"name": "__eq__", "args": ["self", "other"], "return_type": "bool", "doc": null}, "Color.__ne__": {"name": "__ne__", "args": ["self", "other"], "return_type": "bool", "doc": null}, "Color.__hash__": {"name": "__hash__", "args": ["self"], "return_type": "int", "doc": null}, "Color.__repr__": {"name": "__repr__", "args": ["self"], "return_type": "str", "doc": null}, "Color.__str__": {"name": "__str__", "args": ["self"], "return_type": "str", "doc": null}}, "selenium.webdriver.support.events": {}, "selenium.webdriver.support.event_firing_webdriver": {"_wrap_elements": {"name": "_wrap_elements", "args": ["result", "ef_driver"], "return_type": "None", "doc": null}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "__setattr__": {"name": "__setattr__", "args": ["name", "value"], "return_type": "None", "doc": "Implement setattr(self, name, value)."}, "EventFiringWebDriver.__init__": {"name": "__init__", "args": ["self", "driver", "event_listener"], "return_type": "None", "doc": "\n        Creates a new instance of the EventFiringWebDriver\n\n        :Args:\n         - driver : A WebDriver instance\n         - event_listener : Instance of a class that subclasses AbstractEventListener and implements it fully or partially\n\n        Example:\n\n        ::\n\n            from selenium.webdriver import Firefox\n            from selenium.webdriver.support.events import EventFiringWebDriver, AbstractEventListener\n\n            class MyListener(AbstractEventListener):\n                def before_navigate_to(self, url, driver):\n                    print(\"Before navigate to %s\" % url)\n                def after_navigate_to(self, url, driver):\n                    print(\"After navigate to %s\" % url)\n\n            driver = Firefox()\n            ef_driver = EventFiringWebDriver(driver, MyListener())\n            ef_driver.get(\"http://www.google.co.in/\")\n        "}, "EventFiringWebDriver.wrapped_driver": {"name": "wrapped_driver", "type": "<class 'property'>", "doc": "Returns the WebDriver instance wrapped by this EventsFiringWebDriver", "value": "<property object at 0x0000027826856B60>"}, "EventFiringWebDriver.get": {"name": "get", "args": ["self", "url"], "return_type": "None", "doc": null}, "EventFiringWebDriver.back": {"name": "back", "args": ["self"], "return_type": "None", "doc": null}, "EventFiringWebDriver.forward": {"name": "forward", "args": ["self"], "return_type": "None", "doc": null}, "EventFiringWebDriver.execute_script": {"name": "execute_script", "args": ["self", "script"], "return_type": "None", "doc": null}, "EventFiringWebDriver.execute_async_script": {"name": "execute_async_script", "args": ["self", "script"], "return_type": "None", "doc": null}, "EventFiringWebDriver.close": {"name": "close", "args": ["self"], "return_type": "None", "doc": null}, "EventFiringWebDriver.quit": {"name": "quit", "args": ["self"], "return_type": "None", "doc": null}, "EventFiringWebDriver.find_element": {"name": "find_element", "args": ["self", "by", "value"], "return_type": "None", "doc": null}, "EventFiringWebDriver.find_elements": {"name": "find_elements", "args": ["self", "by", "value"], "return_type": "None", "doc": null}, "EventFiringWebDriver.find_element_by_id": {"name": "find_element_by_id", "args": ["self", "id_"], "return_type": "None", "doc": null}, "EventFiringWebDriver.find_elements_by_id": {"name": "find_elements_by_id", "args": ["self", "id_"], "return_type": "None", "doc": null}, "EventFiringWebDriver.find_element_by_xpath": {"name": "find_element_by_xpath", "args": ["self", "xpath"], "return_type": "None", "doc": null}, "EventFiringWebDriver.find_elements_by_xpath": {"name": "find_elements_by_xpath", "args": ["self", "xpath"], "return_type": "None", "doc": null}, "EventFiringWebDriver.find_element_by_link_text": {"name": "find_element_by_link_text", "args": ["self", "link_text"], "return_type": "None", "doc": null}, "EventFiringWebDriver.find_elements_by_link_text": {"name": "find_elements_by_link_text", "args": ["self", "text"], "return_type": "None", "doc": null}, "EventFiringWebDriver.find_element_by_partial_link_text": {"name": "find_element_by_partial_link_text", "args": ["self", "link_text"], "return_type": "None", "doc": null}, "EventFiringWebDriver.find_elements_by_partial_link_text": {"name": "find_elements_by_partial_link_text", "args": ["self", "link_text"], "return_type": "None", "doc": null}, "EventFiringWebDriver.find_element_by_name": {"name": "find_element_by_name", "args": ["self", "name"], "return_type": "None", "doc": null}, "EventFiringWebDriver.find_elements_by_name": {"name": "find_elements_by_name", "args": ["self", "name"], "return_type": "None", "doc": null}, "EventFiringWebDriver.find_element_by_tag_name": {"name": "find_element_by_tag_name", "args": ["self", "name"], "return_type": "None", "doc": null}, "EventFiringWebDriver.find_elements_by_tag_name": {"name": "find_elements_by_tag_name", "args": ["self", "name"], "return_type": "None", "doc": null}, "EventFiringWebDriver.find_element_by_class_name": {"name": "find_element_by_class_name", "args": ["self", "name"], "return_type": "None", "doc": null}, "EventFiringWebDriver.find_elements_by_class_name": {"name": "find_elements_by_class_name", "args": ["self", "name"], "return_type": "None", "doc": null}, "EventFiringWebDriver.find_element_by_css_selector": {"name": "find_element_by_css_selector", "args": ["self", "css_selector"], "return_type": "None", "doc": null}, "EventFiringWebDriver.find_elements_by_css_selector": {"name": "find_elements_by_css_selector", "args": ["self", "css_selector"], "return_type": "None", "doc": null}, "EventFiringWebDriver._dispatch": {"name": "_dispatch", "args": ["self", "l_call", "l_args", "d_call", "d_args"], "return_type": "None", "doc": null}, "EventFiringWebDriver._unwrap_element_args": {"name": "_unwrap_element_args", "args": ["self", "args"], "return_type": "None", "doc": null}, "EventFiringWebDriver._wrap_value": {"name": "_wrap_value", "args": ["self", "value"], "return_type": "None", "doc": null}, "EventFiringWebDriver.__setattr__": {"name": "__setattr__", "args": ["self", "item", "value"], "return_type": "None", "doc": null}, "EventFiringWebDriver.__getattr__": {"name": "__getattr__", "args": ["self", "name"], "return_type": "None", "doc": null}, "EventFiringWebElement.__init__": {"name": "__init__", "args": ["self", "webelement", "ef_driver"], "return_type": "None", "doc": "\n        Creates a new instance of the EventFiringWebElement\n        "}, "EventFiringWebElement.wrapped_element": {"name": "wrapped_element", "type": "<class 'property'>", "doc": "Returns the WebElement wrapped by this EventFiringWebElement instance", "value": "<property object at 0x0000027826855D50>"}, "EventFiringWebElement.click": {"name": "click", "args": ["self"], "return_type": "None", "doc": null}, "EventFiringWebElement.clear": {"name": "clear", "args": ["self"], "return_type": "None", "doc": null}, "EventFiringWebElement.send_keys": {"name": "send_keys", "args": ["self"], "return_type": "None", "doc": null}, "EventFiringWebElement.find_element": {"name": "find_element", "args": ["self", "by", "value"], "return_type": "None", "doc": null}, "EventFiringWebElement.find_elements": {"name": "find_elements", "args": ["self", "by", "value"], "return_type": "None", "doc": null}, "EventFiringWebElement.find_element_by_id": {"name": "find_element_by_id", "args": ["self", "id_"], "return_type": "None", "doc": null}, "EventFiringWebElement.find_elements_by_id": {"name": "find_elements_by_id", "args": ["self", "id_"], "return_type": "None", "doc": null}, "EventFiringWebElement.find_element_by_name": {"name": "find_element_by_name", "args": ["self", "name"], "return_type": "None", "doc": null}, "EventFiringWebElement.find_elements_by_name": {"name": "find_elements_by_name", "args": ["self", "name"], "return_type": "None", "doc": null}, "EventFiringWebElement.find_element_by_link_text": {"name": "find_element_by_link_text", "args": ["self", "link_text"], "return_type": "None", "doc": null}, "EventFiringWebElement.find_elements_by_link_text": {"name": "find_elements_by_link_text", "args": ["self", "link_text"], "return_type": "None", "doc": null}, "EventFiringWebElement.find_element_by_partial_link_text": {"name": "find_element_by_partial_link_text", "args": ["self", "link_text"], "return_type": "None", "doc": null}, "EventFiringWebElement.find_elements_by_partial_link_text": {"name": "find_elements_by_partial_link_text", "args": ["self", "link_text"], "return_type": "None", "doc": null}, "EventFiringWebElement.find_element_by_tag_name": {"name": "find_element_by_tag_name", "args": ["self", "name"], "return_type": "None", "doc": null}, "EventFiringWebElement.find_elements_by_tag_name": {"name": "find_elements_by_tag_name", "args": ["self", "name"], "return_type": "None", "doc": null}, "EventFiringWebElement.find_element_by_xpath": {"name": "find_element_by_xpath", "args": ["self", "xpath"], "return_type": "None", "doc": null}, "EventFiringWebElement.find_elements_by_xpath": {"name": "find_elements_by_xpath", "args": ["self", "xpath"], "return_type": "None", "doc": null}, "EventFiringWebElement.find_element_by_class_name": {"name": "find_element_by_class_name", "args": ["self", "name"], "return_type": "None", "doc": null}, "EventFiringWebElement.find_elements_by_class_name": {"name": "find_elements_by_class_name", "args": ["self", "name"], "return_type": "None", "doc": null}, "EventFiringWebElement.find_element_by_css_selector": {"name": "find_element_by_css_selector", "args": ["self", "css_selector"], "return_type": "None", "doc": null}, "EventFiringWebElement.find_elements_by_css_selector": {"name": "find_elements_by_css_selector", "args": ["self", "css_selector"], "return_type": "None", "doc": null}, "EventFiringWebElement._dispatch": {"name": "_dispatch", "args": ["self", "l_call", "l_args", "d_call", "d_args"], "return_type": "None", "doc": null}, "EventFiringWebElement.__setattr__": {"name": "__setattr__", "args": ["self", "item", "value"], "return_type": "None", "doc": null}, "EventFiringWebElement.__getattr__": {"name": "__getattr__", "args": ["self", "name"], "return_type": "None", "doc": null}}, "selenium.webdriver.support.expected_conditions": {"title_is": {"name": "title_is", "args": ["title"], "return_type": "None", "doc": "An expectation for checking the title of a page.\n    title is the expected title, which must be an exact match\n    returns True if the title matches, false otherwise."}, "title_contains": {"name": "title_contains", "args": ["title"], "return_type": "None", "doc": " An expectation for checking that the title contains a case-sensitive\n    substring. title is the fragment of title expected\n    returns True when the title matches, False otherwise\n    "}, "presence_of_element_located": {"name": "presence_of_element_located", "args": ["locator"], "return_type": "None", "doc": " An expectation for checking that an element is present on the DOM\n    of a page. This does not necessarily mean that the element is visible.\n    locator - used to find the element\n    returns the WebElement once it is located\n    "}, "url_contains": {"name": "url_contains", "args": ["url"], "return_type": "None", "doc": " An expectation for checking that the current url contains a\n    case-sensitive substring.\n    url is the fragment of url expected,\n    returns True when the url matches, False otherwise\n    "}, "url_matches": {"name": "url_matches", "args": ["pattern"], "return_type": "None", "doc": "An expectation for checking the current url.\n    pattern is the expected pattern, which must be an exact match\n    returns True if the url matches, false otherwise."}, "url_to_be": {"name": "url_to_be", "args": ["url"], "return_type": "None", "doc": "An expectation for checking the current url.\n    url is the expected url, which must be an exact match\n    returns True if the url matches, false otherwise."}, "url_changes": {"name": "url_changes", "args": ["url"], "return_type": "None", "doc": "An expectation for checking the current url.\n    url is the expected url, which must not be an exact match\n    returns True if the url is different, false otherwise."}, "visibility_of_element_located": {"name": "visibility_of_element_located", "args": ["locator"], "return_type": "None", "doc": " An expectation for checking that an element is present on the DOM of a\n    page and visible. Visibility means that the element is not only displayed\n    but also has a height and width that is greater than 0.\n    locator - used to find the element\n    returns the WebElement once it is located and visible\n    "}, "visibility_of": {"name": "visibility_of", "args": ["element"], "return_type": "None", "doc": " An expectation for checking that an element, known to be present on the\n    DOM of a page, is visible. Visibility means that the element is not only\n    displayed but also has a height and width that is greater than 0.\n    element is the WebElement\n    returns the (same) WebElement once it is visible\n    "}, "_element_if_visible": {"name": "_element_if_visible", "args": ["element", "visibility"], "return_type": "None", "doc": null}, "presence_of_all_elements_located": {"name": "presence_of_all_elements_located", "args": ["locator"], "return_type": "None", "doc": " An expectation for checking that there is at least one element present\n    on a web page.\n    locator is used to find the element\n    returns the list of WebElements once they are located\n    "}, "visibility_of_any_elements_located": {"name": "visibility_of_any_elements_located", "args": ["locator"], "return_type": "None", "doc": " An expectation for checking that there is at least one element visible\n    on a web page.\n    locator is used to find the element\n    returns the list of WebElements once they are located\n    "}, "visibility_of_all_elements_located": {"name": "visibility_of_all_elements_located", "args": ["locator"], "return_type": "None", "doc": " An expectation for checking that all elements are present on the DOM of a\n    page and visible. Visibility means that the elements are not only displayed\n    but also has a height and width that is greater than 0.\n    locator - used to find the elements\n    returns the list of WebElements once they are located and visible\n    "}, "text_to_be_present_in_element": {"name": "text_to_be_present_in_element", "args": ["locator", "text_"], "return_type": "None", "doc": " An expectation for checking if the given text is present in the\n    specified element.\n    locator, text\n    "}, "text_to_be_present_in_element_value": {"name": "text_to_be_present_in_element_value", "args": ["locator", "text_"], "return_type": "None", "doc": "\n    An expectation for checking if the given text is present in the element's value.\n    locator, text\n    "}, "text_to_be_present_in_element_attribute": {"name": "text_to_be_present_in_element_attribute", "args": ["locator", "attribute_", "text_"], "return_type": "None", "doc": "\n    An expectation for checking if the given text is present in the element's attribute.\n    locator, attribute, text\n    "}, "frame_to_be_available_and_switch_to_it": {"name": "frame_to_be_available_and_switch_to_it", "args": ["locator"], "return_type": "None", "doc": " An expectation for checking whether the given frame is available to\n    switch to.  If the frame is available it switches the given driver to the\n    specified frame.\n    "}, "invisibility_of_element_located": {"name": "invisibility_of_element_located", "args": ["locator"], "return_type": "None", "doc": " An Expectation for checking that an element is either invisible or not\n    present on the DOM.\n\n    locator used to find the element\n    "}, "invisibility_of_element": {"name": "invisibility_of_element", "args": ["element"], "return_type": "None", "doc": " An Expectation for checking that an element is either invisible or not\n    present on the DOM.\n\n    element is either a locator (text) or an WebElement\n    "}, "element_to_be_clickable": {"name": "element_to_be_clickable", "args": ["mark"], "return_type": "None", "doc": "\n    An Expectation for checking an element is visible and enabled such that\n    you can click it.\n\n    element is either a locator (text) or an WebElement\n    "}, "staleness_of": {"name": "staleness_of", "args": ["element"], "return_type": "None", "doc": " Wait until an element is no longer attached to the DOM.\n    element is the element to wait for.\n    returns False if the element is still attached to the DOM, true otherwise.\n    "}, "element_to_be_selected": {"name": "element_to_be_selected", "args": ["element"], "return_type": "None", "doc": " An expectation for checking the selection is selected.\n    element is WebElement object\n    "}, "element_located_to_be_selected": {"name": "element_located_to_be_selected", "args": ["locator"], "return_type": "None", "doc": "An expectation for the element to be located is selected.\n    locator is a tuple of (by, path)"}, "element_selection_state_to_be": {"name": "element_selection_state_to_be", "args": ["element", "is_selected"], "return_type": "None", "doc": " An expectation for checking if the given element is selected.\n    element is WebElement object\n    is_selected is a Boolean.\n    "}, "element_located_selection_state_to_be": {"name": "element_located_selection_state_to_be", "args": ["locator", "is_selected"], "return_type": "None", "doc": " An expectation to locate an element and check if the selection state\n    specified is in that state.\n    locator is a tuple of (by, path)\n    is_selected is a boolean\n    "}, "number_of_windows_to_be": {"name": "number_of_windows_to_be", "args": ["num_windows"], "return_type": "None", "doc": " An expectation for the number of windows to be a certain value."}, "new_window_is_opened": {"name": "new_window_is_opened", "args": ["current_handles"], "return_type": "None", "doc": " An expectation that a new window will be opened and have the number of\n    windows handles increase"}, "alert_is_present": {"name": "alert_is_present", "args": [], "return_type": "None", "doc": null}, "element_attribute_to_include": {"name": "element_attribute_to_include", "args": ["locator", "attribute_"], "return_type": "None", "doc": " An expectation for checking if the given attribute is included in the\n    specified element.\n    locator, attribute\n    "}, "any_of": {"name": "any_of", "args": [], "return_type": "None", "doc": " An expectation that any of multiple expected conditions is true.\n    Equivalent to a logical 'OR'.\n    Returns results of the first matching condition, or False if none do. "}, "all_of": {"name": "all_of", "args": [], "return_type": "None", "doc": " An expectation that all of multiple expected conditions is true.\n    Equivalent to a logical 'AND'.\n    Returns: When any ExpectedCondition is not met: False.\n    When all ExpectedConditions are met: A List with each ExpectedCondition's return value. "}, "none_of": {"name": "none_of", "args": [], "return_type": "None", "doc": " An expectation that none of 1 or multiple expected conditions is true.\n    Equivalent to a logical 'NOT-OR'.\n    Returns a Boolean "}}, "selenium.webdriver.support.relative_locator": {"with_tag_name": {"name": "with_tag_name", "args": ["tag_name"], "return_type": "RelativeBy", "doc": "\n        Start searching for relative objects using a tag name.\n\n        Note: This method may be removed in future versions, please use\n        `locate_with` instead.\n        :Args:\n            - tag_name: the DOM tag of element to start searching.\n        :Returns:\n            - RelativeBy - use this object to create filters within a\n                `find_elements` call.\n    "}, "locate_with": {"name": "locate_with", "args": ["by", "using"], "return_type": "RelativeBy", "doc": "\n        Start searching for relative objects your search criteria with By.\n\n        :Args:\n            - by: The value from `By` passed in.\n            - using: search term to find the element with.\n        :Returns:\n            - RelativeBy - use this object to create filters within a\n                `find_elements` call.\n    "}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "RelativeBy.__init__": {"name": "__init__", "args": ["self", "root", "filters"], "return_type": "None", "doc": "\n            Creates a new RelativeBy object. It is preferred if you use the\n            `locate_with` method as this signature could change.\n            :Args:\n                root - A dict with `By` enum as the key and the search query as the value\n                filters - A list of the filters that will be searched. If none are passed\n                    in please use the fluent API on the object to create the filters\n        "}, "RelativeBy.above": {"name": "above", "args": ["self", "element_or_locator"], "return_type": "RelativeBy", "doc": "\n            Add a filter to look for elements above.\n            :Args:\n                - element_or_locator: Element to look above\n        "}, "RelativeBy.below": {"name": "below", "args": ["self", "element_or_locator"], "return_type": "RelativeBy", "doc": "\n            Add a filter to look for elements below.\n            :Args:\n                - element_or_locator: Element to look below\n        "}, "RelativeBy.to_left_of": {"name": "to_left_of", "args": ["self", "element_or_locator"], "return_type": "RelativeBy", "doc": "\n            Add a filter to look for elements to the left of.\n            :Args:\n                - element_or_locator: Element to look to the left of\n        "}, "RelativeBy.to_right_of": {"name": "to_right_of", "args": ["self", "element_or_locator"], "return_type": "RelativeBy", "doc": "\n            Add a filter to look for elements right of.\n            :Args:\n                - element_or_locator: Element to look right of\n        "}, "RelativeBy.near": {"name": "near", "args": ["self", "element_or_locator_distance"], "return_type": "RelativeBy", "doc": "\n            Add a filter to look for elements near.\n            :Args:\n                - element_or_locator_distance: Element to look near by the element or within a distance\n        "}, "RelativeBy.to_dict": {"name": "to_dict", "args": ["self"], "return_type": "typing.Dict", "doc": "\n            Create a dict that will be passed to the driver to start searching for the element\n        "}}, "selenium.webdriver.support.select": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "Select.__init__": {"name": "__init__", "args": ["self", "webelement"], "return_type": "None", "doc": "\n        Constructor. A check is made that the given element is, indeed, a SELECT tag. If it is not,\n        then an UnexpectedTagNameException is thrown.\n\n        :Args:\n         - webelement - element SELECT element to wrap\n\n        Example:\n            from selenium.webdriver.support.ui import Select \n\n            Select(driver.find_element(By.TAG_NAME, \"select\")).select_by_index(2)\n        "}, "Select.options": {"name": "options", "type": "<class 'property'>", "doc": "Returns a list of all options belonging to this select tag", "value": "<property object at 0x00000278268B76A0>"}, "Select.all_selected_options": {"name": "all_selected_options", "type": "<class 'property'>", "doc": "Returns a list of all selected options belonging to this select tag", "value": "<property object at 0x00000278268B7790>"}, "Select.first_selected_option": {"name": "first_selected_option", "type": "<class 'property'>", "doc": "The first selected option in this select tag (or the currently selected option in a\n        normal select)", "value": "<property object at 0x00000278268B7290>"}, "Select.select_by_value": {"name": "select_by_value", "args": ["self", "value"], "return_type": "None", "doc": "Select all options that have a value matching the argument. That is, when given \"foo\" this\n           would select an option like:\n\n           <option value=\"foo\">Bar</option>\n\n           :Args:\n            - value - The value to match against\n\n           throws NoSuchElementException If there is no option with specified value in SELECT\n           "}, "Select.select_by_index": {"name": "select_by_index", "args": ["self", "index"], "return_type": "None", "doc": "Select the option at the given index. This is done by examining the \"index\" attribute of an\n           element, and not merely by counting.\n\n           :Args:\n            - index - The option at this index will be selected\n\n           throws NoSuchElementException If there is no option with specified index in SELECT\n           "}, "Select.select_by_visible_text": {"name": "select_by_visible_text", "args": ["self", "text"], "return_type": "None", "doc": "Select all options that display text matching the argument. That is, when given \"Bar\" this\n           would select an option like:\n\n            <option value=\"foo\">Bar</option>\n\n           :Args:\n            - text - The visible text to match against\n\n            throws NoSuchElementException If there is no option with specified text in SELECT\n           "}, "Select.deselect_all": {"name": "deselect_all", "args": ["self"], "return_type": "None", "doc": "Clear all selected entries. This is only valid when the SELECT supports multiple selections.\n           throws NotImplementedError If the SELECT does not support multiple selections\n        "}, "Select.deselect_by_value": {"name": "deselect_by_value", "args": ["self", "value"], "return_type": "None", "doc": "Deselect all options that have a value matching the argument. That is, when given \"foo\" this\n           would deselect an option like:\n\n            <option value=\"foo\">Bar</option>\n\n           :Args:\n            - value - The value to match against\n\n            throws NoSuchElementException If there is no option with specified value in SELECT\n        "}, "Select.deselect_by_index": {"name": "deselect_by_index", "args": ["self", "index"], "return_type": "None", "doc": "Deselect the option at the given index. This is done by examining the \"index\" attribute of an\n           element, and not merely by counting.\n\n           :Args:\n            - index - The option at this index will be deselected\n\n            throws NoSuchElementException If there is no option with specified index in SELECT\n        "}, "Select.deselect_by_visible_text": {"name": "deselect_by_visible_text", "args": ["self", "text"], "return_type": "None", "doc": "Deselect all options that display text matching the argument. That is, when given \"Bar\" this\n           would deselect an option like:\n\n           <option value=\"foo\">Bar</option>\n\n           :Args:\n            - text - The visible text to match against\n        "}, "Select._setSelected": {"name": "_setSelected", "args": ["self", "option"], "return_type": "None", "doc": null}, "Select._unsetSelected": {"name": "_unsetSelected", "args": ["self", "option"], "return_type": "None", "doc": null}, "Select._escapeString": {"name": "_escapeString", "args": ["self", "value"], "return_type": "None", "doc": null}, "Select._get_longest_token": {"name": "_get_longest_token", "args": ["self", "value"], "return_type": "None", "doc": null}}, "selenium.webdriver.support.ui": {}, "selenium.webdriver.support.wait": {"POLL_FREQUENCY": {"name": "POLL_FREQUENCY", "type": "<class 'float'>", "doc": "Convert a string or number to a floating point number, if possible.", "value": "0.5"}, "IGNORED_EXCEPTIONS": {"name": "IGNORED_EXCEPTIONS", "type": "<class 'tuple'>", "doc": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object.", "value": "(<class 'selenium.common.exceptions.NoSuchElementException'>,)"}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "__repr__": {"name": "__repr__", "args": [], "return_type": "None", "doc": "Return repr(self)."}, "WebDriverWait.__init__": {"name": "__init__", "args": ["self", "driver", "timeout", "poll_frequency", "ignored_exceptions"], "return_type": "None", "doc": "Constructor, takes a WebDriver instance and timeout in seconds.\n\n           :Args:\n            - driver - Instance of WebDriver (Ie, Firefox, Chrome or Remote)\n            - timeout - Number of seconds before timing out\n            - poll_frequency - sleep interval between calls\n              By default, it is 0.5 second.\n            - ignored_exceptions - iterable structure of exception classes ignored during calls.\n              By default, it contains NoSuchElementException only.\n\n           Example::\n\n            from selenium.webdriver.support.wait import WebDriverWait \n\n            element = WebDriverWait(driver, 10).until(lambda x: x.find_element(By.ID, \"someId\")) \n\n            is_disappeared = WebDriverWait(driver, 30, 1, (ElementNotVisibleException)).\\ \n\n                        until_not(lambda x: x.find_element(By.ID, \"someId\").is_displayed())\n        "}, "WebDriverWait.__repr__": {"name": "__repr__", "args": ["self"], "return_type": "None", "doc": null}, "WebDriverWait.until": {"name": "until", "args": ["self", "method", "message"], "return_type": "None", "doc": "Calls the method provided with the driver as an argument until the         return value does not evaluate to ``False``.\n\n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        "}, "WebDriverWait.until_not": {"name": "until_not", "args": ["self", "method", "message"], "return_type": "None", "doc": "Calls the method provided with the driver as an argument until the         return value evaluates to ``False``.\n\n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`, or\n                  ``True`` if `method` has raised one of the ignored exceptions\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        "}}, "selenium.webdriver.support.__init__": {}, "selenium.webdriver.webkitgtk.options": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "Options.KEY": {"name": "KEY", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "webkitgtk:browserOptions"}, "Options.__init__": {"name": "__init__", "args": ["self"], "return_type": "None", "doc": null}, "Options.binary_location": {"name": "binary_location", "type": "<class 'property'>", "doc": "\n        :Returns: The location of the browser binary otherwise an empty string\n        ", "value": "<property object at 0x0000027825A41530>"}, "Options.overlay_scrollbars_enabled": {"name": "overlay_scrollbars_enabled", "type": "<class 'property'>", "doc": "\n        :Returns: Whether overlay scrollbars should be enabled\n        ", "value": "<property object at 0x0000027825A41580>"}, "Options.to_capabilities": {"name": "to_capabilities", "args": ["self"], "return_type": "None", "doc": "\n        Creates a capabilities with all the options that have been set and\n        returns a dictionary with everything\n        "}, "Options.default_capabilities": {"name": "default_capabilities", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x0000027825A41440>"}}, "selenium.webdriver.webkitgtk.service": {"DEFAULT_EXECUTABLE_PATH": {"name": "DEFAULT_EXECUTABLE_PATH", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "WebKitWebDriver"}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "Service.__init__": {"name": "__init__", "args": ["self", "executable_path", "port", "log_path"], "return_type": "None", "doc": "\n        Creates a new instance of the Service\n\n        :Args:\n         - executable_path : Path to the WebKitGTKDriver\n         - port : Port the service is running on\n         - log_path : Path for the WebKitGTKDriver service to log to\n        "}, "Service.command_line_args": {"name": "command_line_args", "args": ["self"], "return_type": "None", "doc": null}, "Service.send_remote_shutdown_command": {"name": "send_remote_shutdown_command", "args": ["self"], "return_type": "None", "doc": null}}, "selenium.webdriver.webkitgtk.webdriver": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "WebDriver.capabilities": {"name": "capabilities", "type": "<class 'property'>", "doc": "\n        returns the drivers current capabilities being used.\n        ", "value": "<property object at 0x00000278259AD800>"}, "WebDriver.desired_capabilities": {"name": "desired_capabilities", "type": "<class 'property'>", "doc": "\n        returns the drivers current desired capabilities being used\n        ", "value": "<property object at 0x00000278259AD7B0>"}, "WebDriver.__init__": {"name": "__init__", "args": ["self", "executable_path", "port", "options", "desired_capabilities", "service_log_path", "keep_alive"], "return_type": "None", "doc": "\n        Creates a new instance of the WebKitGTK driver.\n\n        Starts the service and then creates new instance of WebKitGTK Driver.\n\n        :Args:\n         - executable_path : path to the executable. If the default is used it assumes the executable is in the $PATH.\n         - port : port you would like the service to run, if left as 0, a free port will be found.\n         - options : an instance of WebKitGTKOptions\n         - desired_capabilities : Dictionary object with desired capabilities\n         - service_log_path : Path to write service stdout and stderr output.\n         - keep_alive : Whether to configure RemoteConnection to use HTTP keep-alive.\n        "}, "WebDriver.quit": {"name": "quit", "args": ["self"], "return_type": "None", "doc": "\n        Closes the browser and shuts down the WebKitGTKDriver executable\n        that is started when starting the WebKitGTKDriver\n        "}}, "selenium.webdriver.webkitgtk.__init__": {}, "selenium.webdriver.wpewebkit.options": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "Options.KEY": {"name": "KEY", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "wpe:browserOptions"}, "Options.__init__": {"name": "__init__", "args": ["self"], "return_type": "None", "doc": null}, "Options.capabilities": {"name": "capabilities", "type": "<class 'property'>", "doc": null, "value": "<property object at 0x0000027825A420C0>"}, "Options.set_capability": {"name": "set_capability", "args": ["self", "name", "value"], "return_type": "None", "doc": "Sets a capability."}, "Options.binary_location": {"name": "binary_location", "type": "<class 'property'>", "doc": "\n        Returns the location of the browser binary otherwise an empty string\n        ", "value": "<property object at 0x0000027825A421B0>"}, "Options.to_capabilities": {"name": "to_capabilities", "args": ["self"], "return_type": "None", "doc": "\n        Creates a capabilities with all the options that have been set and\n        returns a dictionary with everything\n        "}}, "selenium.webdriver.wpewebkit.service": {"DEFAULT_EXECUTABLE_PATH": {"name": "DEFAULT_EXECUTABLE_PATH", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "WPEWebDriver"}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "Service.__init__": {"name": "__init__", "args": ["self", "executable_path", "port", "log_path"], "return_type": "None", "doc": "\n        Creates a new instance of the Service\n\n        :Args:\n         - executable_path : Path to the WPEWebKitDriver\n         - port : Port the service is running on\n         - log_path : Path for the WPEWebKitDriver service to log to\n        "}, "Service.command_line_args": {"name": "command_line_args", "args": ["self"], "return_type": "None", "doc": null}, "Service.send_remote_shutdown_command": {"name": "send_remote_shutdown_command", "args": ["self"], "return_type": "None", "doc": null}}, "selenium.webdriver.wpewebkit.webdriver": {"__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "WebDriver.capabilities": {"name": "capabilities", "type": "<class 'property'>", "doc": "\n        returns the drivers current capabilities being used.\n        ", "value": "<property object at 0x00000278259AD800>"}, "WebDriver.desired_capabilities": {"name": "desired_capabilities", "type": "<class 'property'>", "doc": "\n        returns the drivers current desired capabilities being used\n        ", "value": "<property object at 0x00000278259AD7B0>"}, "WebDriver.__init__": {"name": "__init__", "args": ["self", "executable_path", "port", "options", "desired_capabilities", "service_log_path"], "return_type": "None", "doc": "\n        Creates a new instance of the WPEWebKit driver.\n\n        Starts the service and then creates new instance of WPEWebKit Driver.\n\n        :Args:\n         - executable_path : path to the executable. If the default is used it assumes the executable is in the $PATH.\n         - port : port you would like the service to run, if left as 0, a free port will be found.\n         - options : an instance of WPEWebKitOptions\n         - desired_capabilities : Dictionary object with desired capabilities\n         - service_log_path : Path to write service stdout and stderr output.\n        "}, "WebDriver.quit": {"name": "quit", "args": ["self"], "return_type": "None", "doc": "\n        Closes the browser and shuts down the WPEWebKitDriver executable\n        that is started when starting the WPEWebKitDriver\n        "}}, "selenium.webdriver.wpewebkit.__init__": {}, "WebAutomation.dolphin_anty.conf": {"AUTH_TOKEN": {"name": "AUTH_TOKEN", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MTkzODIxMCwidXNlcm5hbWUiOiJzb3Z0c2FyZG9tQGdtYWlsLmNvbSIsInJvbGUiOiJhZG1pbiIsInRlYW1JZCI6MTg4NTQwNiwidG9rZW5DcmVhdGVkQXQiOjE2ODAzNzQ1OTZ9.LCvE_hhgQ1nzIHxyE4W1yJR4G_TsPt7uRbXEZxct5Xs"}, "SELENIUM_DRIVER_PATH": {"name": "SELENIUM_DRIVER_PATH", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": "C:\\chromedriver-windows-x64.exe"}}, "WebAutomation.dolphin_anty.conf_release": {"AUTH_TOKEN": {"name": "AUTH_TOKEN", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": ""}, "SELENIUM_DRIVER_PATH": {"name": "SELENIUM_DRIVER_PATH", "type": "<class 'str'>", "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.", "value": ""}}, "WebAutomation.dolphin_anty.imports": {}, "WebAutomation.dolphin_anty.script": {"func": {"name": "func", "type": "<class 'function'>", "doc": null, "value": "<function <lambda> at 0x0000027826E5CC10>"}, "say_hello": {"name": "say_hello", "args": [], "return_type": "None", "doc": null}, "__init__": {"name": "__init__", "args": [], "return_type": "None", "doc": "Initialize self.  See help(type(self)) for accurate signature."}, "Person.__init__": {"name": "__init__", "args": ["self", "name"], "return_type": "None", "doc": null}, "Person.set_age": {"name": "set_age", "args": ["self", "age"], "return_type": "None", "doc": null}, "Person.get_age": {"name": "get_age", "args": ["self"], "return_type": "None", "doc": null}, "Person.get_name": {"name": "get_name", "args": ["self"], "return_type": "None", "doc": null}, "Person.display_info": {"name": "display_info", "args": ["self"], "return_type": "None", "doc": null}, "AntyDolphinScript.__init__": {"name": "__init__", "args": ["self", "auth_token", "limit_profiles", "max_profiles_count"], "return_type": "None", "doc": null}, "AntyDolphinScript.get_profiles": {"name": "get_profiles", "args": ["self"], "return_type": "None", "doc": null}, "AntyDolphinScript.getLogger": {"name": "getLogger", "args": ["self", "browser_info"], "return_type": "<class 'logging.Logger'>", "doc": null}, "AntyDolphinScript.automation": {"name": "automation", "args": [], "return_type": "None", "doc": null}, "AntyDolphinScript.start": {"name": "start", "args": ["self", "profile_id"], "return_type": "None", "doc": null}, "AntyDolphinScript.close": {"name": "close", "args": ["self", "profile_id"], "return_type": "None", "doc": null}, "AntyDolphinScript.run_profiles": {"name": "run_profiles", "args": ["self"], "return_type": "None", "doc": null}}}